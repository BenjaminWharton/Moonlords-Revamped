//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Moonlords Revamped
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_rEWARDCAP = 500000;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit gv_currentBoss;
unitgroup[13] gv_enemyStucturesOfStage;
unitgroup gv_protossDefenders;
int gv_zOptionalQuestCount;
int gv_zOptionalQuestCountQuest;
bool gv_zstage8active;
int[6] gv_zdeathcount;
bool gv_pylondownteleport;
int gv_zstatsdialog;
bool[6] gv_zstickselect;
bool[6] gv_zeukey;
fixed gv_xpboost;
bool gv_bossActive;
int[20] gv_zheropickdialogbuttons;
playergroup gv_zcleargroup;
fixed gv_xp;
int gv_xp2;
int gv_xplevel;
fixed gv_xpmax;
int gv_xpmax2;
fixed gv_xpmin;
int gv_xpmin2;
unit[5] gv_hero;
unit gv_gateway1;
unit gv_gateway2;
fixed gv_playercount;
fixed gv_difficulty;
int[5] gv_zgametime;
bank[6] gv_zbanks;
fixed[11] gv_xpBoni;
int gv_xpbardialog;
int[4] gv_xpbaritem;
int gv_teleportdialog;
int[13] gv_teleportdialogbuttons;
int gv_upgradesAvailable;
int gv_upgradesTotalLimit;
int gv_upgradedialog;
int[17][17] gv_upgradedialogbuttons;
int[5] gv_talentpointsavailable;
int[20] gv_talentsdialog;
int[20][6][20] gv_talentsdialogbuttons;
int gv_stage;
int[6] gv_rewardUnspend;
int[6] gv_rewardaccumulated;
int[6][21] gv_rewardUsed;
int gv_zachievementDialog;
int[101] gv_zachievementObjects;
int[5] gv_zachievementtarget;
int[13] gv_zachievementscounterstart;
int gv_acmProtossKills;
int gv_zquestssolved;
int gv_zpylonslostthisgame;
int[6] gv_zrecordtimes;
bool[5] gv_zachievementinprogress;
int gv_zrescuequests;
int gv_zevoquests;
int gv_zbonusbuildings;
int[17] gv_zkillsincelastdeath;
int gv_zevolutionspeed;
int gv_ztimeoflaststage;
bool gv_zspeedstage;
int gv_zthormaster;
int gv_zmaxstage;
int gv_zstageslostinmax;
int gv_zacmherokillscounter;
int gv_mode;
int gv_mode2;
int gv_zacmchampionkillcounter;
bool gv_zZealotBeamOutS10P2;
bool[5] gv_zchallengemodetypewin;
fixed gv_xPPeriodicBonus;
int gv_xPPeriodicBonusSum;
int gv_zacmCounter;
int[5] gv_zacmrestless;
int gv_zacmOverseers;
int gv_zacmTreasures;
int[6] gv_zacmRewardsThisMatch;
unitgroup gv_zbuildinghasquest;
int gv_champion;
unit gv_demolisher;
unitgroup gv_alliedUnitsOnMap;
int gv_challengeStage;
int gv_rewardDialog;
int[27] gv_rewardButtons;
int[5] gv_rewardSpendMultiplier;
int[5] gv_killsThisGame;
int[5] gv_killAchLevel;
int[5] gv_questAchLevel;
int gv_bossTooltipDialog;
int gv_bossTooltipDialogItem;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;

    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_enemyStucturesOfStage[init_i] = UnitGroupEmpty();
    }
    gv_protossDefenders = UnitGroupEmpty();
    gv_zOptionalQuestCountQuest = c_invalidObjectiveId;
    gv_zstatsdialog = c_invalidDialogId;
    gv_xpboost = 1.0;
    for (init_i = 0; init_i <= 19; init_i += 1) {
        gv_zheropickdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_zcleargroup = PlayerGroupEmpty();
    gv_xplevel = 1;
    gv_xpmax = 100.0;
    gv_xpbardialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_xpbaritem[init_i] = c_invalidDialogControlId;
    }
    gv_teleportdialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_teleportdialogbuttons[init_i] = c_invalidDialogControlId;
    }
    gv_upgradedialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            gv_upgradedialogbuttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 19; init_i += 1) {
        gv_talentsdialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 19; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            for (init_k = 0; init_k <= 19; init_k += 1) {
                gv_talentsdialogbuttons[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    gv_stage = 1;
    gv_zachievementDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_zachievementObjects[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_zkillsincelastdeath[init_i] = 1000;
    }
    gv_zmaxstage = 1;
    gv_zacmCounter = 72;
    gv_zbuildinghasquest = UnitGroupEmpty();
    gv_alliedUnitsOnMap = UnitGroupEmpty();
    gv_challengeStage = 1;
    gv_rewardDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 26; init_i += 1) {
        gv_rewardButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_rewardSpendMultiplier[init_i] = 1;
    }
    gv_bossTooltipDialog = c_invalidDialogId;
    gv_bossTooltipDialogItem = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
int gf_gainxp (fixed lp_amount);
bool gf_xpcompare (fixed lp_xp1, int lp_xp2, fixed lp_xpmax1, int lp_xpmax2);
void gf_xpbaranim (fixed lp_min1, int lp_min2, fixed lp_max1, int lp_max2);
void gf_levelupanim ();
int gf_Currentlevel ();
void gf_SpawningBuilding (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward);
void gf_SpawningBuilding2 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission);
void gf_SpawningBuilding3 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission, bool lp_hasbuilding);
void gf_SpawningBuilding4 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission, bool lp_hasbuilding, int lp_unitlimit, int lp_timedlife, bool lp_destroyafterstage, int lp_stage);
void gf_SpawningRandom (point lp_pos1, point lp_pos2, point lp_pos3, point lp_pos4, point lp_pos5, point lp_pos6, point lp_pos7, point lp_pos8, point lp_pos9, point lp_pos10, point lp_pos11, point lp_pos12, point lp_pos13, point lp_pos14, point lp_pos15, point lp_pos16, point lp_pos17, int lp_countbytype1, int lp_countbytype2, int lp_countbytype3, int lp_countbytype4, int lp_countbytype5, int lp_countbytype6, int lp_countbytype7, int lp_countbytype8, int lp_countbytype9, int lp_countbytype10, int lp_countbytype11, int lp_countbytype12, int lp_count, int lp_timer);
void gf_UpdateOptionalQuestCounter (bool lp_upOrDown);
void gf_GainReward (int lp_num);
void gf_thorboss1 (point lp_point);
void gf_thorboss2 (point lp_point);
void gf_thorboss3 (point lp_point);
void gf_thorboss4 (point lp_point);
void gf_thorboss5 (point lp_point);
void gf_thorboss6 (point lp_point);
void gf_thorboss7 (point lp_point);
void gf_BansheeDropBeam (unit lp_hostunit, fixed lp_delay);
void gf_EscortAmbush (unit lp_escort);
void gf_colossiquest ();
void gf_hiddenbuildingfound ();
void gf_evolutionspeedcomplete ();
void gf_SpawningPool2 ();
void gf_initpicktreasurespots (int lp_mode);
void gf_initselectmode ();
void gf_introfornewb (int lp_newb);
void gf_inittips ();
void gf_initdifficultyplayercount ();
void gf_initalliances ();
void gf_buildbase1 ();
void gf_buildzergbase1 ();
void gf_heropickdialogANDtalentsANDupgradesbuttons ();
void gf_initaddgametime ();
void gf_initdisplaytalentsetcasMinerals ();
string gf_NumberToHeroName (int lp_herotypenumber, int lp_add);
void gf_initteleportdialog ();
void gf_TeleportDialogOpenAfterDeath (int lp_pnum);
void gf_TeleportHideShow (unit lp_hero);
void gf_initAchievementdialog ();
text gf_achievementgettext (bool lp_title, int lp_number);
text gf_achievementgetlist (bool lp_title);
void gf_achievementopen (int lp_player, int lp_targetplayer);
void gf_achievementnew (int lp_player, int lp_achievement);
void gf_achievementnewtobank (int lp_achievement, int lp_player);
void gf_achievementTeam (int lp_player);
int gf_achievementpointsum (int lp_player);
void gf_achievementPossiblyGainedTeam (int lp_achievementnumber, int lp_amounttocheckfor);
void gf_achievementPossiblyGainedTeamLessThan (int lp_achievementnumber, int lp_amounttocheckfor);
void gf_achievementPossiblyGainedSolo (int lp_achievementnumber, int lp_amounttocheckfor, int lp_i);
int gf_achievementgetvalueofnextlevel (int lp_achievement, int lp_player);
int gf_achievementgetvalueofnextleveladd (int lp_achievement, int lp_player, int lp_add);
int gf_achievementgetlevel (int lp_player, int lp_achievement);
text gf_achievementgetlevelcolorcode (int lp_acmlvl);
text gf_achievementcolorcodetext (text lp_text, int lp_acmlvl);
text gf_achievementtimelimits (int lp_d, int lp_factor, int lp_acmlvl);
void gf_achievementherokills ();
void gf_achievements0killaward (int lp_achievement);
void gf_achievementlowlevel (int lp_achievement);
void gf_achievementsforplayer (int lp_player, int lp_achievement);
void gf_achievementretroadd (int lp_player);
void gf_upgradebuttonflasher ();
void gf_initupgradedialog ();
void gf_laForge (unit lp_forge);
bool gf_isMod (string lp_playerhandle);
void gf_chatcommandstickselect (int lp_pnum);
void gf_showstatwindow (int lp_player);
void gf_initTalentDialogs ();
void gf_DialogHideAll (int lp_player);
void gf_talentfreeupdater ();
void gf_TalentPressedFire (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedPoison (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedLightning (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedShadow (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedWarp (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedParticle (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedTwilight (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedTime (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedWaterHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedEarthHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedAirHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedGravityHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedGatewayHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedNatureHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedElementalHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedIllusionHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedLuckHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedProbeHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedBladeHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_TalentPressedBeamHero (int lp_p, int lp_br, int lp_bn, int lp_hv);
void gf_disguiseunit (unit lp_unit, int lp_player);
void gf_undisguiseunit (unit lp_unit);
text gf_getrewardinfo (int lp_player);
text gf_getrewardtext (int lp_rewardnum);
void gf_rewardreset (int lp_pnum);
void gf_rewardadd (int lp_typ, int lp_amount, int lp_pnum, bool lp_respawn);
void gf_rewardbuy (int lp_pnum, int lp_typ);
void gf_rewardnewtooltip (int lp_pnum, int lp_rnum);
void gf_rewardaddall (int lp_pnum, bool lp_respawn);
void gf_rewardtimer ();
void gf_rewardcollectachievement (int lp_player);
void gf_rewardnewpoints (int lp_pnum, int lp_amount);
void gf_rewarddialoginit ();
text gf_rewardlevel (int lp_pnum, int lp_rnum);
int gf_rewardgetprice (int lp_pnum, int lp_rewardrow);
void gf_rewardgainpoints (int lp_pnum, int lp_amount, int lp_difficulty);
void gf_gainrewardbonusall (int lp_amount);
void gf_PowerField (unit lp_unit);
void gf_ChronoWave (int lp_player, int lp_massacre);
void gf_initbanks ();
void gf_loadvalues (bank lp_bank, int lp_pnum);
string gf_bankacmfillwith0 (string lp_current);
int gf_bankgetint (bank lp_bank, string lp_key, string lp_section);
void gf_bankaddtoint (bank lp_bank, string lp_key, string lp_section, int lp_value);
void gf_banksetc (int lp_pnum, bank lp_bank);
void gf_bankconvertoldachievementdata197 (bank lp_bank);
string gf_decto45 (int lp_num);
int gf__45todec (string lp__45num);
int gf_split45to2 (int lp__45, int lp_achievement);
void gf_UnitAddCustomValue (unit lp_unit, fixed lp_amount, int lp_number);
void gf_addlife (unit lp_target, fixed lp_amount, bool lp_percent);
void gf_addshield (unit lp_target, fixed lp_amount, bool lp_percent);
void gf_addenergy (unit lp_target, fixed lp_amount, bool lp_percent);
void gf_SkillPlasmaTorpedo (point lp_origin, unit lp_caster, int lp_owner, fixed lp_heading);
void gf_SkillGuidedMissile (unit lp_caster, int lp_owner, point lp_target, point lp_origin, int lp_pierce, int lp_split);
void gf_SkillStrafeShot (unit lp_caster, unit lp_location, int lp_owner);
void gf_SkillMultishot (unit lp_caster, unit lp_location, int lp_owner, point lp_target);
void gf_SkillMultishotTalent (fixed lp_delay, unit lp_caster, unit lp_location, int lp_owner, point lp_target);
void gf_AddShadowEnergy (bool lp_reset, int lp_owner, int lp_amount);
void gf_AEShadowCrash (int lp_owner);
void gf_SkillShadowWallofDarkness (unit lp_target);
void gf_Shadowwallofdarkness (unit lp_hero);
void gf_DoomDetonate (int lp_owner, unit lp_caster, fixed lp_damage, point lp_point);
void gf_Shadowcrash (int lp_gainenergy, point lp_targetpoint, point lp_startpoint, int lp_owner, unit lp_caster);
void gf_StaticArmor (unit lp_caster);
void gf_Thunderfury (unit lp_caster, point lp_target, int lp_owner, fixed lp_range, fixed lp_knockback, fixed lp_stormrage);
void gf_ThunderfuryKnockback (unit lp_caster, fixed lp_knockback, unitgroup lp_targetgrp);
void gf_Lightning (point lp_origin, fixed lp_jumprange, fixed lp_jumpcount, fixed lp_extrachance, fixed lp_extraonsecondary, int lp_debuffstacks, point lp_target, unit lp_caster, int lp_owner, fixed lp_damage, unitgroup lp_excludedtargets);
void gf_Poisonbolt (unit lp_caster, int lp_owner, point lp_origin, point lp_target, fixed lp_ttl, fixed lp_speed, fixed lp_damage, fixed lp_dotamount, fixed lp_dotduration, fixed lp_impactsize, unitgroup lp_excludedtargets, bool lp_psncloud);
void gf_MusclePoison (unit lp_caster, int lp_owner, point lp_origin, point lp_target, fixed lp_damage, fixed lp_dotduration, fixed lp_impactsize, bool lp_psnbolt, int lp_stacks);
void gf_MusclePoisonRemover (fixed lp_duration, int lp_stacks, unit lp_target);
void gf_SkillPoisonCloudCast (unit lp_target);
void gf_poisonarmorstacks (unit lp_caster);
void gf_LuckOrbs (unit lp_hostUnit, string lp_createdUnitType, int lp_createdUnitCount, int lp_player, fixed lp_radius, fixed lp_turnspeed1, fixed lp_createdUnitHieght);
void gf_BladeStormRight (unit lp_caster, point lp_target);
void gf_BladeStormLeft (unit lp_caster, point lp_target);
void gf_DamageOverTime (bool lp_psn, bool lp_fire, fixed lp_dmg, fixed lp_ticktime, fixed lp_tickdelay, unit lp_target, unit lp_source);
void gf_SpireFireball (int lp_owner, unit lp_caster, point lp_target, point lp_origin, fixed lp_ttl, fixed lp_speed, fixed lp_dmg);
void gf_SpireFireball2 (int lp_owner, unit lp_caster, point lp_target, point lp_origin, fixed lp_ttl, fixed lp_speed);
point gf_targetmissilespell (unit lp_caster, int lp_owner, bool lp_attackally, point lp_origin, point lp_target, string lp_animunit, fixed lp_timetolive, fixed lp_speed, fixed lp_detonationdistance, unitgroup lp_excludedgrp);
unit gf_targetmisslespelltarget (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally);
unitgroup gf_targetmisslespelltargets (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally);
unitgroup gf_targetmisslespelltargets2 (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally, unitgroup lp_excluded);
unit gf_targetunitmissilespell (unit lp_caster, point lp_origin, unit lp_target, bool lp_cancrash, fixed lp_ttl, fixed lp_impactsize, bool lp_targetally, string lp_missleused, fixed lp_speed, unitgroup lp_excludegrp, fixed lp_retargetarea);
void gf_Lightning2 (point lp_origin, point lp_target, unit lp_caster, int lp_owner, unitgroup lp_excludedtargets, fixed lp_ttl);
void gf_Queen (unit lp_queen, int lp_overlordcount, int lp_zerglingcount, fixed lp_radius, fixed lp_turnspeed1);
void gf_GreaterSpire (unit lp_spire, fixed lp_lightnings);
void gf_GreaterSpire2 (int lp_rewardamount, unit lp_spire, fixed lp_lightnings, fixed lp_ttl);
void gf_noFinalSniping ();
void gf_challengemode ();
void gf_challengemodearmy (unit lp_unit);
void gf_challengemodearmyAI (unit lp_unit, unitgroup lp_army);
void gf_challengemodetimequest (int lp_cstage);
void gf_challengetimequestsingle (unit lp_unit);
void gf_challengemodeescort (unit lp_pylon, int lp_cstage);
void gf_challengemodeassault (int lp_cstage);
void gf_challengemodeescortassault (int lp_direction, int lp_cstage);
void gf_challengemoderebuild (unit lp_pylon);
int gf_challengeOverseermadness (int lp_cstage);
void gf_Overseer (point lp_spawn, point lp_loc1, point lp_loc2, point lp_loc3, point lp_loc4, point lp_loc5);
bool gf_targetspecial (unit lp_target);
string gf_getPortrait (string lp_boss);
string gf_getText (string lp_boss);
unit gf_getpylonofstage ();
unit gf_getpylonofprevstage ();
unit gf_getcurrentzergbase ();
void gf_RepeatBossStarttimed ();
void gf_BossStart ();
void gf_SpawnBoss (string lp_unit, bool lp_bossBar);
void gf_Stage11BossSpawns ();
void gf_DoomLord13 (bool lp_bossBar);
void gf_DoomLord19 (bool lp_bossBar);
void gf_MindLordSpawns ();
void gf_DoomLord9 (bool lp_bossBar);
void gf_ExtinctionLord (bool lp_bossBar);
void gf_DoomLord8 (bool lp_bossBar);
void gf_ChaosOrbs (unit lp_hostUnit, string lp_createdUnitType, int lp_createdUnitCount, int lp_player, fixed lp_radius, fixed lp_turnspeed1, fixed lp_createdUnitHieght, fixed lp_createdUnitScale);
void gf_DoomLord (bool lp_bossBar);
void gf_DoomLord7 (bool lp_bossBar);
void gf_DoomLord4 (bool lp_bossBar);
void gf_DemonLord (bool lp_bossBar);
void gf_BossSuperlisk ();
void gf_BossWingedHorror ();
void gf_BossSkillFlyaway (unit lp_boss);
void gf_BossMobileNydus ();
void gf_BossSkillMobileNydusSpawnChampion (unit lp_boss);
void gf_BossFirespewer ();
void gf_BossSkillFirespew (unit lp_caster, unit lp_target);
point gf_BossSpawnLocation ();
void gf_DisintegratorSpawn ();
void gf_DisintegratorAttack (unit lp_unit);
void gf_ProtossAttackAI (unitgroup lp_unitsRecievingOrder);
unitgroup gf_GetPowerFields ();
void gf_banknewtime ();
void gf_winachievementcheck ();
void gf_stage11finalcheckfortimeachievements ();
void gf_stagetimer (fixed lp_time);
text gf_gametime (int lp_seconds);
text gf_difficultytotext ();
text gf_difficultytotex2 (int lp_diff);
void gf_zergbase1 (unit lp_basebuilding, point lp_attackpoint);
void gf_tossbase1 (unit lp_basebuilding, unit lp_basebuilding2, point lp_attackpoint, unit lp_probe);
void gf__2pathbase (unit lp_zbase1, unit lp_zbase2, point lp_protossspawnpoint, point lp_waypoint11, point lp_waypoint12, unit lp_pbase1, unit lp_pbase2, order lp_zattackertype1, order lp_zattackertype2, order lp_zattackertype3, order lp_zattackertype4, order lp_zattackertype5, int lp_zarmysize, int lp_parmysize, bool lp_isQuest);
void gf__2pathbaseQ (unit lp_zbase1, unit lp_zbase2, point lp_protossspawnpoint, point lp_waypoint11, point lp_waypoint12, unit lp_pbase1, unit lp_pbase2, order lp_zattackertype1, order lp_zattackertype2, order lp_zattackertype3, order lp_zattackertype4, order lp_zattackertype5, int lp_zarmysize, int lp_parmysize, int lp_queenDelay, bool lp_isQuest);
void gf_Spire (point lp_loc1, point lp_loc2, fixed lp_angle1, fixed lp_angle2, fixed lp_maxangle1, fixed lp_maxangle2, fixed lp_firerate, int lp_linkedtostage);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_xpbarinit;
trigger gt_XPbonusPeriodic;
trigger gt_OptionalRampZbase2;
trigger gt_SporeCrawler;
trigger gt_Extrahatch;
trigger gt_ExtraLair;
trigger gt_optionalGreaterSpire1;
trigger gt_evolutionquest2;
trigger gt_evolutionquest3;
trigger gt_zbase51;
trigger gt_Ultrabros;
trigger gt_AnnihilatorRandomMissile;
trigger gt_zbase11;
trigger gt_zbase112;
trigger gt_EnragedMetalisk;
trigger gt_Queen;
trigger gt_EscortRecruit;
trigger gt_EscortRecruit2;
trigger gt_EscortRecruit3;
trigger gt_SpawningPool;
trigger gt_optionalpool5;
trigger gt_MoonLordBeacon;
trigger gt_MoonLordBeacon3;
trigger gt_MoonLordBeacon2;
trigger gt_MoonLordBeacon4;
trigger gt_optionalpool4;
trigger gt_NydusWorm;
trigger gt_NydusWorm2;
trigger gt_init;
trigger gt_initselectmodebuttonpress;
trigger gt_init1;
trigger gt_pickhero;
trigger gt_TeleportDialogOpen;
trigger gt_TeleportDialogButtonPressed;
trigger gt_AchievementMassacreCount;
trigger gt_AchievementChampionkill;
trigger gt_AchievementDialogOpen;
trigger gt_achievementviewnext;
trigger gt_AchievementRestlessEnd;
trigger gt_AchievementTreasure;
trigger gt_AchievementRestlessStart;
trigger gt_achievementRestless;
trigger gt_UpgradeDialogOpen;
trigger gt_UpgradeDialogButtonPressed;
trigger gt_UpgradeDialogButtonPressedAuto;
trigger gt_UpgradesDiffEasyAuto;
trigger gt_talenttest;
trigger gt_rewardtest;
trigger gt_killtest;
trigger gt_upgradetest;
trigger gt_alliancetest;
trigger gt_distancetest;
trigger gt_xptest;
trigger gt_xptest2;
trigger gt_xptest3;
trigger gt_restorerewards;
trigger gt_forcereset;
trigger gt_restoreachievm;
trigger gt_restoreacmname;
trigger gt_spawnunit;
trigger gt_chaos;
trigger gt_extinction;
trigger gt_horror;
trigger gt_mind;
trigger gt_hive;
trigger gt_showstats;
trigger gt_showstatsclose;
trigger gt_stickselect;
trigger gt_gametime;
trigger gt_displayhandle;
trigger gt_xpfactor;
trigger gt_clear;
trigger gt_initstatwindow;
trigger gt_ShowTalents;
trigger gt_TalentButtonPressed;
trigger gt_RewardButtonPressed;
trigger gt_RewardDialogOpenClose;
trigger gt_PlayerLeaves;
trigger gt_unitdeath;
trigger gt_UnitWasStunned;
trigger gt_AutocastOn;
trigger gt_AutocastOff;
trigger gt_SkillPlasmaTorpedoCast;
trigger gt_PartingGift;
trigger gt_Assault;
trigger gt_SkillGuidedMissileCast;
trigger gt_SkillStrafeCast;
trigger gt_SkillMultishotCast;
trigger gt_Doom;
trigger gt_Shadowplay;
trigger gt_Energytap;
trigger gt_Shadowcrash;
trigger gt_thunderfurycast;
trigger gt_ltngcast;
trigger gt_PowerDrain;
trigger gt_poisonboltfired;
trigger gt_musclepoisonuse;
trigger gt_healingreagentcast;
trigger gt_Virulent;
trigger gt_DisplayElementalStacks;
trigger gt_Orbit;
trigger gt_Orbit2;
trigger gt_BladeStormCast;
trigger gt_LeapCastHurdle;
trigger gt_BuffApplication;
trigger gt_Incapacitation;
trigger gt_Upgrades;
trigger gt_RemoveDR;
trigger gt_ProtossAlliesAttackOrders;
trigger gt_KillHatch;
trigger gt_StructureCleanupAdd;
trigger gt_StructureCleanupKill;
trigger gt_activatebase1again;
trigger gt_activatebase2;
trigger gt_activatebase3;
trigger gt_activatebase4;
trigger gt_activatebase5;
trigger gt_activatebase6;
trigger gt_activatebase7;
trigger gt_activateStage8;
trigger gt_activateStage9;
trigger gt_activateStage10;
trigger gt_activateStage11;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
int gf_gainxp (fixed lp_amount) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_xp+=(lp_amount*gv_xpboost);
    PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperAdd, FixedToInt(((2.25-(gv_difficulty*0.25))*lp_amount*gv_xpboost))+3);
    while ((gv_xp > 1000.0)) {
        gv_xp -= 1000.0;
        gv_xp2 += 1;
    }
    while ((gf_xpcompare(gv_xp, gv_xp2, gv_xpmax, gv_xpmax2) == true)) {
        gf_levelupanim();
        gv_xplevel += 1;
        if ((gv_xplevel > 30)) {
            gf_gainrewardbonusall((gv_xplevel-30)*FixedToInt(gv_difficulty));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/D5E8D79C") + IntToText(FixedToInt(gv_difficulty)*(gv_xplevel-30)*5) + StringExternal("Param/Value/64603020")));
        }

        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                if ((gf_achievementgetvalueofnextlevel(11, lv_i) <= gf_Currentlevel())) {
                    gf_achievementnew(lv_i, 11);
                }

            }

        }
        gv_talentpointsavailable[0] += 1;
        gv_talentpointsavailable[1] += 1;
        gv_talentpointsavailable[2] += 1;
        gv_talentpointsavailable[3] += 1;
        libNtve_gf_SetDialogItemText(gv_xpbaritem[2], (StringExternal("Param/Value/D133F4D8") + IntToText(gv_xplevel)), PlayerGroupAll());
        gv_xpmin = gv_xpmax;
        gv_xpmin2 = gv_xpmax2;
        gv_xpmax += 200+(gv_xpmax/4)+((gv_xpmax2%4)*250);
        gv_xpmax2 += gv_xpmax2/4;
        while ((gv_xpmax > 1000.0)) {
            gv_xpmax -= 1000.0;
            gv_xpmax2 += 1;
        }
    }
    gf_xpbaranim(gv_xpmin, gv_xpmin2, gv_xpmax, gv_xpmax2);
    return gv_xplevel;
}

bool gf_xpcompare (fixed lp_xp1, int lp_xp2, fixed lp_xpmax1, int lp_xpmax2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_xp2 < lp_xpmax2)) {
        return false;
    }
    else {
        if ((lp_xp2 > lp_xpmax2)) {
            return true;
        }
        else {
            if ((lp_xp1 < lp_xpmax1)) {
                return false;
            }
            else {
                return true;
            }
        }
    }
}

void gf_xpbaranim (fixed lp_min1, int lp_min2, fixed lp_max1, int lp_max2) {
    // Variable Declarations
    int lv_req;
    int lv_have;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_req = (lp_max2*1000+FixedToInt(lp_max1))-((lp_min2*1000)+FixedToInt(lp_min1));
    lv_have = ((gv_xp2*1000)+FixedToInt(gv_xp))-((lp_min2*1000)+FixedToInt(lp_min1));

    // Implementation
    DialogControlSetSize(gv_xpbaritem[0], PlayerGroupAll(), (lv_have*400)/lv_req, 15);
    libNtve_gf_SetDialogItemText(gv_xpbaritem[1], (IntToText(lv_have) + StringExternal("Param/Value/FCD95BEC") + IntToText(lv_req)), PlayerGroupAll());
}

void gf_levelupanim () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        if ((gv_hero[lv_i] != null)) {
            UnitBehaviorAdd(gv_hero[lv_i], "levelup", gv_hero[lv_i], 1);
        }

        lv_i += 1;
    }
}

int gf_Currentlevel () {
    // Automatic Variable Declarations
    // Implementation
    return gv_xplevel;
}

void gf_SpawningBuilding (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward) {
    // Automatic Variable Declarations
    // Implementation
    gf_SpawningBuilding2(lp_posbuilding, lp_spawnpos, lp_spawncount, lp_spawntimer, lp_isquest, lp_xpondestruction, lp_buildingtype, lp_spawntype, lp_textcompletion, lp_reward, lp_spawntype, 0, StringToText(""), true);
}

void gf_SpawningBuilding2 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission) {
    // Automatic Variable Declarations
    // Implementation
    gf_SpawningBuilding3(lp_posbuilding, lp_spawnpos, lp_spawncount, lp_spawntimer, lp_isquest, lp_xpondestruction, lp_buildingtype, lp_spawntype, lp_textcompletion, lp_reward, lp_spawnUnitKill, lp_spawnUnitKillcount, lp_spawnUnitKillMSG, lp_transmission, true);
}

void gf_SpawningBuilding3 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission, bool lp_hasbuilding) {
    // Automatic Variable Declarations
    // Implementation
    gf_SpawningBuilding4(lp_posbuilding, lp_spawnpos, lp_spawncount, lp_spawntimer, lp_isquest, lp_xpondestruction, lp_buildingtype, lp_spawntype, lp_textcompletion, lp_reward, lp_spawnUnitKill, lp_spawnUnitKillcount, lp_spawnUnitKillMSG, lp_transmission, lp_hasbuilding, 0, 0, false, 0);
}

trigger auto_gf_SpawningBuilding4_Trigger = null;
point auto_gf_SpawningBuilding4_lp_posbuilding;
point auto_gf_SpawningBuilding4_lp_spawnpos;
int auto_gf_SpawningBuilding4_lp_spawncount;
int auto_gf_SpawningBuilding4_lp_spawntimer;
bool auto_gf_SpawningBuilding4_lp_isquest;
fixed auto_gf_SpawningBuilding4_lp_xpondestruction;
string auto_gf_SpawningBuilding4_lp_buildingtype;
string auto_gf_SpawningBuilding4_lp_spawntype;
text auto_gf_SpawningBuilding4_lp_textcompletion;
int auto_gf_SpawningBuilding4_lp_reward;
string auto_gf_SpawningBuilding4_lp_spawnUnitKill;
int auto_gf_SpawningBuilding4_lp_spawnUnitKillcount;
text auto_gf_SpawningBuilding4_lp_spawnUnitKillMSG;
bool auto_gf_SpawningBuilding4_lp_transmission;
bool auto_gf_SpawningBuilding4_lp_hasbuilding;
int auto_gf_SpawningBuilding4_lp_unitlimit;
int auto_gf_SpawningBuilding4_lp_timedlife;
bool auto_gf_SpawningBuilding4_lp_destroyafterstage;
int auto_gf_SpawningBuilding4_lp_stage;

void gf_SpawningBuilding4 (point lp_posbuilding, point lp_spawnpos, int lp_spawncount, int lp_spawntimer, bool lp_isquest, fixed lp_xpondestruction, string lp_buildingtype, string lp_spawntype, text lp_textcompletion, int lp_reward, string lp_spawnUnitKill, int lp_spawnUnitKillcount, text lp_spawnUnitKillMSG, bool lp_transmission, bool lp_hasbuilding, int lp_unitlimit, int lp_timedlife, bool lp_destroyafterstage, int lp_stage) {
    auto_gf_SpawningBuilding4_lp_posbuilding = lp_posbuilding;
    auto_gf_SpawningBuilding4_lp_spawnpos = lp_spawnpos;
    auto_gf_SpawningBuilding4_lp_spawncount = lp_spawncount;
    auto_gf_SpawningBuilding4_lp_spawntimer = lp_spawntimer;
    auto_gf_SpawningBuilding4_lp_isquest = lp_isquest;
    auto_gf_SpawningBuilding4_lp_xpondestruction = lp_xpondestruction;
    auto_gf_SpawningBuilding4_lp_buildingtype = lp_buildingtype;
    auto_gf_SpawningBuilding4_lp_spawntype = lp_spawntype;
    auto_gf_SpawningBuilding4_lp_textcompletion = lp_textcompletion;
    auto_gf_SpawningBuilding4_lp_reward = lp_reward;
    auto_gf_SpawningBuilding4_lp_spawnUnitKill = lp_spawnUnitKill;
    auto_gf_SpawningBuilding4_lp_spawnUnitKillcount = lp_spawnUnitKillcount;
    auto_gf_SpawningBuilding4_lp_spawnUnitKillMSG = lp_spawnUnitKillMSG;
    auto_gf_SpawningBuilding4_lp_transmission = lp_transmission;
    auto_gf_SpawningBuilding4_lp_hasbuilding = lp_hasbuilding;
    auto_gf_SpawningBuilding4_lp_unitlimit = lp_unitlimit;
    auto_gf_SpawningBuilding4_lp_timedlife = lp_timedlife;
    auto_gf_SpawningBuilding4_lp_destroyafterstage = lp_destroyafterstage;
    auto_gf_SpawningBuilding4_lp_stage = lp_stage;

    if (auto_gf_SpawningBuilding4_Trigger == null) {
        auto_gf_SpawningBuilding4_Trigger = TriggerCreate("auto_gf_SpawningBuilding4_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawningBuilding4_Trigger, false, false);
}

bool auto_gf_SpawningBuilding4_TriggerFunc (bool testConds, bool runActions) {
    point lp_posbuilding = auto_gf_SpawningBuilding4_lp_posbuilding;
    point lp_spawnpos = auto_gf_SpawningBuilding4_lp_spawnpos;
    int lp_spawncount = auto_gf_SpawningBuilding4_lp_spawncount;
    int lp_spawntimer = auto_gf_SpawningBuilding4_lp_spawntimer;
    bool lp_isquest = auto_gf_SpawningBuilding4_lp_isquest;
    fixed lp_xpondestruction = auto_gf_SpawningBuilding4_lp_xpondestruction;
    string lp_buildingtype = auto_gf_SpawningBuilding4_lp_buildingtype;
    string lp_spawntype = auto_gf_SpawningBuilding4_lp_spawntype;
    text lp_textcompletion = auto_gf_SpawningBuilding4_lp_textcompletion;
    int lp_reward = auto_gf_SpawningBuilding4_lp_reward;
    string lp_spawnUnitKill = auto_gf_SpawningBuilding4_lp_spawnUnitKill;
    int lp_spawnUnitKillcount = auto_gf_SpawningBuilding4_lp_spawnUnitKillcount;
    text lp_spawnUnitKillMSG = auto_gf_SpawningBuilding4_lp_spawnUnitKillMSG;
    bool lp_transmission = auto_gf_SpawningBuilding4_lp_transmission;
    bool lp_hasbuilding = auto_gf_SpawningBuilding4_lp_hasbuilding;
    int lp_unitlimit = auto_gf_SpawningBuilding4_lp_unitlimit;
    int lp_timedlife = auto_gf_SpawningBuilding4_lp_timedlife;
    bool lp_destroyafterstage = auto_gf_SpawningBuilding4_lp_destroyafterstage;
    int lp_stage = auto_gf_SpawningBuilding4_lp_stage;

    // Variable Declarations
    point lv_pylonofstage;
    int lv_mystage;
    int lv_initstage;
    bool lv_nevertransmitspam;
    int lv_ctype;
    int lv_nextchampion;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    int lv_k;
    unitgroup lv_spawnUnits;
    bool lv_unitlimit;

    // Automatic Variable Declarations
    int autoD060F713_val;

    // Variable Initialization
    lv_pylonofstage = UnitGetPosition(gf_getpylonofstage());
    lv_mystage = gv_stage;
    lv_initstage = gv_stage;
    lv_nextchampion = RandomInt(0, (75 - (75 * gv_champion)));
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = lp_spawntimer;
    lv_spawnUnits = UnitGroupEmpty();

    // Implementation
    if ((lp_unitlimit > 0)) {
        lv_unitlimit = true;
    }

    if ((lp_hasbuilding == true)) {
        if ((UnitGroupUnit(UnitGroup(null, 6, RegionCircle(lp_posbuilding, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1) != null)) {
            return true;
        }

        UnitCreate(1, lp_buildingtype, c_unitCreateIgnorePlacement, 6, lp_posbuilding, 90.0);
        lv_u1 = UnitLastCreated();
        UnitBehaviorRemove(lv_u1, "TimedSuicideZergUnits", UnitBehaviorCount(lv_u1, "TimedSuicideZergUnits"));
        if ((lp_timedlife > 0)) {
            UnitBehaviorAdd(lv_u1, "TimedSuicide", lv_u1, 1);
            UnitBehaviorSetDuration(lv_u1, "TimedSuicide", lp_timedlife);
        }

    }

    if ((lp_hasbuilding == true) && (lp_isquest == true)) {
        gf_UpdateOptionalQuestCounter(true);
        ObjectiveCreate(UnitTypeGetName(lp_buildingtype), (StringExternal("Param/Value/1BB0B7B1") + UnitTypeGetName(lp_buildingtype) + StringExternal("Param/Value/70328626")), c_objectiveStateActive, false);
        lv_objective = ObjectiveLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
        PingSetUnit(PingLastCreated(), lv_u1);
        lv_ping1 = PingLastCreated();
        if ((lp_transmission == true) && (lv_nevertransmitspam == true)) {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DB31277C"), (StringExternal("Param/Value/F65816A0") + UnitTypeGetName(lp_buildingtype) + StringExternal("Param/Value/B9ED1468")), 4.0, c_transmissionDurationAdd, false);
        }

    }

    while (((lp_destroyafterstage == false) || (gv_stage == lp_stage)) && ((UnitIsAlive(lv_u1) == true) || (lp_hasbuilding == false))) {
        if ((lv_mystage != gv_stage) && ((lv_initstage + 1) >= gv_stage)) {
            lv_pylonofstage = UnitGetPosition(gf_getpylonofstage());
            lv_mystage = gv_stage;
        }

        if (((lv_initstage <= gv_stage) || ((gv_difficulty > 2.0) && (lv_initstage <= gv_stage+1)))) {
            lv_k += 1;
            lv_nextchampion -= 1;
            if ((lp_spawncount > 0) && (lv_k > lp_spawntimer)) {
                lv_k = 0;
                UnitCreate(lp_spawncount, lp_spawntype, c_unitCreateIgnorePlacement, 6, lp_spawnpos, 90.0);
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_pylonofstage), c_orderQueueReplace);
                if ((lv_nextchampion < 1)) {
                    if ((gv_champion == 0)) {
                        lv_nextchampion = RandomInt(FixedToInt(50/(gv_difficulty*0.5)), FixedToInt(55/(gv_difficulty*0.5)));
                    }
                    else {
                        lv_nextchampion = 0;
                    }
                    UnitBehaviorAdd(UnitLastCreated(), "Champion", UnitLastCreated(), 1);
                    UnitSetScale(UnitLastCreated(), 130.0, 130.0, 130.0);
                    lv_ctype = RandomInt(0, 5);
                    autoD060F713_val = lv_ctype;
                    if (autoD060F713_val == 1) {
                        UnitBehaviorAdd(UnitLastCreated(), "HasteAuraChampion", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 7);
                    }
                    else if (autoD060F713_val == 2) {
                        UnitBehaviorAdd(UnitLastCreated(), "MightAuraChampion", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 4);
                    }
                    else if (autoD060F713_val == 3) {
                        UnitBehaviorAdd(UnitLastCreated(), "LightningEnchanted2", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 2);
                    }
                    else if (autoD060F713_val == 4) {
                        UnitBehaviorAdd(UnitLastCreated(), "StoneSkin", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 12);
                    }
                    else if (autoD060F713_val == 5) {
                        UnitBehaviorAdd(UnitLastCreated(), "Enrage", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 15);
                    }
                    else {
                        UnitBehaviorAdd(UnitLastCreated(), "FireEnchanted", UnitLastCreated(), 1);
                        UnitSetTeamColorIndex(UnitLastCreated(), 1);
                    }
                }

                if ((lp_spawntype == "Queen")) {
                    gf_Queen(UnitLastCreated(), 2, 4, 2.5, 2.0);
                }
                else {
                    if ((lp_spawntype == "SwarmQueen2")) {
                        gf_Queen(UnitLastCreated(), 2, 4, 2.5, 2.0);
                    }

                }
            }

        }

        Wait(1.0, c_timeGame);
    }
    gf_gainxp(lp_xpondestruction);
    gf_GainReward(lp_reward);
    if ((lp_spawnUnitKillcount > 0)) {
        UnitCreate(lp_spawnUnitKillcount, lp_spawnUnitKill, c_unitCreateIgnorePlacement, 6, lp_spawnpos, 90.0);
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        if ((lp_spawnUnitKill == "Queen")) {
            gf_Queen(UnitLastCreated(), 2, 4, 2.5, 2.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaWarning, lp_spawnUnitKillMSG);
        }

    }

    if ((lp_isquest == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        gf_UpdateOptionalQuestCounter(false);
        if ((lp_transmission == true)) {
            if ((lp_reward == 1)) {
            }
            else {
                TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D24524D8"), lp_textcompletion, 0.0, c_transmissionDurationAdd, false);
            }
        }

        PingDestroy(lv_ping1);
        Wait(10.0, c_timeGame);
        ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    }

    return true;
}

void gf_SpawningRandom (point lp_pos1, point lp_pos2, point lp_pos3, point lp_pos4, point lp_pos5, point lp_pos6, point lp_pos7, point lp_pos8, point lp_pos9, point lp_pos10, point lp_pos11, point lp_pos12, point lp_pos13, point lp_pos14, point lp_pos15, point lp_pos16, point lp_pos17, int lp_countbytype1, int lp_countbytype2, int lp_countbytype3, int lp_countbytype4, int lp_countbytype5, int lp_countbytype6, int lp_countbytype7, int lp_countbytype8, int lp_countbytype9, int lp_countbytype10, int lp_countbytype11, int lp_countbytype12, int lp_count, int lp_timer) {
    // Variable Declarations
    bool[19] lv_used;
    int lv_seeded;
    int lv_i;
    bool lv_picked;
    string lv_gtyp;
    string lv_utyp;
    point lv_rpoint;
    int lv_scount;
    int lv_stimer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (((lp_count - lv_seeded) > 0)) {
        lv_picked = false;
        lv_i = lv_seeded;
        lv_i -= lp_countbytype1;
        if ((lv_i < 0)) {
            if ((gv_champion == 1)) {
                lv_picked = true;
                lv_gtyp = "SpawningPool";
                lv_utyp = "HotSSwarmling";
                lv_scount = 1;
                lv_stimer = 12;
            }
            else {
                lv_picked = true;
                lv_gtyp = "SpawningPool";
                lv_utyp = "Zergling";
                lv_scount = 6;
                lv_stimer = 8;
            }
        }
        else {
            lv_i -= lp_countbytype2;
            if ((lv_i < 0)) {
                if ((gv_champion == 1)) {
                    lv_picked = true;
                    lv_gtyp = "BanelingNest";
                    lv_utyp = "HotSSplitterlingBig";
                    lv_scount = 1;
                    lv_stimer = 11;
                }
                else {
                    lv_picked = true;
                    lv_gtyp = "BanelingNest";
                    lv_utyp = "Baneling";
                    lv_scount = 4;
                    lv_stimer = 7;
                }
            }
            else {
                lv_i -= lp_countbytype3;
                if ((lv_i < 0)) {
                    if ((gv_champion == 1)) {
                        lv_picked = true;
                        lv_gtyp = "RoachWarren";
                        lv_utyp = "RoachCorpser";
                        lv_scount = 1;
                        lv_stimer = 16;
                    }
                    else {
                        lv_picked = true;
                        lv_gtyp = "RoachWarren";
                        lv_utyp = "Roach";
                        lv_scount = 2;
                        lv_stimer = 11;
                    }
                }
                else {
                    lv_i -= lp_countbytype4;
                    if ((lv_i < 0)) {
                        if ((gv_champion == 1)) {
                            lv_picked = true;
                            lv_gtyp = "HydraliskDen";
                            lv_utyp = "HydraliskImpaler";
                            lv_scount = 1;
                            lv_stimer = 16;
                        }
                        else {
                            lv_picked = true;
                            lv_gtyp = "HydraliskDen";
                            lv_utyp = "Hydralisk";
                            lv_scount = 2;
                            lv_stimer = 11;
                        }
                    }
                    else {
                        lv_i -= lp_countbytype5;
                        if ((lv_i < 0)) {
                            if ((gv_champion == 1)) {
                                lv_picked = true;
                                lv_gtyp = "NydusNetwork";
                                lv_utyp = "SwarmQueen2";
                                lv_scount = 1;
                                lv_stimer = 25;
                            }
                            else {
                                lv_picked = true;
                                lv_gtyp = "NydusNetwork";
                                lv_utyp = "Queen";
                                lv_scount = 1;
                                lv_stimer = 20;
                            }
                        }
                        else {
                            lv_i -= lp_countbytype6;
                            if ((lv_i < 0)) {
                                if ((gv_champion == 1)) {
                                    lv_picked = true;
                                    lv_gtyp = "UltraliskCavern";
                                    lv_utyp = "HotSNoxious";
                                    lv_scount = 1;
                                    lv_stimer = 30;
                                }
                                else {
                                    lv_picked = true;
                                    lv_gtyp = "UltraliskCavern";
                                    lv_utyp = "Ultralisk";
                                    lv_scount = 1;
                                    lv_stimer = 17;
                                }
                            }
                            else {
                                lv_i -= lp_countbytype7;
                                if ((lv_i < 0)) {
                                    if ((gv_champion == 1)) {
                                        lv_picked = true;
                                        lv_gtyp = "MetaliskCavern";
                                        lv_utyp = "HotSTorrasque";
                                        lv_scount = 1;
                                        lv_stimer = 50;
                                    }
                                    else {
                                        lv_picked = true;
                                        lv_gtyp = "MetaliskCavern";
                                        lv_utyp = "Metalisk";
                                        lv_scount = 1;
                                        lv_stimer = 22;
                                    }
                                }
                                else {
                                    lv_i -= lp_countbytype8;
                                    if ((lv_i < 0)) {
                                        if ((gv_champion == 1)) {
                                            lv_picked = true;
                                            lv_gtyp = "UltraliskCavern";
                                            lv_utyp = "SwarmHostSplitA";
                                            lv_scount = 1;
                                            lv_stimer = 28;
                                        }
                                        else {
                                            lv_picked = true;
                                            lv_gtyp = "UltraliskCavern";
                                            lv_utyp = "Ultralisk2";
                                            lv_scount = 1;
                                            lv_stimer = 23;
                                        }
                                    }
                                    else {
                                        lv_i -= lp_countbytype9;
                                        if ((lv_i < 0)) {
                                            if ((gv_champion == 1)) {
                                                lv_picked = true;
                                                lv_gtyp = "InfestationPit";
                                                lv_utyp = "Infestor";
                                                lv_scount = 2;
                                                lv_stimer = 19;
                                            }
                                            else {
                                                lv_picked = true;
                                                lv_gtyp = "InfestationPit";
                                                lv_utyp = "Infestor";
                                                lv_scount = 2;
                                                lv_stimer = 19;
                                            }
                                        }
                                        else {
                                            lv_i -= lp_countbytype10;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        lv_i = RandomInt(1, lp_count);
        while ((lv_used[lv_i] == true)) {
            lv_i = RandomInt(1, lp_count);
        }
        if(lv_i==1){lv_rpoint=lp_pos1;}
        if(lv_i==2){lv_rpoint=lp_pos2;}
        if(lv_i==3){lv_rpoint=lp_pos3;}
        if(lv_i==4){lv_rpoint=lp_pos4;}
        if(lv_i==5){lv_rpoint=lp_pos5;}
        if(lv_i==6){lv_rpoint=lp_pos6;}
        if(lv_i==7){lv_rpoint=lp_pos7;}
        if(lv_i==8){lv_rpoint=lp_pos8;}
        if(lv_i==9){lv_rpoint=lp_pos9;}
        if(lv_i==10){lv_rpoint=lp_pos10;}
        if(lv_i==11){lv_rpoint=lp_pos11;}
        if(lv_i==12){lv_rpoint=lp_pos12;}
        if(lv_i==13){lv_rpoint=lp_pos13;}
        if(lv_i==14){lv_rpoint=lp_pos14;}
        if(lv_i==15){lv_rpoint=lp_pos15;}
        if(lv_i==16){lv_rpoint=lp_pos16;}
        if(lv_i==17){lv_rpoint=lp_pos17;}
        lv_used[lv_i]=true;
        if ((lv_rpoint == null)) {
        }
        else {
            gf_SpawningBuilding4(lv_rpoint, PointWithOffsetPolar(lv_rpoint, 1.0, AngleBetweenPoints(lv_rpoint, UnitGetPosition(gf_getpylonofstage()))), lv_scount, lv_stimer, true, 250.0, lv_gtyp, lv_utyp, null, 1, null, 0, null, false, true, 0, lp_timer, false, gv_stage);
        }
        lv_seeded += 1;
    }
}

void gf_UpdateOptionalQuestCounter (bool lp_upOrDown) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_upOrDown == true)) {
        gv_zOptionalQuestCount = (gv_zOptionalQuestCount + 1);
        if ((gv_zOptionalQuestCount == 1)) {
            ObjectiveCreate(StringExternal("Param/Value/C736806D"), (StringExternal("Param/Value/A707556F") + IntToText(gv_zOptionalQuestCount) + StringExternal("Param/Value/2BE6C3D7")), c_objectiveStateActive, false);
            gv_zOptionalQuestCountQuest = ObjectiveLastCreated();
        }
        else {
            ObjectiveSetDescription(gv_zOptionalQuestCountQuest, (StringExternal("Param/Value/44D13756") + IntToText(gv_zOptionalQuestCount) + StringExternal("Param/Value/55B0D56F")));
        }
    }
    else {
        gv_zOptionalQuestCount = (gv_zOptionalQuestCount - 1);
        if ((gv_zOptionalQuestCount == 0)) {
            ObjectiveShow(gv_zOptionalQuestCountQuest, PlayerGroupAll(), false);
            ObjectiveDestroy(gv_zOptionalQuestCountQuest);
            gv_zOptionalQuestCountQuest = c_invalidObjectiveId;
        }
        else {
            ObjectiveSetDescription(gv_zOptionalQuestCountQuest, (StringExternal("Param/Value/25CAA66F") + IntToText(gv_zOptionalQuestCount) + StringExternal("Param/Value/766D39D8")));
        }
    }
}

void gf_GainReward (int lp_num) {
    // Variable Declarations
    int lv_i;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_zquestssolved += 1;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            lv_k = gf_achievementgetlevel(lv_i, 8);
            gf_bankaddtoint(gv_zbanks[lv_i], "8", "acm", 1);
            if ((lv_k < gf_achievementgetlevel(lv_i, 8))) {
                gf_achievementnew(lv_i, 8);
            }

            if ((gv_zquestssolved >= gf_achievementgetvalueofnextlevel(9, lv_i))) {
                gf_achievementnew(lv_i, 9);
            }

        }

    }
    lv_i = 0;
    if ((lp_num == 1)) {
        if ((gv_upgradesTotalLimit >= 110)) {
            while ((lv_i < 4)) {
                lv_i += 1;
                gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
            }
        }
        else {
            gv_upgradesAvailable += 1;
            gv_upgradesTotalLimit += 1;
            if ((gv_upgradesTotalLimit == 110) && (gv_zmaxstage < 4)) {
                gf_achievementPossiblyGainedTeam(69, FixedToInt(gv_difficulty));
            }

        }
    }

    if ((lp_num == 5)) {
        gv_xpBoni[0] += 1.5;
    }

    if ((lp_num == 11)) {
        gv_talentpointsavailable[0] += 1;
        gv_talentpointsavailable[1] += 1;
        gv_talentpointsavailable[2] += 1;
        gv_talentpointsavailable[3] += 1;
    }

}

trigger auto_gf_thorboss1_Trigger = null;
point auto_gf_thorboss1_lp_point;

void gf_thorboss1 (point lp_point) {
    auto_gf_thorboss1_lp_point = lp_point;

    if (auto_gf_thorboss1_Trigger == null) {
        auto_gf_thorboss1_Trigger = TriggerCreate("auto_gf_thorboss1_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss1_Trigger, false, false);
}

bool auto_gf_thorboss1_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss1_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = FixedToInt(gv_difficulty);
    lv_targetdronesc = FixedToInt(1+(gv_difficulty/2.5));
    lv_restimer = (128 * (lv_defenderc-1));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    Wait(3.0, c_timeGame);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/9B861214"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    ObjectiveCreate(StringExternal("Param/Value/5BB79D5F"), StringExternal("Param/Value/D3BA384A"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "Thor", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*700+500);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*700+500);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8D3D5AF9"), StringExternal("Param/Value/1EE362E0"), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_targetdronesc, "ThorAttackIndicator", c_unitCreateIgnorePlacement, 6, Point(233.0, 114.0));
    UnitGroupAddUnitGroup(lv_targetdrones, UnitLastCreatedGroup());
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) < lv_defenderc)) {
            if ((((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2) < 1)) {
                lv_k = 1;
            }
            else {
                lv_k = ((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2);
            }
            while ((lv_k > 0)) {
                lv_k -= 1;
                if ((ModI(lv_restimer, 160) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(lv_point, 4.0, libNtve_gf_RandomAngle()));
                    UnitGroupAdd(lv_defenders, UnitLastCreated());
                    lv_angle[UnitGroupCount(lv_defenders, c_unitCountAll)] = AngleBetweenPoints(UnitGetPosition(lv_u1), UnitGetPosition(UnitLastCreated()));
                }

                lv_restimer -= 1;
            }
        }

        lv_i = 0;
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) >= 1)) {
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == true)) {
                    lv_angle[lv_i] += 1.0;
                    UnitSetPosition(UnitGroupUnit(lv_defenders, lv_i), PointWithOffsetPolar(lv_point, 4.0, lv_angle[lv_i]), true);
                }
                else {
                    lv_j = lv_i;
                    while ((lv_j < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                        lv_angle[lv_j] = lv_angle[lv_j+1];
                        lv_j += 1;
                    }
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                    lv_restimer += 160;
                }
            }
        }

        lv_i = 0;
        while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
            lv_i += 1;
            if ((UnitIsAlive(UnitGroupUnit(lv_targetdrones, lv_i)) == false)) {
                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, lv_i));
                lv_i -= 1;
            }
            else {
                if (((lv_targettimer[lv_i] == 0) || (lv_targets[lv_i] == null) || (UnitIsAlive(lv_targets[lv_i]) == false))) {
                    lv_targets[lv_i] = UnitGroupRandomUnit(UnitGroupAlliance(6, c_unitAllianceEnemy, RegionCircle(Point(233.0, 114.0), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
                    if ((lv_targets[lv_i] != null)) {
                        lv_targettimer[lv_i] = 160;
                    }

                }
                else {
                    lv_targettimer[lv_i] -= 1;
                }
                if ((lv_targets[lv_i] != null)) {
                    UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), lv_targetspeed, (AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_targets[lv_i])) + 0.0)), true);
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1)) > 10.0)) {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1))), true);
                    }
                    else {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, libNtve_gf_RandomAngle()), true);
                    }
                }
            }
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
        UnitRemove(UnitGroupUnit(lv_targetdrones, 1));
        UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
    }
    while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
        UnitKill(UnitGroupUnit(lv_defenders, 1));
        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, 1));
    }
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        libNtve_gf_SetUpgradeLevelForPlayer(6, "thorquestrewardmutagen", 1);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(13);
        }

        gf_gainxp(10000.0);
        gf_GainReward(1);
        gf_GainReward(1);
        gf_GainReward(1);
        gf_GainReward(1);
        gf_GainReward(1);
        if ((gv_zgametime[3] <= lv_starttime)) {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/66A15466"), StringExternal("Param/Value/17B805D4"), 0.0, c_transmissionDurationAdd, false);
            gv_zthormaster += 1;
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DF3091A5"), StringExternal("Param/Value/14ACC866"), 0.0, c_transmissionDurationAdd, false);
        }
        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss2(lv_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss2(lv_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss2_Trigger = null;
point auto_gf_thorboss2_lp_point;

void gf_thorboss2 (point lp_point) {
    auto_gf_thorboss2_lp_point = lp_point;

    if (auto_gf_thorboss2_Trigger == null) {
        auto_gf_thorboss2_Trigger = TriggerCreate("auto_gf_thorboss2_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss2_Trigger, false, false);
}

bool auto_gf_thorboss2_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss2_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = FixedToInt(gv_difficulty);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (128 * (lv_defenderc-1));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    Wait(3.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/9B741A65"), StringExternal("Param/Value/967F4166"), c_objectiveStateActive, false);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/1EDB2692"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "ThorV2", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*800+500);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*800+500);
    TechTreeUpgradeAddLevel(6, "MultishotFlames", 1);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D451896B"), StringExternal("Param/Value/DCFA5963"), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_targetdronesc, "ThorAttackIndicator", c_unitCreateIgnorePlacement, 6, Point(233.0, 114.0));
    UnitGroupAddUnitGroup(lv_targetdrones, UnitLastCreatedGroup());
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) < lv_defenderc)) {
            if ((((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2) < 1)) {
                lv_k = 1;
            }
            else {
                lv_k = ((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2);
            }
            while ((lv_k > 0)) {
                lv_k -= 1;
                if ((ModI(lv_restimer, 160) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(lv_point, 4.0, libNtve_gf_RandomAngle()));
                    UnitGroupAdd(lv_defenders, UnitLastCreated());
                    lv_angle[UnitGroupCount(lv_defenders, c_unitCountAll)] = AngleBetweenPoints(UnitGetPosition(lv_u1), UnitGetPosition(UnitLastCreated()));
                }

                lv_restimer -= 1;
            }
        }

        lv_i = 0;
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) >= 1)) {
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == true)) {
                    lv_angle[lv_i] += 1.0;
                    UnitSetPosition(UnitGroupUnit(lv_defenders, lv_i), PointWithOffsetPolar(lv_point, 4.0, lv_angle[lv_i]), true);
                }
                else {
                    lv_j = lv_i;
                    while ((lv_j < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                        lv_angle[lv_j] = lv_angle[lv_j+1];
                        lv_j += 1;
                    }
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                    lv_restimer += 160;
                }
            }
        }

        lv_i = 0;
        while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
            lv_i += 1;
            if ((UnitIsAlive(UnitGroupUnit(lv_targetdrones, lv_i)) == false)) {
                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, lv_i));
                lv_i -= 1;
            }
            else {
                if (((lv_targettimer[lv_i] == 0) || (lv_targets[lv_i] == null) || (UnitIsAlive(lv_targets[lv_i]) == false))) {
                    lv_targets[lv_i] = UnitGroupRandomUnit(UnitGroupAlliance(6, c_unitAllianceEnemy, RegionCircle(Point(233.0, 114.0), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
                    if ((lv_targets[lv_i] != null)) {
                        lv_targettimer[lv_i] = 160;
                    }

                }
                else {
                    lv_targettimer[lv_i] -= 1;
                }
                if ((lv_targets[lv_i] != null)) {
                    UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), lv_targetspeed, (AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_targets[lv_i])) + 0.0)), true);
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1)) > 10.0)) {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1))), true);
                    }
                    else {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, libNtve_gf_RandomAngle()), true);
                    }
                }
            }
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
        UnitRemove(UnitGroupUnit(lv_targetdrones, 1));
        UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
    }
    while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
        UnitKill(UnitGroupUnit(lv_defenders, 1));
        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, 1));
    }
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(14);
        }

        libNtve_gf_SetUpgradeLevelForPlayer(5, "ThorQuestRewardPhotonDamage", 1);
        gf_gainxp(20000.0);
        gf_gainrewardbonusall(FixedToInt(2*gv_difficulty));
        if ((gv_zgametime[3] <= lv_starttime)) {
            gv_zthormaster += 1;
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DF6A2A9A"), (StringExternal("Param/Value/7FF392D6") + IntToText(FixedToInt(gv_difficulty*10)) + StringExternal("Param/Value/2BEB1819")), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CAC326A7"), (StringExternal("Param/Value/332C142B") + IntToText(FixedToInt(gv_difficulty*10)) + StringExternal("Param/Value/D4C1746E")), 0.0, c_transmissionDurationAdd, false);
        }
        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss3(lp_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss3(lp_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss3_Trigger = null;
point auto_gf_thorboss3_lp_point;

void gf_thorboss3 (point lp_point) {
    auto_gf_thorboss3_lp_point = lp_point;

    if (auto_gf_thorboss3_Trigger == null) {
        auto_gf_thorboss3_Trigger = TriggerCreate("auto_gf_thorboss3_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss3_Trigger, false, false);
}

bool auto_gf_thorboss3_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss3_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = FixedToInt(gv_difficulty);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (128 * (lv_defenderc-1));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    Wait(3.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/2C81C18B"), StringExternal("Param/Value/FCE508B2"), c_objectiveStateActive, false);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/FA7B7C8C"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "ThorV3", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*900+500);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*900+500);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/49CA1D72"), StringExternal("Param/Value/88900A70"), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_targetdronesc, "ThorAttackIndicator", c_unitCreateIgnorePlacement, 6, Point(233.0, 114.0));
    UnitGroupAddUnitGroup(lv_targetdrones, UnitLastCreatedGroup());
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) < lv_defenderc)) {
            if ((((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2) < 1)) {
                lv_k = 1;
            }
            else {
                lv_k = ((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2);
            }
            while ((lv_k > 0)) {
                lv_k -= 1;
                if ((ModI(lv_restimer, 160) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(lv_point, 4.0, libNtve_gf_RandomAngle()));
                    UnitGroupAdd(lv_defenders, UnitLastCreated());
                    UnitBehaviorAdd(UnitLastCreated(), "ThorScienceSeekerProduce", UnitLastCreated(), 1);
                    lv_angle[UnitGroupCount(lv_defenders, c_unitCountAll)] = AngleBetweenPoints(UnitGetPosition(lv_u1), UnitGetPosition(UnitLastCreated()));
                }

                lv_restimer -= 1;
            }
        }

        lv_i = 0;
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) >= 1)) {
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == true)) {
                    lv_angle[lv_i] += 1.0;
                    UnitSetPosition(UnitGroupUnit(lv_defenders, lv_i), PointWithOffsetPolar(lv_point, 4.0, lv_angle[lv_i]), true);
                }
                else {
                    lv_j = lv_i;
                    while ((lv_j < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                        lv_angle[lv_j] = lv_angle[lv_j+1];
                        lv_j += 1;
                    }
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                    lv_restimer += 160;
                }
            }
        }

        lv_i = 0;
        while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
            lv_i += 1;
            if ((UnitIsAlive(UnitGroupUnit(lv_targetdrones, lv_i)) == false)) {
                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, lv_i));
                lv_i -= 1;
            }
            else {
                if (((lv_targettimer[lv_i] == 0) || (lv_targets[lv_i] == null) || (UnitIsAlive(lv_targets[lv_i]) == false))) {
                    lv_targets[lv_i] = UnitGroupRandomUnit(UnitGroupAlliance(6, c_unitAllianceEnemy, RegionCircle(Point(233.0, 114.0), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
                    if ((lv_targets[lv_i] != null)) {
                        lv_targettimer[lv_i] = 160;
                    }

                }
                else {
                    lv_targettimer[lv_i] -= 1;
                }
                if ((lv_targets[lv_i] != null)) {
                    UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), lv_targetspeed, (AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_targets[lv_i])) + 0.0)), true);
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1)) > 10.0)) {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1))), true);
                    }
                    else {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, libNtve_gf_RandomAngle()), true);
                    }
                }
            }
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
        UnitRemove(UnitGroupUnit(lv_targetdrones, 1));
        UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
    }
    while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
        UnitKill(UnitGroupUnit(lv_defenders, 1));
        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, 1));
    }
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(24);
        }

        libNtve_gf_SetUpgradeLevelForPlayer(1, "ThorQuestReward", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(2, "ThorQuestReward", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(3, "ThorQuestReward", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(4, "ThorQuestReward", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(5, "ThorQuestReward", 1);
        gf_gainxp(50000.0);
        gf_gainrewardbonusall(FixedToInt(5*gv_difficulty));
        if ((gv_zgametime[3] <= lv_starttime)) {
            gv_zthormaster += 1;
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/11C2CF1C"), (StringExternal("Param/Value/127ACF1A") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/56B2A90B")), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CCF47564"), (StringExternal("Param/Value/952D11E4") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/DB35FB1A")), 0.0, c_transmissionDurationAdd, false);
        }
        if ((gv_zthormaster == 3)) {
            gf_achievements0killaward(30);
        }

        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss4(lp_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss4(lp_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss4_Trigger = null;
point auto_gf_thorboss4_lp_point;

void gf_thorboss4 (point lp_point) {
    auto_gf_thorboss4_lp_point = lp_point;

    if (auto_gf_thorboss4_Trigger == null) {
        auto_gf_thorboss4_Trigger = TriggerCreate("auto_gf_thorboss4_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss4_Trigger, false, false);
}

bool auto_gf_thorboss4_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss4_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = PowI(2.0, gv_difficulty+1);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (1024 / (lv_defenderc));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    if ((lv_defenderc == 4)) {
        lv_defenderc = 8;
    }

    Wait(3.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/80F70050"), StringExternal("Param/Value/5542327E"), c_objectiveStateActive, false);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/0C514758"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "Annihilator", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*200+9000);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*200+9000);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/69F32DE4"), StringExternal("Param/Value/759A0158"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        UnitGroupIssueOrder(UnitGroup("Warbot", 6, RegionCircle(lv_point, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        if ((lv_restimer < 1)) {
            lv_targetdrones = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 14.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                    lv_k = RandomInt(0, 10);
                    if ((lv_k == 1)) {
                        lv_restimer = (1024 / lv_defenderc);
                        UnitBehaviorAdd(lv_u1, "Dematfieldcheck", lv_u1, 1);
                    }
                    else {
                        if ((lv_k == 2)) {
                            lv_restimer = (1024 / lv_defenderc);
                            UnitBehaviorAdd(lv_u1, "annihilatornomovecheck", lv_u1, 1);
                            while ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AnnihilatorStopMoveIndicator", c_unitCreateIgnorePlacement, 6, UnitGetPosition(UnitGroupUnit(lv_targetdrones, 1)));
                                UnitGroupAdd(lv_defenders, UnitLastCreated());
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFollow", UnitGroupUnit(lv_targetdrones, 1), 1);
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFate", lv_u1, 1);
                                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
                            }
                        }

                    }
                    if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                        UnitCreateEffectUnit(lv_u1, "WarbotBLM", UnitGroupRandomUnit(lv_targetdrones, c_unitCountAll));
                        lv_restimer = (1024 / lv_defenderc);
                    }

                }

            }

        }
        else {
            lv_restimer -= 1;
        }
        if ((UnitHasBehavior(lv_u1, "annihilatornomovecheck") == true) && (UnitGroupCount(lv_defenders, c_unitCountAll) > 0)) {
            lv_i = 0;
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == false)) {
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)), 1.5), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) < 1)) {
                        UnitCreateEffectPoint(lv_u1, "AnnihilatorLaserTrackingDamage", UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)));
                        UnitRemove(UnitGroupUnit(lv_defenders, lv_i));
                        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                        lv_i -= 1;
                    }

                }
            }
        }

        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(35);
        }

        if ((gv_stage < 7)) {
            gf_achievements0killaward(34);
        }

        TechTreeUpgradeAddLevel(5, "hpBonus", ((FixedToInt(gv_champion) + 1) * 5));
        gf_gainxp(50000.0);
        gf_gainrewardbonusall(FixedToInt(5*gv_difficulty));
        if ((gv_zgametime[3] <= lv_starttime)) {
            gf_achievements0killaward(36);
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E47CD666"), (StringExternal("Param/Value/D481E14E") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/D50E36D7")), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/907FEEA9"), (StringExternal("Param/Value/1A329290") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/01A2FEC9")), 0.0, c_transmissionDurationAdd, false);
        }
        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss5(lp_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss5(lp_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss5_Trigger = null;
point auto_gf_thorboss5_lp_point;

void gf_thorboss5 (point lp_point) {
    auto_gf_thorboss5_lp_point = lp_point;

    if (auto_gf_thorboss5_Trigger == null) {
        auto_gf_thorboss5_Trigger = TriggerCreate("auto_gf_thorboss5_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss5_Trigger, false, false);
}

bool auto_gf_thorboss5_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss5_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = PowI(2.0, gv_difficulty+1);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (1024 / (lv_defenderc));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    if ((lv_defenderc == 4)) {
        lv_defenderc = 8;
    }

    Wait(3.0, c_timeGame);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/33B276C6"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    ObjectiveCreate(StringExternal("Param/Value/6BC14C24"), StringExternal("Param/Value/F906BC0F"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "AnnihilatorV2", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*500+10000);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*500+10000);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/834DDDB6"), StringExternal("Param/Value/46EC3781"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        UnitGroupIssueOrder(UnitGroup("Warbot", 6, RegionCircle(lv_point, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        if ((lv_restimer < 1)) {
            lv_targetdrones = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 14.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                    lv_k = RandomInt(0, 10);
                    if ((lv_k == 1)) {
                        lv_restimer = (1024 / lv_defenderc);
                        UnitBehaviorAdd(lv_u1, "Dematfieldcheck", lv_u1, 1);
                    }
                    else {
                        if ((lv_k == 2)) {
                            lv_restimer = (1024 / lv_defenderc);
                            UnitBehaviorAdd(lv_u1, "annihilatornomovecheck", lv_u1, 1);
                            while ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AnnihilatorStopMoveIndicator", c_unitCreateIgnorePlacement, 6, UnitGetPosition(UnitGroupUnit(lv_targetdrones, 1)));
                                UnitGroupAdd(lv_defenders, UnitLastCreated());
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFollow", UnitGroupUnit(lv_targetdrones, 1), 1);
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFate", lv_u1, 1);
                                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
                            }
                        }

                    }
                    if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                        UnitCreateEffectUnit(lv_u1, "WarbotBLM", UnitGroupRandomUnit(lv_targetdrones, c_unitCountAll));
                        lv_restimer = (1024 / lv_defenderc);
                    }

                }

            }

        }
        else {
            lv_restimer -= 1;
        }
        if ((UnitHasBehavior(lv_u1, "annihilatornomovecheck") == true) && (UnitGroupCount(lv_defenders, c_unitCountAll) > 0)) {
            lv_i = 0;
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == false)) {
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)), 1.5), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) < 1)) {
                        UnitCreateEffectPoint(lv_u1, "AnnihilatorLaserTrackingDamage", UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)));
                        UnitRemove(UnitGroupUnit(lv_defenders, lv_i));
                        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                        lv_i -= 1;
                    }

                }
            }
        }

        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(37);
        }

        TechTreeUpgradeAddLevel(5, "Annihilatorv2RewardUpgrade", 1);
        gf_gainxp(50000.0);
        gf_gainrewardbonusall(FixedToInt(5*gv_difficulty));
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/22798DFA"), (StringExternal("Param/Value/2C62435E") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/D9CB7D4E")), 0.0, c_transmissionDurationAdd, false);
        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss6(lp_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss6(lp_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss6_Trigger = null;
point auto_gf_thorboss6_lp_point;

void gf_thorboss6 (point lp_point) {
    auto_gf_thorboss6_lp_point = lp_point;

    if (auto_gf_thorboss6_Trigger == null) {
        auto_gf_thorboss6_Trigger = TriggerCreate("auto_gf_thorboss6_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss6_Trigger, false, false);
}

bool auto_gf_thorboss6_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss6_lp_point;

    // Variable Declarations
    int lv_tw;
    timer lv_maxtimer;
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    int lv_starttime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_maxtimer = TimerCreate();
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = PowI(2.0, gv_difficulty+1);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (1024 / (lv_defenderc));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_starttime = (gv_zgametime[3] + 180);

    // Implementation
    if ((lv_defenderc == 4)) {
        lv_defenderc = 8;
    }

    Wait(3.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/84BB1F64"), StringExternal("Param/Value/50812D33"), c_objectiveStateActive, false);
    TimerStart(lv_maxtimer, 360.0, false, c_timeGame);
    if ((gv_mode == 1)) {
        TimerWindowCreate(lv_maxtimer, StringExternal("Param/Value/C62C1DC9"), true, false);
        lv_tw = TimerWindowLastCreated();
    }

    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "AnnihilatorV3", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*650+12000);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*650+12000);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/517F3294"), StringExternal("Param/Value/A1A7E8B1"), 0.0, c_transmissionDurationAdd, false);
    gf_BansheeDropBeam(lv_u1, 10-gv_difficulty);
    while ((UnitIsAlive(lv_u1) == true) && ((gv_mode == 0) || (TimerGetRemaining(lv_maxtimer) > 1.0))) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        UnitGroupIssueOrder(UnitGroup("Warbot", 6, RegionCircle(lv_point, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        if ((lv_restimer < 1)) {
            lv_targetdrones = UnitGroup(null, c_playerAny, RegionCircle(lv_point, 14.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            if ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                    lv_k = RandomInt(0, 10);
                    if ((lv_k == 1)) {
                        lv_restimer = (1024 / lv_defenderc);
                        UnitBehaviorAdd(lv_u1, "Dematfieldcheck", lv_u1, 1);
                    }
                    else {
                        if ((lv_k == 2)) {
                            lv_restimer = (1024 / lv_defenderc);
                            UnitBehaviorAdd(lv_u1, "annihilatornomovecheck", lv_u1, 1);
                            while ((UnitGroupCount(lv_targetdrones, c_unitCountAll) > 0)) {
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, "AnnihilatorStopMoveIndicator", c_unitCreateIgnorePlacement, 6, UnitGetPosition(UnitGroupUnit(lv_targetdrones, 1)));
                                UnitGroupAdd(lv_defenders, UnitLastCreated());
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFollow", UnitGroupUnit(lv_targetdrones, 1), 1);
                                UnitBehaviorAdd(UnitLastCreated(), "ThorStopMoveIndicatorFate", lv_u1, 1);
                                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
                            }
                        }

                    }
                    if ((UnitHasBehavior(lv_u1, "Dematfieldcheck") == false) && (UnitHasBehavior(lv_u1, "annihilatornomovecheck") == false)) {
                        UnitCreateEffectUnit(lv_u1, "WarbotBLM", UnitGroupRandomUnit(lv_targetdrones, c_unitCountAll));
                        lv_restimer = (1024 / lv_defenderc);
                    }

                }

            }

        }
        else {
            lv_restimer -= 1;
        }
        if ((UnitHasBehavior(lv_u1, "annihilatornomovecheck") == true) && (UnitGroupCount(lv_defenders, c_unitCountAll) > 0)) {
            lv_i = 0;
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == false)) {
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                }
                else {
                    if ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)), 1.5), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) < 1)) {
                        UnitCreateEffectPoint(lv_u1, "AnnihilatorLaserTrackingDamage", UnitGetPosition(UnitGroupUnit(lv_defenders, lv_i)));
                        UnitRemove(UnitGroupUnit(lv_defenders, lv_i));
                        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                        lv_i -= 1;
                    }

                }
            }
        }

        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    if ((gv_mode == 1)) {
        TimerWindowDestroy(lv_tw);
    }

    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        UnitKill(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGetPropertyKills(lv_u1, c_unitPropCurrent) == 0)) {
            gf_achievements0killaward(38);
        }

        gf_gainxp(75000.0);
        gf_gainrewardbonusall(FixedToInt(5*gv_difficulty));
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/28DF4B12"), (StringExternal("Param/Value/DCA6CC87") + IntToText(FixedToInt(gv_difficulty*25)) + StringExternal("Param/Value/0C9EA65C")), 0.0, c_transmissionDurationAdd, false);
        TechTreeUpgradeAddLevel(5, "Ann3Reward", 1);
        gf_achievementherokills();
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    if ((gv_mode == 0) && (gv_stage < 11)) {
        Wait(60.0, c_timeGame);
        gf_thorboss7(lv_point);
    }
    else {
        if ((gv_mode == 0)) {
            gf_thorboss7(lv_point);
        }

    }
    return true;
}

trigger auto_gf_thorboss7_Trigger = null;
point auto_gf_thorboss7_lp_point;

void gf_thorboss7 (point lp_point) {
    auto_gf_thorboss7_lp_point = lp_point;

    if (auto_gf_thorboss7_Trigger == null) {
        auto_gf_thorboss7_Trigger = TriggerCreate("auto_gf_thorboss7_TriggerFunc");
    }

    TriggerExecute(auto_gf_thorboss7_Trigger, false, false);
}

bool auto_gf_thorboss7_TriggerFunc (bool testConds, bool runActions) {
    point lp_point = auto_gf_thorboss7_lp_point;

    // Variable Declarations
    unit lv_u1;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_defenders;
    unitgroup lv_targetdrones;
    int lv_defenderc;
    int lv_targetdronesc;
    int lv_restimer;
    int[13] lv_targettimer;
    int lv_i;
    unit[13] lv_targets;
    fixed[13] lv_angle;
    point lv_point;
    int lv_j;
    fixed lv_targetspeed;
    int lv_k;
    timer lv_dematimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_defenders = UnitGroupEmpty();
    lv_targetdrones = UnitGroupEmpty();
    lv_defenderc = FixedToInt(gv_difficulty);
    lv_targetdronesc = FixedToInt(2+(gv_difficulty/2.5));
    lv_restimer = (128 * (lv_defenderc-1));
    lv_point = lp_point;
    lv_targetspeed = (gv_difficulty*0.03125);
    lv_dematimer = TimerCreate();

    // Implementation
    Wait(3.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/BBF6E325"), StringExternal("Param/Value/B4FAE89B"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "Odin2", c_unitCreateIgnorePlacement, 6, lv_point, 90.0);
    lv_u1 = UnitLastCreated();
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, gv_difficulty*gv_difficulty*1250+5000);
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, gv_difficulty*gv_difficulty*1250+5000);
    UnitBehaviorAdd(lv_u1, "Dontrushmebro", lv_u1, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CC4A03C3"), StringExternal("Param/Value/CEB4D599"), 0.0, c_transmissionDurationAdd, false);
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_targetdronesc, "ThorAttackIndicator", c_unitCreateIgnorePlacement, 6, Point(233.0, 114.0));
    UnitGroupAddUnitGroup(lv_targetdrones, UnitLastCreatedGroup());
    TimerStart(lv_dematimer, 60.0, false, c_timeGame);
    gf_BansheeDropBeam(lv_u1, 10-gv_difficulty);
    while ((UnitIsAlive(lv_u1) == true)) {
        VisRevealArea(6, RegionCircle(lv_point, 15.0), 20.0, false);
        VisRevealArea(5, RegionCircle(lv_point, 15.0), 20.0, false);
        UnitGroupIssueOrder(UnitGroup("Warbot", 6, RegionCircle(lv_point, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) < lv_defenderc)) {
            if ((((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2) < 1)) {
                lv_k = 1;
            }
            else {
                lv_k = ((lv_defenderc - UnitGroupCount(lv_defenders, c_unitCountAll)) / 2);
            }
            while ((lv_k > 0)) {
                lv_k -= 1;
                if ((ModI(lv_restimer, 160) == 0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScienceVessel", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(lv_point, 4.0, libNtve_gf_RandomAngle()));
                    UnitGroupAdd(lv_defenders, UnitLastCreated());
                    UnitBehaviorAdd(UnitLastCreated(), "ThorScienceSeekerProduce", UnitLastCreated(), 1);
                    lv_angle[UnitGroupCount(lv_defenders, c_unitCountAll)] = AngleBetweenPoints(UnitGetPosition(lv_u1), UnitGetPosition(UnitLastCreated()));
                }

                lv_restimer -= 1;
            }
        }

        lv_i = 0;
        if ((UnitGroupCount(lv_defenders, c_unitCountAll) >= 1)) {
            while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                lv_i += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_defenders, lv_i)) == true)) {
                    lv_angle[lv_i] += 1.0;
                    UnitSetPosition(UnitGroupUnit(lv_defenders, lv_i), PointWithOffsetPolar(lv_point, 4.0, lv_angle[lv_i]), true);
                }
                else {
                    lv_j = lv_i;
                    while ((lv_j < UnitGroupCount(lv_defenders, c_unitCountAll))) {
                        lv_angle[lv_j] = lv_angle[lv_j+1];
                        lv_j += 1;
                    }
                    UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, lv_i));
                    lv_i -= 1;
                    lv_restimer += 160;
                }
            }
        }

        lv_i = 0;
        while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
            lv_i += 1;
            if ((UnitIsAlive(UnitGroupUnit(lv_targetdrones, lv_i)) == false)) {
                UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, lv_i));
                lv_i -= 1;
            }
            else {
                if (((lv_targettimer[lv_i] == 0) || (lv_targets[lv_i] == null) || (UnitIsAlive(lv_targets[lv_i]) == false))) {
                    lv_targets[lv_i] = UnitGroupRandomUnit(UnitGroupAlliance(6, c_unitAllianceEnemy, RegionCircle(Point(233.0, 114.0), 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
                    if ((lv_targets[lv_i] != null)) {
                        lv_targettimer[lv_i] = 160;
                    }

                }
                else {
                    lv_targettimer[lv_i] -= 1;
                }
                if ((lv_targets[lv_i] != null)) {
                    UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), lv_targetspeed, (AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_targets[lv_i])) + 0.0)), true);
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1)) > 10.0)) {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), UnitGetPosition(lv_u1))), true);
                    }
                    else {
                        UnitSetPosition(UnitGroupUnit(lv_targetdrones, lv_i), PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetdrones, lv_i)), 0.125, libNtve_gf_RandomAngle()), true);
                    }
                }
            }
        }
        if ((TimerGetRemaining(lv_dematimer) < 1.0)) {
            UnitBehaviorAdd(lv_u1, "Dematfieldcheck", lv_u1, 1);
            TimerStart(lv_dematimer, 10+(60/gv_difficulty), false, c_timeGame);
        }

        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < UnitGroupCount(lv_targetdrones, c_unitCountAll))) {
        UnitRemove(UnitGroupUnit(lv_targetdrones, 1));
        UnitGroupRemove(lv_targetdrones, UnitGroupUnit(lv_targetdrones, 1));
    }
    while ((lv_i < UnitGroupCount(lv_defenders, c_unitCountAll))) {
        UnitKill(UnitGroupUnit(lv_defenders, 1));
        UnitGroupRemove(lv_defenders, UnitGroupUnit(lv_defenders, 1));
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    gf_achievements0killaward(60);
    gf_gainxp(250000.0);
    gf_gainrewardbonusall(FixedToInt(15*gv_difficulty));
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/AA1A4D43"), (StringExternal("Param/Value/284EEA17") + IntToText(FixedToInt(gv_difficulty*75)) + StringExternal("Param/Value/B241321D")), 0.0, c_transmissionDurationAdd, false);
    TechTreeUpgradeAddLevel(5, "Vengeance", 1);
    PingDestroy(lv_ping1);
    gf_achievementherokills();
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

trigger auto_gf_BansheeDropBeam_Trigger = null;
unit auto_gf_BansheeDropBeam_lp_hostunit;
fixed auto_gf_BansheeDropBeam_lp_delay;

void gf_BansheeDropBeam (unit lp_hostunit, fixed lp_delay) {
    auto_gf_BansheeDropBeam_lp_hostunit = lp_hostunit;
    auto_gf_BansheeDropBeam_lp_delay = lp_delay;

    if (auto_gf_BansheeDropBeam_Trigger == null) {
        auto_gf_BansheeDropBeam_Trigger = TriggerCreate("auto_gf_BansheeDropBeam_TriggerFunc");
    }

    TriggerExecute(auto_gf_BansheeDropBeam_Trigger, false, false);
}

bool auto_gf_BansheeDropBeam_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hostunit = auto_gf_BansheeDropBeam_lp_hostunit;
    fixed lp_delay = auto_gf_BansheeDropBeam_lp_delay;

    // Variable Declarations
    unit lv_banshee;
    unit lv_target;
    unitgroup lv_availabletargets;
    region lv_region;
    int lv_n;
    point lv_hostpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_availabletargets = UnitGroupEmpty();
    lv_region = RegionCircle(UnitGetPosition(lp_hostunit), 12.0);
    lv_hostpoint = UnitGetPosition(lp_hostunit);

    // Implementation
    while ((UnitIsAlive(lp_hostunit) == true)) {
        lv_availabletargets = UnitGroup(null, c_playerAny, lv_region, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_n = UnitGroupCount(lv_availabletargets, c_unitCountAll);
        if ((lv_n > 0)) {
            lv_target = UnitGroupRandomUnit(lv_availabletargets, c_unitCountAll);
            if ((UnitIsAlive(lv_banshee) == false)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Banshee", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(lv_hostpoint, 15.0, libNtve_gf_RandomAngle()), lv_hostpoint);
                lv_banshee = UnitLastCreated();
            }

            UnitIssueOrder(lv_banshee, OrderTargetingUnit(AbilityCommand("DropBeam", 0), lv_target), c_orderQueueReplace);
        }
        else {
            if ((UnitIsAlive(lv_banshee) == false)) {
                UnitKill(lv_banshee);
            }

        }
        while ((UnitIsAlive(lv_target) == true) && (UnitIsAlive(lv_banshee) == true)) {
            UnitIssueOrder(lv_banshee, OrderTargetingUnit(AbilityCommand("DropBeam", 0), lv_target), c_orderQueueReplace);
            Wait(0.125, c_timeGame);
        }
        if ((UnitIsAlive(lv_banshee) == false)) {
            Wait(lp_delay, c_timeGame);
        }
        else {
            Wait(0.125, c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_EscortAmbush_Trigger = null;
unit auto_gf_EscortAmbush_lp_escort;

void gf_EscortAmbush (unit lp_escort) {
    auto_gf_EscortAmbush_lp_escort = lp_escort;

    if (auto_gf_EscortAmbush_Trigger == null) {
        auto_gf_EscortAmbush_Trigger = TriggerCreate("auto_gf_EscortAmbush_TriggerFunc");
    }

    TriggerExecute(auto_gf_EscortAmbush_Trigger, false, false);
}

bool auto_gf_EscortAmbush_TriggerFunc (bool testConds, bool runActions) {
    unit lp_escort = auto_gf_EscortAmbush_lp_escort;

    // Variable Declarations
    int lv_typ;
    int lv_ctype;
    int lv_i;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    int autoC9908E74_ae;
    const int autoC9908E74_ai = 1;
    int autoD3785F67_val;
    int auto4C331A38_val;

    // Variable Initialization
    lv_typ = RandomInt(0, 1);
    lv_ug = UnitGroupEmpty();

    // Implementation
    if ((gv_mode == 0)) {
        SoundPlay(SoundLink("Immortal_Help", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    if ((lv_typ == 0)) {
        lv_typ = RandomInt(0, 2);
        autoD3785F67_val = lv_typ;
        if (autoD3785F67_val == 0) {
            if ((gv_champion == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 3), "RoachCorpserBurrowed", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowHotSCorpserUp", 0)), c_orderQueueReplace);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 3), "RoachBurrowed", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            }
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_escort), c_orderQueueAddToEnd);
        }
        else if (autoD3785F67_val == 1) {
            if ((gv_champion == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 3), "HydraliskImpalerBurrowed", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowHydraliskImpalerUp", 0)), c_orderQueueReplace);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 3), "HydraliskBurrowed", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowHydraliskUp", 0)), c_orderQueueReplace);
            }
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_escort), c_orderQueueAddToEnd);
        }
        else if (autoD3785F67_val == 2) {
            if ((gv_champion == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 1), "HotSNoxious", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_escort), c_orderQueueAddToEnd);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(gv_difficulty) + 1), "Ultralisk", c_unitCreateIgnorePlacement, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 5.0, libNtve_gf_RandomAngle()));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingUnit(AbilityCommand("attack", 0), lp_escort), c_orderQueueAddToEnd);
            }
        }
        else {
        }
        if ((gv_difficulty > 1.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "Champion", UnitLastCreated(), FixedToInt(gv_difficulty));
            UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
            lv_ctype = RandomInt(0, 5);
            auto4C331A38_val = lv_ctype;
            if (auto4C331A38_val == 1) {
                UnitBehaviorAdd(UnitLastCreated(), "HasteAuraChampion", UnitLastCreated(), 1);
            }
            else if (auto4C331A38_val == 2) {
                UnitBehaviorAdd(UnitLastCreated(), "MightAuraChampion", UnitLastCreated(), 1);
            }
            else if (auto4C331A38_val == 3) {
                UnitBehaviorAdd(UnitLastCreated(), "LightningEnchanted2", UnitLastCreated(), 1);
                UnitSetTeamColorIndex(UnitLastCreated(), 2);
            }
            else if (auto4C331A38_val == 4) {
                UnitBehaviorAdd(UnitLastCreated(), "StoneSkin", UnitLastCreated(), 1);
                UnitSetTeamColorIndex(UnitLastCreated(), 12);
            }
            else if (auto4C331A38_val == 5) {
                UnitBehaviorAdd(UnitLastCreated(), "Enrage", UnitLastCreated(), 1);
                UnitSetTeamColorIndex(UnitLastCreated(), 15);
            }
            else {
                UnitBehaviorAdd(UnitLastCreated(), "FireEnchanted", UnitLastCreated(), 1);
                UnitSetTeamColorIndex(UnitLastCreated(), 1);
            }
        }

    }
    else {
        autoC9908E74_ae = FixedToInt(gv_difficulty);
        lv_i = 1;
        for ( ; ( (autoC9908E74_ai >= 0 && lv_i <= autoC9908E74_ae) || (autoC9908E74_ai < 0 && lv_i >= autoC9908E74_ae) ) ; lv_i += autoC9908E74_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overlord", 0, 6, PointWithOffsetPolar(UnitGetPosition(lp_escort), 13.0, libNtve_gf_RandomAngle()));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, (0.5 + (gv_difficulty/4)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), lp_escort), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "OverlordBanelingdrop", UnitLastCreated(), 1);
            UnitBehaviorAdd(UnitLastCreated(), "TimedSuicideNOSHOW", UnitLastCreated(), 1);
            UnitBehaviorRemove(UnitLastCreated(), "QueenSpawnZerglings", 1);
        }
    }
    return true;
}

void gf_colossiquest () {
    // Automatic Variable Declarations
}

void gf_hiddenbuildingfound () {
    // Automatic Variable Declarations
    // Implementation
    gv_zbonusbuildings += 1;
    if ((gv_zbonusbuildings == 6)) {
        gf_achievements0killaward(19);
    }

}

void gf_evolutionspeedcomplete () {
    // Automatic Variable Declarations
    // Implementation
    gv_zevolutionspeed += 1;
    if ((gv_zevolutionspeed == 3)) {
        gf_achievements0killaward(22);
    }

}

trigger auto_gf_SpawningPool2_Trigger = null;

void gf_SpawningPool2 () {
    if (auto_gf_SpawningPool2_Trigger == null) {
        auto_gf_SpawningPool2_Trigger = TriggerCreate("auto_gf_SpawningPool2_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawningPool2_Trigger, false, false);
}

bool auto_gf_SpawningPool2_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = 11;

    // Implementation
    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(235.0, 31.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(235.0, 37.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(235.0, 43.0), 90.0);
    ObjectiveCreate(StringExternal("Param/Value/052C2024"), StringExternal("Param/Value/663229C1"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "SpawningPool", c_unitCreateIgnorePlacement, 6, Point(231.0, 40.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    while ((UnitIsAlive(lv_u1) == true)) {
        lv_k += 1;
        if ((lv_k > 12)) {
            lv_k = 0;
            if ((gv_champion == 1)) {
                UnitCreate(2, "HotSSwarmling", c_unitCreateIgnorePlacement, 6, Point(231.0, 41.0), 90.0);
            }
            else {
                UnitCreate(6, "Zergling", c_unitCreateIgnorePlacement, 6, Point(231.0, 41.0), 90.0);
            }
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(242.0, 53.0)), c_orderQueueReplace);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueAddToEnd);
        }

        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    gf_GainReward(1);
    Wait(1.0, c_timeGame);
    Wait(9.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

void gf_initpicktreasurespots (int lp_mode) {
    // Variable Declarations
    int lv_spot1;
    int lv_spot2;
    int lv_spot3;
    region[11] lv_treasureRegions;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spot1 = RandomInt(0, 9);
    lv_spot2 = RandomInt(0, 8);
    lv_spot3 = RandomInt(0, 7);

    // Implementation
    lv_treasureRegions[0] = RegionFromId(49);
    lv_treasureRegions[1] = RegionFromId(40);
    lv_treasureRegions[2] = RegionFromId(41);
    lv_treasureRegions[3] = RegionFromId(42);
    lv_treasureRegions[4] = RegionFromId(43);
    lv_treasureRegions[5] = RegionFromId(44);
    lv_treasureRegions[6] = RegionFromId(45);
    lv_treasureRegions[7] = RegionFromId(46);
    lv_treasureRegions[8] = RegionFromId(47);
    lv_treasureRegions[9] = RegionFromId(48);
    if ((lv_spot1 == lv_spot2)) {
        lv_spot2+=1;
    }

    if ((lv_spot1 == lv_spot3)) {
        lv_spot3+=1;
    }

    if ((lv_spot2 == lv_spot3)) {
        lv_spot3+=1;
    }

    if ((lp_mode == 0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasCanisterProtoss", c_unitCreateIgnorePlacement, 5, RegionGetCenter(lv_treasureRegions[lv_spot1]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasCanisterProtoss", c_unitCreateIgnorePlacement, 5, RegionGetCenter(lv_treasureRegions[lv_spot2]));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GasCanisterProtoss", c_unitCreateIgnorePlacement, 5, RegionGetCenter(lv_treasureRegions[lv_spot3]));
    }

}

void gf_initselectmode () {
    // Variable Declarations
    int lv_dialog;
    int lv_timer;
    int lv_votepower;
    int lv_votepower2;
    int lv_votecurrent;
    int lv_i;
    int lv_classic;
    int lv_challenge;
    int lv_champion;
    point lv_challengemodepoint;

    // Automatic Variable Declarations
    playergroup auto723F289B_g;
    int auto723F289B_var;
    fixed autoCDE4A830_val;

    // Variable Initialization
    lv_dialog = c_invalidDialogId;
    lv_timer = 60;
    lv_votepower = FixedToInt((400.0 / gv_playercount));
    lv_votepower2 = FixedToInt((400.0 / gv_playercount));
    lv_challengemodepoint = Point(59.0, 47.0);

    // Implementation
    DialogCreate(700, 200, c_anchorCenter, 0, 0, true);
    lv_dialog = DialogLastCreated();
    DialogSetTitle(lv_dialog, StringExternal("Param/Value/7A46E9F7"));
    libNtve_gf_CreateDialogItemButton(lv_dialog, 200, 50, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/26573D28"), StringExternal("Param/Value/EB8E016D"), "");
    gv_rewardButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_dialog, 200, 50, c_anchorTopLeft, 450, 100, StringExternal("Param/Value/C6A99449"), StringExternal("Param/Value/3A8A9EE3"), "");
    gv_rewardButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorTopLeft, 50, 50, IntToText(lv_timer), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rewardButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(lv_dialog, 200, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/0D087F4F"), StringExternal("Param/Value/8249828B"), "");
    gv_rewardButtons[4] = DialogControlLastCreated();
    auto723F289B_g = PlayerGroupActive();
    auto723F289B_var = -1;
    while (true) {
        auto723F289B_var = PlayerGroupNextPlayer(auto723F289B_g, auto723F289B_var);
        if (auto723F289B_var < 0) { break; }
        if ((gf_bankgetint(gv_zbanks[auto723F289B_var], "3", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[auto723F289B_var], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[auto723F289B_var], "5", "completeruns") == 0)) {
            DialogControlSetEnabled(gv_rewardButtons[4], PlayerGroupSingle(auto723F289B_var), false);
        }

    }
    DialogSetVisible(lv_dialog, PlayerGroupAll(), true);
    while (((gv_mode < 290) && (lv_timer > 0) && (gv_mode > -290)) && (((lv_timer > 0) && (gv_mode2 > -290)))) {
        libNtve_gf_SetDialogItemText(gv_rewardButtons[3], IntToText(lv_timer), PlayerGroupAll());
        lv_challenge = 0;
        lv_classic = 0;
        lv_champion = 0;
        lv_i = 0;
        lv_timer -= 1;
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((gv_zdeathcount[lv_i] < 0) && (gv_zdeathcount[lv_i] > -9)) {
                lv_classic += 1;
            }

            if ((gv_zdeathcount[lv_i] <= -10)) {
                lv_champion += 1;
            }

            if ((gv_zdeathcount[lv_i] > 0)) {
                lv_challenge += 1;
            }

        }
        libNtve_gf_SetDialogItemText(gv_rewardButtons[1], (StringExternal("Param/Value/16749C55") + IntToText(lv_classic) + StringExternal("Param/Value/C619A4CB") + IntToText(FixedToInt(gv_playercount))), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_rewardButtons[2], (StringExternal("Param/Value/BA8E5353") + IntToText(lv_challenge) + StringExternal("Param/Value/683F28DE") + IntToText(FixedToInt(gv_playercount))), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_rewardButtons[4], (StringExternal("Param/Value/8C0D5DA6") + IntToText(lv_champion) + StringExternal("Param/Value/937709B7") + IntToText(FixedToInt(gv_playercount))), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    gv_zdeathcount[1] = 0;
    gv_zdeathcount[2] = 0;
    gv_zdeathcount[3] = 0;
    gv_zdeathcount[4] = 0;
    DialogSetVisible(lv_dialog, PlayerGroupAll(), false);
    TriggerEnable(gt_initselectmodebuttonpress, false);
    if ((gv_mode <= 0)) {
        gv_mode = 0;
    }
    else {
        gv_mode = 1;
        CameraPan(1, lv_challengemodepoint, 0.0, -1, 10, false);
        CameraPan(2, lv_challengemodepoint, 0.0, -1, 10, false);
        CameraPan(3, lv_challengemodepoint, 0.0, -1, 10, false);
        CameraPan(4, lv_challengemodepoint, 0.0, -1, 10, false);
    }
    if ((gv_mode2 <= -290)) {
        gv_mode = 0;
        gv_champion = 1;
        libNtve_gf_SetUpgradeLevelForPlayer(6, "ChampionModeBossBuff", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(6, "ChampionModeZergDefenseBuff", 1);
        autoCDE4A830_val = gv_difficulty;
        if (autoCDE4A830_val == 1.0) {
            libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 10);
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 2);
            TechTreeUpgradeAddLevel(5, "hpBonus", 20);
        }
        else if (autoCDE4A830_val == 2.0) {
            libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 15);
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 3);
            TechTreeUpgradeAddLevel(5, "hpBonus", 20);
        }
        else if (autoCDE4A830_val == 3.0) {
            libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 20);
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 4);
            TechTreeUpgradeAddLevel(5, "hpBonus", 20);
        }
        else if (autoCDE4A830_val == 4.0) {
            libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 25);
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 6);
            TechTreeUpgradeAddLevel(5, "hpBonus", 20);
        }
        else if (autoCDE4A830_val == 5.0) {
            libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 30);
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 8);
            TechTreeUpgradeAddLevel(5, "hpBonus", 20);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(gv_difficulty, c_fixedPrecisionAny));
        }
    }

    gf_initpicktreasurespots(gv_mode);
}

trigger auto_gf_introfornewb_Trigger = null;
int auto_gf_introfornewb_lp_newb;

void gf_introfornewb (int lp_newb) {
    auto_gf_introfornewb_lp_newb = lp_newb;

    if (auto_gf_introfornewb_Trigger == null) {
        auto_gf_introfornewb_Trigger = TriggerCreate("auto_gf_introfornewb_TriggerFunc");
    }

    TriggerExecute(auto_gf_introfornewb_Trigger, false, false);
}

bool auto_gf_introfornewb_TriggerFunc (bool testConds, bool runActions) {
    int lp_newb = auto_gf_introfornewb_lp_newb;

    // Automatic Variable Declarations
    // Implementation
    Wait(20.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/5DD7B7EF"));
    Wait(10.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/97801AF3"));
    Wait(15.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/0C772C02"));
    Wait(75.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/C03A5E32"));
    Wait(60.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/6F7DFC70"));
    Wait(30.0, c_timeGame);
    UIDisplayMessage(PlayerGroupSingle(lp_newb), c_messageAreaSubtitle, StringExternal("Param/Value/D956DA21"));
    return true;
}

void gf_inittips () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/FDBB6E85"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/794C1826"), StringExternal("Param/Value/E4BC6463"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/EEC91C83"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/45102051"), StringExternal("Param/Value/2B6B575F"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/E8C8C66F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/82C18792"), StringExternal("Param/Value/ECB072C5"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/1BF1E851"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/AF85C4F9"), StringExternal("Param/Value/DA58D564"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/CD5F1D15"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/5AD23FCA"), StringExternal("Param/Value/79B7ABE6"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C3507416"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/DF5F049B"), StringExternal("Param/Value/222CC9CE"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/45FCF806"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/9A1E68BC"), StringExternal("Param/Value/0944B138"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/FDA42529"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/A20A0CA6"), StringExternal("Param/Value/DFE6C891"), "EditorData\\Images\\BrushTextureOptimize.tga");
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/10CB8678"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/FA488F7B"), StringExternal("Param/Value/A0A82908"), "EditorData\\Images\\BrushTextureOptimize.tga");
    while ((lv_i < 5)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            if (gf_isMod(PlayerHandle(lv_i))) {
                HelpPanelAddTip(PlayerGroupSingle(lv_i), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/BF252EA2"), libNtve_ge_TipType_NewAbility), (StringExternal("Param/Value/0960E4A1") + gf_achievementgetlist(true)), StringExternal("Param/Value/01BA593C"), "EditorData\\Images\\BrushTextureOptimize.tga");
            }

            TipAlertPanelClear(PlayerGroupSingle(lv_i));
        }

        lv_i += 1;
    }
}

void gf_initdifficultyplayercount () {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    fixed auto1DB7CF2F_val;
    fixed auto72232853_val;

    // Variable Initialization

    // Implementation
    while ((lv_i <= 4)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            gv_playercount += 1.0;
            if ((GameAttributePlayerValue("1", lv_i) == "0001")) {
                gv_difficulty += 1.0;
            }

            if ((GameAttributePlayerValue("1", lv_i) == "0003")) {
                gv_difficulty += 3.0;
            }

            if ((GameAttributePlayerValue("1", lv_i) == "0002")) {
                gv_difficulty += 2.0;
            }

            if ((GameAttributePlayerValue("1", lv_i) == "0004")) {
                gv_difficulty += 4.0;
            }

            if ((GameAttributePlayerValue("1", lv_i) == "0005")) {
                gv_difficulty += 5.0;
            }

        }

        lv_i += 1;
    }
    gv_difficulty = IntToFixed(RoundI((gv_difficulty / gv_playercount)));
    TechTreeUpgradeAddLevel(6, "DifficultyBuildingHP", FixedToInt(gv_difficulty));
    auto1DB7CF2F_val = gv_playercount;
    if (auto1DB7CF2F_val == 1.0) {
        PlayerModifyPropertyInt(6, c_playerPropHandicap, c_playerPropOperSetTo, 100);
    }
    else if (auto1DB7CF2F_val == 2.0) {
        PlayerModifyPropertyInt(6, c_playerPropHandicap, c_playerPropOperSetTo, 120);
    }
    else if (auto1DB7CF2F_val == 3.0) {
        PlayerModifyPropertyInt(6, c_playerPropHandicap, c_playerPropOperSetTo, 135);
    }
    else if (auto1DB7CF2F_val == 4.0) {
        PlayerModifyPropertyInt(6, c_playerPropHandicap, c_playerPropOperSetTo, 145);
    }
    else {
    }
    auto72232853_val = gv_difficulty;
    if (auto72232853_val == 1.0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/92773F10"));
        libNtve_gf_SetUpgradeLevelForPlayer(6, "easyZergsmoveslower", 1);
    }
    else if (auto72232853_val == 2.0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/48ECCD33"));
        libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 2);
        PlayerModifyPropertyInt(5, c_playerPropHandicap, c_playerPropOperSetTo, 125);
        libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 1);
    }
    else if (auto72232853_val == 3.0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9CB975B4"));
        libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 5);
        PlayerModifyPropertyInt(5, c_playerPropHandicap, c_playerPropOperSetTo, 150);
        libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 2);
    }
    else if (auto72232853_val == 4.0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C0D94FB9"));
        libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 10);
        PlayerModifyPropertyInt(5, c_playerPropHandicap, c_playerPropOperSetTo, 175);
        libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 3);
    }
    else if (auto72232853_val == 5.0) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/A2601971"));
        libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherDiffUp", 15);
        PlayerModifyPropertyInt(5, c_playerPropHandicap, c_playerPropOperSetTo, 200);
        libNtve_gf_SetUpgradeLevelForPlayer(5, "ProtossAlliesCannonUpgrade", 4);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, FixedToText(gv_difficulty, c_fixedPrecisionAny));
    }
    TechTreeUpgradeAddLevel(5, "ZealotUpgradeDifficulty", FixedToInt(gv_difficulty-1));
    while ((lv_j < 6)) {
        lv_j += 1;
        TechTreeUpgradeAddLevel(lv_j, "difficultyupgrade", FixedToInt(gv_difficulty-1));
        if ((gv_difficulty >= 2.0)) {
            TechTreeUpgradeAddLevel(lv_j, "difficultyroachpuddle", 1);
        }

        if ((gv_difficulty >= 3.0)) {
            TechTreeUpgradeAddLevel(lv_j, "difficultyupgrade2", FixedToInt(gv_difficulty-1));
        }

    }
    TechTreeUpgradeAddLevel(6, "BossBanelingThrowMoreDamage", FixedToInt(gv_difficulty-1));
    TechTreeUpgradeAddLevel(6, "UnknownUpgrade", FixedToInt(gv_difficulty));
    if ((gv_difficulty >= 3.0)) {
        TechTreeUpgradeAddLevel(6, "spirefireforce", FixedToInt(gv_difficulty-2));
        TechTreeUpgradeAddLevel(6, "Crippled", 1);
    }

}

void gf_initalliances () {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(1, Point(245.0, 10.0), 0.0, -1, 10, false);
    CameraPan(2, Point(245.0, 10.0), 0.0, -1, 10, false);
    CameraPan(3, Point(245.0, 10.0), 0.0, -1, 10, false);
    CameraPan(4, Point(245.0, 10.0), 0.0, -1, 10, false);
    libNtve_gf_SetAlliance(1, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(1, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(1, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(1, 5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(1, 6, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(2, 2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(2, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(2, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(2, 5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(2, 6, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(3, 3, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(3, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(3, 5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(3, 6, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(4, 4, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(4, 5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAlliance(4, 6, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(5, 5, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerSetAlliance(5, c_allianceIdPushable, 1, true);
    PlayerSetAlliance(5, c_allianceIdPushable, 2, true);
    PlayerSetAlliance(5, c_allianceIdPushable, 3, true);
    PlayerSetAlliance(5, c_allianceIdPushable, 4, true);
    libNtve_gf_SetAlliance(5, 6, libNtve_ge_AllianceSetting_Enemy);
    GameSetSpeedValue(c_gameSpeedFaster);
}

void gf_buildbase1 () {
    // Variable Declarations
    unitgroup lv_gateways;
    unitgroup lv_towers;
    unit lv_probe;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gateways = UnitGroupEmpty();
    lv_towers = UnitGroupEmpty();

    // Implementation
    PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperSetTo, 1000);
    UnitCreate(1, "Probe", 0, 5, Point(243.0, 10.0), 270.0);
    lv_probe = UnitLastCreated();
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), Point(245.0, 10.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), Point(239.0, 10.0)), c_orderQueueAddToEnd);
    Wait(5.0, c_timeGame);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 3), Point(245.0, 12.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 3), Point(238.0, 12.0)), c_orderQueueAddToEnd);
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(237.0, 10.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(247.0, 10.0)), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 4), Point(247.0, 7.0)), c_orderQueueAddToEnd);
    Wait(4.0, c_timeGame);
    lv_gateways = UnitGroup("Gateway", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    gf_tossbase1(UnitGroupUnit(lv_gateways, 1), UnitGroupUnit(lv_gateways, 2), Point(240.0, 57.0), lv_probe);
}

void gf_buildzergbase1 () {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "Hatchery", 0, 6, Point(242.0, 58.0), 270.0);
    if ((gv_champion == 1)) {
        gf__2pathbaseQ(UnitLastCreated(), UnitLastCreated(), Point(240.0, 8.0), Point(241.0, 36.0), Point(241.0, 36.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 8, 0, 0, true);
    }
    else {
        gf__2pathbaseQ(UnitLastCreated(), UnitLastCreated(), Point(240.0, 8.0), Point(241.0, 36.0), Point(241.0, 36.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), 8, 0, 0, true);
    }
    UnitCreate(1, "SpineCrawler", 0, 6, Point(238.0, 52.0), 270.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(243.0, 52.0), 270.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(186.0, 55.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(201.0, 53.0), 270.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(230.0, 112.0), 270.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(186.0, 100.0), 270.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(196.0, 110.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(236.0, 92.0), 270.0);
    gf_SpawningPool2();
}

void gf_heropickdialogANDtalentsANDupgradesbuttons () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    DialogCreate(500, 600, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/42C3D68B"), StringExternal("Param/Value/3D54DDD6"), "");
    gv_zheropickdialogbuttons[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 50, StringExternal("Param/Value/74D0E80E"), StringExternal("Param/Value/7297AAA5"), "");
    gv_zheropickdialogbuttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/3D4EE4D4"), StringExternal("Param/Value/79260BF7"), "");
    gv_zheropickdialogbuttons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/8D0082BB"), StringExternal("Param/Value/A530220F"), "");
    gv_zheropickdialogbuttons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/5C447203"), StringExternal("Param/Value/33E49F6C"), "");
    gv_zheropickdialogbuttons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/3A3DCD2B"), StringExternal("Param/Value/FD5B4E1E"), "");
    gv_zheropickdialogbuttons[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 200, StringExternal("Param/Value/E1076DC9"), StringExternal("Param/Value/E404A80B"), "");
    gv_zheropickdialogbuttons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/B6392194"), StringExternal("Param/Value/F6F58790"), "");
    gv_zheropickdialogbuttons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 250, StringExternal("Param/Value/F9629B0F"), StringExternal("Param/Value/57AA53C5"), "");
    gv_zheropickdialogbuttons[17] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/CE0092DB"), StringExternal("Param/Value/86BAD7AE"), "");
    gv_zheropickdialogbuttons[19] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 300, StringExternal("Param/Value/CEED52E3"), StringExternal("Param/Value/3079C868"), "");
    gv_zheropickdialogbuttons[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/0DEF721C"), StringExternal("Param/Value/0009E97F"), "");
    gv_zheropickdialogbuttons[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 350, StringExternal("Param/Value/0E2AB7A6"), StringExternal("Param/Value/DB81EADA"), "");
    gv_zheropickdialogbuttons[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/913A8A71"), StringExternal("Param/Value/FE58BD6D"), "");
    gv_zheropickdialogbuttons[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 400, StringExternal("Param/Value/F0E9C4A4"), StringExternal("Param/Value/90FB6CEA"), "");
    gv_zheropickdialogbuttons[15] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 400, StringExternal("Param/Value/7FC7E1BB"), StringExternal("Param/Value/D466FDB4"), "");
    gv_zheropickdialogbuttons[18] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, StringExternal("Param/Value/AAFE74E4"), StringExternal("Param/Value/9F2FBB30"), "");
    gv_zheropickdialogbuttons[16] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 450, StringExternal("Param/Value/E30D503A"), StringExternal("Param/Value/11E2E0F1"), "");
    gv_zheropickdialogbuttons[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 500, StringExternal("Param/Value/BA617885"), StringExternal("Param/Value/7C189EE8"), "");
    gv_zheropickdialogbuttons[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 500, StringExternal("Param/Value/14EEFE37"), StringExternal("Param/Value/195901F2"), "");
    gv_zheropickdialogbuttons[12] = DialogControlLastCreated();
    while ((lv_i < 5)) {
        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_bankgetint(gv_zbanks[lv_i], "1", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "2", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "3", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[4], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gf_bankgetint(gv_zbanks[lv_i], "2", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "3", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)) {
            libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[5], Color(0,0,0), PlayerGroupSingle(lv_i));
        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_bankgetint(gv_zbanks[lv_i], "3", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[7], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)) {
            libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[6], Color(0,0,0), PlayerGroupSingle(lv_i));
        }

        if ((gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)) {
            libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[3], Color(0,0,0), PlayerGroupSingle(lv_i));
        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 100)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[8], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 125)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[9], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 150)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[10], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if (((gf_achievementpointsum(lv_i) < 300) || ((gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") == 0) && (gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0)))) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[11], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if (((gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns") == 0) || (gf_achievementpointsum(lv_i) < 350))) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[12], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 175)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[13], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 275)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[14], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 200)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[15], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 250)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[16], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 50)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[17], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 225)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[18], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        if ((gv_zbanks[lv_i] != null)) {
            if ((gf_achievementpointsum(lv_i) < 75)) {
                libNtve_gf_SetDialogItemColor(gv_zheropickdialogbuttons[19], Color(0,0,0), PlayerGroupSingle(lv_i));
            }

        }

        lv_i += 1;
    }
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_DisplayScreenButton(39, StringExternal("Param/Value/4400E7A9"), 120, 60, c_anchorBottomRight, 0, 500, null);
    libNtve_gf_DisplayScreenButton(35, StringExternal("Param/Value/B1312508"), 120, 60, c_anchorBottomRight, 0, 420, null);
    if ((gv_difficulty < 2.0)) {
        DialogControlSetVisible(libNtve_gf_ScreenButton(35), PlayerGroupAll(), false);
        TriggerExecute(gt_UpgradesDiffEasyAuto, true, false);
    }

    libNtve_gf_DisplayScreenButton(34, StringExternal("Param/Value/57FE7810"), 120, 60, c_anchorBottomRight, 0, 580, null);
    libNtve_gf_DisplayScreenButton(33, StringExternal("Param/Value/D0351434"), 120, 60, c_anchorBottomRight, 0, 660, null);
    libNtve_gf_DisplayScreenButton(32, StringExternal("Param/Value/7AEA21DC"), 180, 60, c_anchorBottom, 200, 60, null);
    DialogControlSetVisible(libNtve_gf_ScreenButton(34), PlayerGroupAll(), false);
}

trigger auto_gf_initaddgametime_Trigger = null;

void gf_initaddgametime () {
    if (auto_gf_initaddgametime_Trigger == null) {
        auto_gf_initaddgametime_Trigger = TriggerCreate("auto_gf_initaddgametime_TriggerFunc");
    }

    TriggerExecute(auto_gf_initaddgametime_Trigger, false, false);
}

bool auto_gf_initaddgametime_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 1)) {
        gv_zgametime[0] += 1;
        gv_zgametime[3] += 1;
        if ((gv_zgametime[0] >= 60)) {
            gv_zgametime[1] += 1;
            gv_zgametime[0] = 0;
            if ((gv_zgametime[1] >= 60)) {
                gv_zgametime[2] += 1;
                gv_zgametime[1] = 0;
            }

        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_initdisplaytalentsetcasMinerals_Trigger = null;

void gf_initdisplaytalentsetcasMinerals () {
    if (auto_gf_initdisplaytalentsetcasMinerals_Trigger == null) {
        auto_gf_initdisplaytalentsetcasMinerals_Trigger = TriggerCreate("auto_gf_initdisplaytalentsetcasMinerals_TriggerFunc");
    }

    TriggerExecute(auto_gf_initdisplaytalentsetcasMinerals_Trigger, false, false);
}

bool auto_gf_initdisplaytalentsetcasMinerals_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while(true){
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, gv_talentpointsavailable[lv_i-1]);
            PlayerModifyPropertyInt(lv_i, c_playerPropVespene, c_playerPropOperSetTo, gv_rewardUnspend[lv_i]);
            PlayerModifyPropertyInt(lv_i, c_playerPropSuppliesMade, c_playerPropOperSetTo, gv_upgradesAvailable);
        }
        else {
            PlayerModifyPropertyInt(lv_i, c_playerPropMinerals, c_playerPropOperSetTo, 0);
            PlayerModifyPropertyInt(lv_i, c_playerPropVespene, c_playerPropOperSetTo, 0);
            PlayerModifyPropertyInt(lv_i, c_playerPropSuppliesUsed, c_playerPropOperSetTo, 0);
        }
    }
    Wait(1.0, c_timeGame);
    }
    return true;
}

string gf_NumberToHeroName (int lp_herotypenumber, int lp_add) {
    // Variable Declarations
    string lv_ls;

    // Automatic Variable Declarations
    int auto344FEF0A_val;

    // Variable Initialization
    lv_ls = "";

    // Implementation
    auto344FEF0A_val = lp_herotypenumber;
    if (auto344FEF0A_val == 0) {
        lv_ls = "Fire";
    }
    else if (auto344FEF0A_val == 1) {
        lv_ls = "Lightning";
    }
    else if (auto344FEF0A_val == 2) {
        lv_ls = "Poison";
    }
    else if (auto344FEF0A_val == 3) {
        lv_ls = "Shadow";
    }
    else if (auto344FEF0A_val == 4) {
        lv_ls = "Warp";
    }
    else if (auto344FEF0A_val == 5) {
        lv_ls = "Particle";
    }
    else if (auto344FEF0A_val == 6) {
        lv_ls = "Twilight";
    }
    else if (auto344FEF0A_val == 7) {
        lv_ls = "Time";
    }
    else if (auto344FEF0A_val == 8) {
        lv_ls = "Water";
    }
    else if (auto344FEF0A_val == 9) {
        lv_ls = "Earth";
    }
    else if (auto344FEF0A_val == 10) {
        lv_ls = "Air";
    }
    else if (auto344FEF0A_val == 11) {
        lv_ls = "Gravity";
    }
    else if (auto344FEF0A_val == 12) {
        lv_ls = "Gateway";
    }
    else if (auto344FEF0A_val == 13) {
        lv_ls = "Nature";
    }
    else if (auto344FEF0A_val == 14) {
        lv_ls = "Elemental";
    }
    else if (auto344FEF0A_val == 15) {
        lv_ls = "Illusion";
    }
    else if (auto344FEF0A_val == 16) {
        lv_ls = "Luck";
    }
    else if (auto344FEF0A_val == 17) {
        lv_ls = "Probe";
    }
    else if (auto344FEF0A_val == 18) {
        lv_ls = "Blade";
    }
    else if (auto344FEF0A_val == 19) {
        lv_ls = "Beam";
    }
    else {
    }
    if ((lp_add == 1)) {
        lv_ls = (", " + lv_ls);
    }

    return lv_ls;
}

void gf_initteleportdialog () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    DialogCreate(600, 1000, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/B44D6DFB"));
    gv_teleportdialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    while ((lv_i < 12)) {
        libNtve_gf_CreateDialogItemButton(gv_teleportdialog, 500, 50, c_anchorTopLeft, 50, 100+(lv_i*50), StringToText(""), (StringExternal("Param/Value/7619401C") + IntToText(lv_i)), "");
        gv_teleportdialogbuttons[lv_i-1] = DialogControlLastCreated();
        lv_i += 1;
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[0], PlayerGroupAll(), true);
}

void gf_TeleportDialogOpenAfterDeath (int lp_pnum) {
    // Automatic Variable Declarations
    // Implementation
    if ((DialogIsVisible(gv_teleportdialog, lp_pnum) == true)) {
    }
    else {
        gf_DialogHideAll(lp_pnum);
        DialogSetVisible(gv_teleportdialog, PlayerGroupSingle(lp_pnum), true);
    }
}

trigger auto_gf_TeleportHideShow_Trigger = null;
unit auto_gf_TeleportHideShow_lp_hero;

void gf_TeleportHideShow (unit lp_hero) {
    auto_gf_TeleportHideShow_lp_hero = lp_hero;

    if (auto_gf_TeleportHideShow_Trigger == null) {
        auto_gf_TeleportHideShow_Trigger = TriggerCreate("auto_gf_TeleportHideShow_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeleportHideShow_Trigger, false, false);
}

bool auto_gf_TeleportHideShow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_gf_TeleportHideShow_lp_hero;

    // Variable Declarations
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pg = PlayerGroupSingle(UnitGetOwner(lp_hero));

    // Implementation
    while ((UnitIsAlive(lp_hero) == true)) {
        if (((UnitGroupCount(UnitGroup("Pylon", 5, RegionCircle(UnitGetPosition(lp_hero), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (gv_pylondownteleport == true))) {
            DialogControlSetVisible(libNtve_gf_ScreenButton(34), lv_pg, true);
        }
        else {
            DialogControlSetVisible(libNtve_gf_ScreenButton(34), lv_pg, false);
            DialogSetVisible(gv_teleportdialog, lv_pg, false);
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_initAchievementdialog () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(1400, 750, c_anchorCenter, 0, 0, true);
    gv_zachievementDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_zachievementDialog, 100, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/8B38B9F0"), StringExternal("Param/Value/4A54E83E"), "");
    gv_zachievementObjects[lv_i] = DialogControlLastCreated();
    lv_i += 1;
    libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 400, 50, c_anchorTop, 0, 50, StringExternal("Param/Value/7838E4DC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_zachievementObjects[100] = DialogControlLastCreated();
    while ((lv_i < 7)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 75, (lv_i*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 13)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 325, ((lv_i-6)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 21)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 550, ((lv_i-12)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 24)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 75, ((lv_i-14)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 25)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 550, ((lv_i-15)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 29)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 325, ((lv_i-18)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 30)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 75, ((lv_i-19)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 32)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 550, ((lv_i-20)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 33)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 75, ((lv_i-21)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 35)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 325, ((lv_i-22)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 36)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 75, ((lv_i-23)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 37)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 550, ((lv_i-24)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 49)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 775, ((lv_i-36)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 61)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 1000, ((lv_i-48)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    while ((lv_i < 73)) {
        libNtve_gf_CreateDialogItemLabel(gv_zachievementDialog, 200, 50, c_anchorTopLeft, 1200, ((lv_i-60)*50)+100, gf_achievementgettext(true, lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_zachievementObjects[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), gf_achievementgettext(false, lv_i), PlayerGroupAll());
        lv_i += 1;
    }
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            gv_zachievementscounterstart[lv_i] = gf_bankgetint(gv_zbanks[lv_i], "7", "acm");
            gv_zachievementscounterstart[(lv_i + 4)] = gf_bankgetint(gv_zbanks[lv_i], "8", "acm");
            if ((gv_zachievementscounterstart[lv_i] >= 2000000)) {
                BankValueSetFromInt(gv_zbanks[lv_i], "acm", "7", 2000000);
                gv_zachievementscounterstart[lv_i] = 2000000;
            }

            if ((gv_zachievementscounterstart[lv_i] < 100)) {
                gv_killAchLevel[lv_i] = 0;
            }
            else {
                if ((gv_zachievementscounterstart[lv_i] < 1000)) {
                    gv_killAchLevel[lv_i] = 1;
                }
                else {
                    if ((gv_zachievementscounterstart[lv_i] < 10000)) {
                        gv_killAchLevel[lv_i] = 2;
                    }
                    else {
                        if ((gv_zachievementscounterstart[lv_i] < 100000)) {
                            gv_killAchLevel[lv_i] = 3;
                        }
                        else {
                            if ((gv_zachievementscounterstart[lv_i] < 1000000)) {
                                gv_killAchLevel[lv_i] = 4;
                            }
                            else {
                                gv_killAchLevel[lv_i] = 5;
                            }
                        }
                    }
                }
            }
            if ((gv_zachievementscounterstart[(lv_i + 4)] >= 200000)) {
                BankValueSetFromInt(gv_zbanks[lv_i], "acm", "8", 200000);
                gv_zachievementscounterstart[(lv_i + 4)] = 200000;
            }

            if ((gv_zachievementscounterstart[(lv_i + 4)] < 10)) {
                gv_questAchLevel[lv_i] = 0;
            }
            else {
                if ((gv_zachievementscounterstart[(lv_i + 4)] < 100)) {
                    gv_questAchLevel[lv_i] = 1;
                }
                else {
                    if ((gv_zachievementscounterstart[(lv_i + 4)] < 1000)) {
                        gv_questAchLevel[lv_i] = 2;
                    }
                    else {
                        if ((gv_zachievementscounterstart[(lv_i + 4)] < 10000)) {
                            gv_questAchLevel[lv_i] = 3;
                        }
                        else {
                            if ((gv_zachievementscounterstart[(lv_i + 4)] < 100000)) {
                                gv_questAchLevel[lv_i] = 4;
                            }
                            else {
                                gv_questAchLevel[lv_i] = 5;
                            }
                        }
                    }
                }
            }
        }

    }
}

text gf_achievementgettext (bool lp_title, int lp_number) {
    // Automatic Variable Declarations
    int auto774847E8_val;
    int autoE7D5C77D_val;

    // Implementation
    if ((lp_title == true)) {
        autoE7D5C77D_val = lp_number;
        if (autoE7D5C77D_val == 0) {
            return StringExternal("Param/Value/389A43CC");
        }
        else if (autoE7D5C77D_val == 1) {
            return StringExternal("Param/Value/6631F8F0");
        }
        else if (autoE7D5C77D_val == 2) {
            return StringExternal("Param/Value/ED061408");
        }
        else if (autoE7D5C77D_val == 3) {
            return StringExternal("Param/Value/34077A7C");
        }
        else if (autoE7D5C77D_val == 4) {
            return StringExternal("Param/Value/E14752B6");
        }
        else if (autoE7D5C77D_val == 5) {
            return StringExternal("Param/Value/AC75BE5C");
        }
        else if (autoE7D5C77D_val == 6) {
            return StringExternal("Param/Value/BA9F2736");
        }
        else if (autoE7D5C77D_val == 7) {
            return StringExternal("Param/Value/3C677BEA");
        }
        else if (autoE7D5C77D_val == 8) {
            return StringExternal("Param/Value/963B54CC");
        }
        else if (autoE7D5C77D_val == 9) {
            return StringExternal("Param/Value/2F60334A");
        }
        else if (autoE7D5C77D_val == 10) {
            return StringExternal("Param/Value/3425CC0E");
        }
        else if (autoE7D5C77D_val == 11) {
            return StringExternal("Param/Value/ACE8538B");
        }
        else if (autoE7D5C77D_val == 12) {
            return StringExternal("Param/Value/473B3BCE");
        }
        else if (autoE7D5C77D_val == 13) {
            return StringExternal("Param/Value/7C14E7F5");
        }
        else if (autoE7D5C77D_val == 14) {
            return StringExternal("Param/Value/584321A1");
        }
        else if (autoE7D5C77D_val == 15) {
            return StringExternal("Param/Value/408BC622");
        }
        else if (autoE7D5C77D_val == 16) {
            return StringExternal("Param/Value/44BED36E");
        }
        else if (autoE7D5C77D_val == 17) {
            return StringExternal("Param/Value/5FD183E1");
        }
        else if (autoE7D5C77D_val == 18) {
            return StringExternal("Param/Value/ECAD768F");
        }
        else if (autoE7D5C77D_val == 19) {
            return StringExternal("Param/Value/C09FDC2B");
        }
        else if (autoE7D5C77D_val == 20) {
            return StringExternal("Param/Value/D9E22A0A");
        }
        else if (autoE7D5C77D_val == 21) {
            return StringExternal("Param/Value/39A13E9E");
        }
        else if (autoE7D5C77D_val == 22) {
            return StringExternal("Param/Value/0A20FB7B");
        }
        else if (autoE7D5C77D_val == 23) {
            return StringExternal("Param/Value/EBEEF22F");
        }
        else if (autoE7D5C77D_val == 24) {
            return StringExternal("Param/Value/968BE583");
        }
        else if (autoE7D5C77D_val == 25) {
            return StringExternal("Param/Value/D9018F10");
        }
        else if (autoE7D5C77D_val == 26) {
            return StringExternal("Param/Value/3F02BDF2");
        }
        else if (autoE7D5C77D_val == 27) {
            return StringExternal("Param/Value/BAD9B22D");
        }
        else if (autoE7D5C77D_val == 28) {
            return StringExternal("Param/Value/BD003DF2");
        }
        else if (autoE7D5C77D_val == 29) {
            return StringExternal("Param/Value/360A17B5");
        }
        else if (autoE7D5C77D_val == 30) {
            return StringExternal("Param/Value/04C23DAA");
        }
        else if (autoE7D5C77D_val == 31) {
            return StringExternal("Param/Value/DA639E40");
        }
        else if (autoE7D5C77D_val == 32) {
            return StringExternal("Param/Value/204C49B4");
        }
        else if (autoE7D5C77D_val == 33) {
            return StringExternal("Param/Value/C2F7FD86");
        }
        else if (autoE7D5C77D_val == 34) {
            return StringExternal("Param/Value/0F12ED6A");
        }
        else if (autoE7D5C77D_val == 35) {
            return StringExternal("Param/Value/8B0037FB");
        }
        else if (autoE7D5C77D_val == 36) {
            return StringExternal("Param/Value/1FC83D94");
        }
        else if (autoE7D5C77D_val == 37) {
            return StringExternal("Param/Value/2C5FBF8B");
        }
        else if (autoE7D5C77D_val == 38) {
            return StringExternal("Param/Value/D55D44B3");
        }
        else if (autoE7D5C77D_val == 39) {
            return StringExternal("Param/Value/35280144");
        }
        else if (autoE7D5C77D_val == 40) {
            return StringExternal("Param/Value/3487D1D6");
        }
        else if (autoE7D5C77D_val == 41) {
            return StringExternal("Param/Value/FDA236F6");
        }
        else if (autoE7D5C77D_val == 42) {
            return StringExternal("Param/Value/04E35F11");
        }
        else if (autoE7D5C77D_val == 43) {
            return StringExternal("Param/Value/22F715CC");
        }
        else if (autoE7D5C77D_val == 44) {
            return StringExternal("Param/Value/0085DE19");
        }
        else if (autoE7D5C77D_val == 45) {
            return StringExternal("Param/Value/DDCA232B");
        }
        else if (autoE7D5C77D_val == 46) {
            return StringExternal("Param/Value/238F12DE");
        }
        else if (autoE7D5C77D_val == 47) {
            return StringExternal("Param/Value/FF4F486E");
        }
        else if (autoE7D5C77D_val == 48) {
            return StringExternal("Param/Value/FD5474D4");
        }
        else if (autoE7D5C77D_val == 49) {
            return StringExternal("Param/Value/BAEA351B");
        }
        else if (autoE7D5C77D_val == 50) {
            return StringExternal("Param/Value/5FC2EDAB");
        }
        else if (autoE7D5C77D_val == 51) {
            return StringExternal("Param/Value/8A90FD30");
        }
        else if (autoE7D5C77D_val == 52) {
            return StringExternal("Param/Value/DD4C0A27");
        }
        else if (autoE7D5C77D_val == 53) {
            return StringExternal("Param/Value/71AF53DA");
        }
        else if (autoE7D5C77D_val == 54) {
            return StringExternal("Param/Value/B584F900");
        }
        else if (autoE7D5C77D_val == 55) {
            return StringExternal("Param/Value/99C96D64");
        }
        else if (autoE7D5C77D_val == 56) {
            return StringExternal("Param/Value/C1D1EF14");
        }
        else if (autoE7D5C77D_val == 57) {
            return StringExternal("Param/Value/DEA322D5");
        }
        else if (autoE7D5C77D_val == 58) {
            return StringExternal("Param/Value/FB373008");
        }
        else if (autoE7D5C77D_val == 59) {
            return StringExternal("Param/Value/72D2F99E");
        }
        else if (autoE7D5C77D_val == 60) {
            return StringExternal("Param/Value/02DE066A");
        }
        else if (autoE7D5C77D_val == 61) {
            return StringExternal("Param/Value/9E3A48EA");
        }
        else if (autoE7D5C77D_val == 62) {
            return StringExternal("Param/Value/4B7D41DD");
        }
        else if (autoE7D5C77D_val == 63) {
            return StringExternal("Param/Value/3B7473A6");
        }
        else if (autoE7D5C77D_val == 64) {
            return StringExternal("Param/Value/CFD353C5");
        }
        else if (autoE7D5C77D_val == 65) {
            return StringExternal("Param/Value/BA59A09E");
        }
        else if (autoE7D5C77D_val == 66) {
            return StringExternal("Param/Value/5A876367");
        }
        else if (autoE7D5C77D_val == 67) {
            return StringExternal("Param/Value/34FD60A4");
        }
        else if (autoE7D5C77D_val == 68) {
            return StringExternal("Param/Value/4781410C");
        }
        else if (autoE7D5C77D_val == 69) {
            return StringExternal("Param/Value/03BC185C");
        }
        else if (autoE7D5C77D_val == 70) {
            return StringExternal("Param/Value/6E12C1A5");
        }
        else if (autoE7D5C77D_val == 71) {
            return StringExternal("Param/Value/5638C496");
        }
        else if (autoE7D5C77D_val == 72) {
            return StringExternal("Param/Value/C380D8B4");
        }
        else {
            return StringExternal("Param/Value/45671E85");
        }
    }
    else {
        auto774847E8_val = lp_number;
        if (auto774847E8_val == 0) {
            return StringExternal("Param/Value/0C0881DD");
        }
        else if (auto774847E8_val == 1) {
            return (StringExternal("Param/Value/08A1627F") + gf_achievementtimelimits(lp_number, 1, 5) + gf_achievementtimelimits(lp_number, 2, 4) + gf_achievementtimelimits(lp_number, 4, 3) + gf_achievementtimelimits(lp_number, 8, 2) + gf_achievementtimelimits(lp_number, 16, 1));
        }
        else if (auto774847E8_val == 2) {
            return (StringExternal("Param/Value/06057DEF") + gf_achievementtimelimits(lp_number, 1, 5) + gf_achievementtimelimits(lp_number, 2, 4) + gf_achievementtimelimits(lp_number, 4, 3) + gf_achievementtimelimits(lp_number, 8, 2) + gf_achievementtimelimits(lp_number, 16, 1));
        }
        else if (auto774847E8_val == 3) {
            return (StringExternal("Param/Value/D8AECE0C") + gf_achievementtimelimits(lp_number, 1, 5) + gf_achievementtimelimits(lp_number, 2, 4) + gf_achievementtimelimits(lp_number, 4, 3) + gf_achievementtimelimits(lp_number, 8, 2) + gf_achievementtimelimits(lp_number, 16, 1));
        }
        else if (auto774847E8_val == 4) {
            return (StringExternal("Param/Value/5C4F84DD") + gf_achievementtimelimits(lp_number, 1, 5) + gf_achievementtimelimits(lp_number, 2, 4) + gf_achievementtimelimits(lp_number, 4, 3) + gf_achievementtimelimits(lp_number, 8, 2) + gf_achievementtimelimits(lp_number, 16, 1));
        }
        else if (auto774847E8_val == 5) {
            return (StringExternal("Param/Value/A9A8DA2C") + gf_achievementtimelimits(lp_number, 1, 5) + gf_achievementtimelimits(lp_number, 2, 4) + gf_achievementtimelimits(lp_number, 4, 3) + gf_achievementtimelimits(lp_number, 8, 2) + gf_achievementtimelimits(lp_number, 16, 1));
        }
        else if (auto774847E8_val == 6) {
            return StringExternal("Param/Value/15EA5EB7");
        }
        else if (auto774847E8_val == 7) {
            return (StringExternal("Param/Value/3472B08F") + IntToText(0));
        }
        else if (auto774847E8_val == 8) {
            return StringExternal("Param/Value/FEE95141");
        }
        else if (auto774847E8_val == 9) {
            return StringExternal("Param/Value/5DB5A66F");
        }
        else if (auto774847E8_val == 10) {
            return StringExternal("Param/Value/73F09363");
        }
        else if (auto774847E8_val == 11) {
            return StringExternal("Param/Value/E58D6B69");
        }
        else if (auto774847E8_val == 12) {
            return StringExternal("Param/Value/50AC33A5");
        }
        else if (auto774847E8_val == 13) {
            return StringExternal("Param/Value/D589EBAB");
        }
        else if (auto774847E8_val == 14) {
            return StringExternal("Param/Value/D965EBDB");
        }
        else if (auto774847E8_val == 15) {
            return StringExternal("Param/Value/FBB4D865");
        }
        else if (auto774847E8_val == 16) {
            return StringExternal("Param/Value/5BF19B67");
        }
        else if (auto774847E8_val == 17) {
            return StringExternal("Param/Value/050E9DAB");
        }
        else if (auto774847E8_val == 18) {
            return StringExternal("Param/Value/A0F792BC");
        }
        else if (auto774847E8_val == 19) {
            return StringExternal("Param/Value/50F29107");
        }
        else if (auto774847E8_val == 20) {
            return StringExternal("Param/Value/A3DC8B9D");
        }
        else if (auto774847E8_val == 21) {
            return StringExternal("Param/Value/2CB10597");
        }
        else if (auto774847E8_val == 22) {
            return (StringExternal("Param/Value/EE842F1E") + IntToText(gv_zevolutionspeed) + StringExternal("Param/Value/3F7C4EC3"));
        }
        else if (auto774847E8_val == 23) {
            return StringExternal("Param/Value/90EAA4DF");
        }
        else if (auto774847E8_val == 24) {
            return StringExternal("Param/Value/89A80C37");
        }
        else if (auto774847E8_val == 25) {
            return StringExternal("Param/Value/134342C8");
        }
        else if (auto774847E8_val == 26) {
            return StringExternal("Param/Value/A43495B8");
        }
        else if (auto774847E8_val == 27) {
            return StringExternal("Param/Value/BD23936D");
        }
        else if (auto774847E8_val == 28) {
            return StringExternal("Param/Value/29B0BD79");
        }
        else if (auto774847E8_val == 29) {
            return StringExternal("Param/Value/E975372A");
        }
        else if (auto774847E8_val == 30) {
            return StringExternal("Param/Value/CB849323");
        }
        else if (auto774847E8_val == 31) {
            return StringExternal("Param/Value/7E0E90C3");
        }
        else if (auto774847E8_val == 32) {
            return StringExternal("Param/Value/C72FF61E");
        }
        else if (auto774847E8_val == 33) {
            return StringExternal("Param/Value/82A2BD58");
        }
        else if (auto774847E8_val == 34) {
            return StringExternal("Param/Value/82B4D4A6");
        }
        else if (auto774847E8_val == 35) {
            return StringExternal("Param/Value/9B9088AC");
        }
        else if (auto774847E8_val == 36) {
            return StringExternal("Param/Value/BC77836D");
        }
        else if (auto774847E8_val == 37) {
            return StringExternal("Param/Value/DBFC2FC9");
        }
        else if (auto774847E8_val == 38) {
            return StringExternal("Param/Value/BC6FE83A");
        }
        else if (auto774847E8_val == 39) {
            return StringExternal("Param/Value/303B61DD");
        }
        else if (auto774847E8_val == 40) {
            return StringExternal("Param/Value/7909DC34");
        }
        else if (auto774847E8_val == 41) {
            return StringExternal("Param/Value/B3CE87AA");
        }
        else if (auto774847E8_val == 42) {
            return StringExternal("Param/Value/07EFD883");
        }
        else if (auto774847E8_val == 43) {
            return StringExternal("Param/Value/77E491E6");
        }
        else if (auto774847E8_val == 44) {
            return StringExternal("Param/Value/BF61FA79");
        }
        else if (auto774847E8_val == 45) {
            return StringExternal("Param/Value/C42CB445");
        }
        else if (auto774847E8_val == 46) {
            return StringExternal("Param/Value/06AAD9C9");
        }
        else if (auto774847E8_val == 47) {
            return StringExternal("Param/Value/6B223884");
        }
        else if (auto774847E8_val == 48) {
            return StringExternal("Param/Value/CC564F95");
        }
        else if (auto774847E8_val == 49) {
            return StringExternal("Param/Value/EDB3A30C");
        }
        else if (auto774847E8_val == 50) {
            return StringExternal("Param/Value/3228FFA4");
        }
        else if (auto774847E8_val == 51) {
            return StringExternal("Param/Value/0C41C4E5");
        }
        else if (auto774847E8_val == 52) {
            return StringExternal("Param/Value/40E5C974");
        }
        else if (auto774847E8_val == 53) {
            return StringExternal("Param/Value/1818F638");
        }
        else if (auto774847E8_val == 54) {
            return StringExternal("Param/Value/D0147DB3");
        }
        else if (auto774847E8_val == 55) {
            return StringExternal("Param/Value/EECDF6FF");
        }
        else if (auto774847E8_val == 56) {
            return StringExternal("Param/Value/41CAD975");
        }
        else if (auto774847E8_val == 57) {
            return StringExternal("Param/Value/C043B972");
        }
        else if (auto774847E8_val == 58) {
            return StringExternal("Param/Value/8FA39263");
        }
        else if (auto774847E8_val == 59) {
            return StringExternal("Param/Value/C6921958");
        }
        else if (auto774847E8_val == 60) {
            return StringExternal("Param/Value/82F84D04");
        }
        else if (auto774847E8_val == 61) {
            return StringExternal("Param/Value/36140616");
        }
        else if (auto774847E8_val == 62) {
            return StringExternal("Param/Value/36F12742");
        }
        else if (auto774847E8_val == 63) {
            return StringExternal("Param/Value/F561C03C");
        }
        else if (auto774847E8_val == 64) {
            return StringExternal("Param/Value/96712222");
        }
        else if (auto774847E8_val == 65) {
            return StringExternal("Param/Value/A5AA3209");
        }
        else if (auto774847E8_val == 66) {
            return StringExternal("Param/Value/3C8C3773");
        }
        else if (auto774847E8_val == 67) {
            return StringExternal("Param/Value/FFF15752");
        }
        else if (auto774847E8_val == 68) {
            return StringExternal("Param/Value/DD75D850");
        }
        else if (auto774847E8_val == 69) {
            return StringExternal("Param/Value/24EFF878");
        }
        else if (auto774847E8_val == 70) {
            return StringExternal("Param/Value/15D91924");
        }
        else if (auto774847E8_val == 71) {
            return StringExternal("Param/Value/91DDA6F9");
        }
        else if (auto774847E8_val == 72) {
            return StringExternal("Param/Value/AC42DD3A");
        }
        else {
            return StringExternal("Param/Value/11342A36");
        }
    }
    return StringToText("");
}

text gf_achievementgetlist (bool lp_title) {
    // Variable Declarations
    text lv_localtext;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localtext = StringToText("");

    // Implementation
    while ((lv_i < 72)) {
        lv_i += 1;
        lv_localtext = (lv_localtext + IntToText(lv_i) + StringToText(" ") + gf_achievementgettext(lp_title, lv_i) + StringToText("<n/>"));
    }
    return lv_localtext;
}

void gf_achievementopen (int lp_player, int lp_targetplayer) {
    // Variable Declarations
    playergroup lv_pg;
    int lv_i;
    int lv_heroeswon;
    string lv_ls;
    int lv_killsum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pg = PlayerGroupSingle(lp_player);
    lv_heroeswon = gf_bankgetint(gv_zbanks[lp_targetplayer], "e", "acm");
    lv_ls = "";

    // Implementation
    libNtve_gf_SetDialogItemText(gv_zachievementObjects[100], (PlayerName(lp_targetplayer) + StringExternal("Param/Value/493BDA9B") + IntToText(gf_achievementpointsum(lp_targetplayer))), lv_pg);
    while ((lv_i < 72)) {
        lv_i += 1;
        libNtve_gf_SetDialogItemText(gv_zachievementObjects[lv_i], (gf_achievementgetlevelcolorcode(gf_achievementgetlevel(lp_targetplayer, lv_i)) + gf_achievementgettext(true, lv_i) + StringExternal("Param/Value/1893EEF2")), lv_pg);
    }
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[22], gf_achievementgettext(false, 22), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[7], (StringExternal("Param/Value/3ECBDF69") + IntToText(gf_bankgetint(gv_zbanks[lp_targetplayer], "7", "acm"))), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[8], (StringExternal("Param/Value/DBC01BBD") + IntToText(gf_bankgetint(gv_zbanks[lp_targetplayer], "8", "acm"))), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[9], (StringExternal("Param/Value/7CDFE03C") + IntToText(gv_zquestssolved)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[33], (gf_achievementgettext(false, 33) + StringExternal("Param/Value/E681394C") + IntToText(gv_zstageslostinmax)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[45], (gf_achievementgettext(false, 45) + StringExternal("Param/Value/FCDD7783") + IntToText(gf_bankgetint(gv_zbanks[lp_targetplayer], "m", "acm"))), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[46], (gf_achievementgettext(false, 46) + StringExternal("Param/Value/9190B4D5") + IntToText(gf_bankgetint(gv_zbanks[lp_targetplayer], "h", "acm"))), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[47], (gf_achievementgettext(false, 47) + StringExternal("Param/Value/C5D91EEB") + IntToText(gv_zacmherokillscounter)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[48], (gf_achievementgettext(false, 48) + StringExternal("Param/Value/C40A6D8D") + IntToText(gv_zacmchampionkillcounter)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[62], (gf_achievementgettext(false, 62) + StringExternal("Param/Value/00061144") + IntToText(gv_zacmOverseers)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[63], (gf_achievementgettext(false, 63) + StringExternal("Param/Value/E8CC9733") + IntToText(gv_zacmRewardsThisMatch[lp_targetplayer])), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[65], (gf_achievementgettext(false, 65) + StringExternal("Param/Value/31A3CE48") + IntToText(gv_acmProtossKills)), lv_pg);
    lv_i = 0;
    while ((lv_i < 4)) {
        if ((gv_hero[lv_i] != null)) {
            lv_killsum = (lv_killsum + libNtve_gf_UnitGetPropertyKills(gv_hero[lv_i], c_unitPropCurrent));
        }

        lv_i += 1;
    }
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[66], (gf_achievementgettext(false, 66) + StringExternal("Param/Value/A27DA640") + IntToText(lv_killsum)), lv_pg);
    lv_i=0;
    while ((lv_i < 20)) {
        if ((lv_ls != "")) {
            if(1<<lv_i & lv_heroeswon)
            {
            lv_ls = (lv_ls + gf_NumberToHeroName(lv_i, 1));
            }
        }
        else {
            if(1<<lv_i & lv_heroeswon)
            {
            lv_ls = (lv_ls + gf_NumberToHeroName(lv_i, 0));
            }
        }
        lv_i += 1;
    }
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[67], (gf_achievementgettext(false, 67) + StringExternal("Param/Value/C08B4CCB") + StringToText(lv_ls)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[70], (gf_achievementgettext(false, 70) + StringExternal("Param/Value/FDF58BF5") + IntToText(gv_xPPeriodicBonusSum)), lv_pg);
    libNtve_gf_SetDialogItemTooltip(gv_zachievementObjects[72], (gf_achievementgettext(false, 72) + StringExternal("Param/Value/D9DA4CAA") + IntToText(gv_zacmTreasures)), lv_pg);
}

trigger auto_gf_achievementnew_Trigger = null;
int auto_gf_achievementnew_lp_player;
int auto_gf_achievementnew_lp_achievement;

void gf_achievementnew (int lp_player, int lp_achievement) {
    auto_gf_achievementnew_lp_player = lp_player;
    auto_gf_achievementnew_lp_achievement = lp_achievement;

    if (auto_gf_achievementnew_Trigger == null) {
        auto_gf_achievementnew_Trigger = TriggerCreate("auto_gf_achievementnew_TriggerFunc");
    }

    TriggerExecute(auto_gf_achievementnew_Trigger, false, false);
}

bool auto_gf_achievementnew_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_achievementnew_lp_player;
    int lp_achievement = auto_gf_achievementnew_lp_achievement;

    // Variable Declarations
    int lv_level;
    int lv_d;
    fixed lv_t;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d = c_invalidDialogId;
    lv_player = lp_player;

    // Implementation
    if ((lp_achievement != 7) && (lp_achievement != 8)) {
        gf_achievementnewtobank(lp_achievement, lp_player);
    }

    if ((lp_achievement == 7)) {
        gv_killAchLevel[lp_player] = MinI((gv_killAchLevel[lp_player] + 1), 5);
    }

    if ((lp_achievement == 8)) {
        gv_questAchLevel[lp_player] = MinI((gv_questAchLevel[lp_player] + 1), 5);
    }

    gf_banksetc(lp_player, gv_zbanks[lp_player]);
    lv_level = gf_achievementgetlevel(lv_player, lp_achievement);
    gf_achievementTeam(lp_player);
    while (!((gv_zachievementinprogress[lv_player] == false))) {
        Wait(0.5, c_timeGame);
    }
    gv_zachievementinprogress[lv_player] = true;
    DialogCreate(200, 200, c_anchorCenter, -500+(200*lv_player), 200, true);
    lv_d = DialogLastCreated();
    SoundPlay(SoundLink("UI_BNet_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_CreateDialogItemLabel(lv_d, 150, 50, c_anchorTopLeft, 30, 50, PlayerName(lv_player), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(lv_d, 150, 100, c_anchorTopLeft, 30, 125, (gf_achievementgetlevelcolorcode(lv_level) + gf_achievementgettext(true, lp_achievement) + StringExternal("Param/Value/6A0DB648")), ColorWithAlpha(0,0,0,0), false, 2.0);
    DialogSetVisible(lv_d, PlayerGroupAll(), true);
    Wait(0.5, c_timeGame);
    while ((lv_t < 100.0)) {
        DialogSetTransparency(lv_d, lv_t);
        lv_t += 1.0;
        Wait(0.0625, c_timeGame);
    }
    DialogDestroy(lv_d);
    gv_zachievementinprogress[lv_player] = false;
    if ((gf_achievementpointsum(lp_player) >= gf_achievementgetvalueofnextlevel(41, lp_player))) {
        gf_achievementnew(lp_player, 41);
    }

    return true;
}

void gf_achievementnewtobank (int lp_achievement, int lp_player) {
    // Variable Declarations
    int lv_lvl1;
    int lv_lvl2;
    string lv_tempstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempstring = "";

    // Implementation
    if ((ModI(lp_achievement, 2) == 1)) {
        lv_lvl1 = gf_achievementgetlevel(lp_player, lp_achievement);
        lv_lvl2 = gf_achievementgetlevel(lp_player, lp_achievement+1);
        lv_lvl1 += 1;
    }
    else {
        lv_lvl1 = gf_achievementgetlevel(lp_player, lp_achievement-1);
        lv_lvl2 = gf_achievementgetlevel(lp_player, lp_achievement);
        lv_lvl2 += 1;
    }
    lv_tempstring = BankValueGetAsString(gv_zbanks[lp_player], "acm", "a");
    if ((lp_achievement > 2)) {
        BankValueSetFromString(gv_zbanks[lp_player], "acm", "a", (StringSub(lv_tempstring, 1, (lp_achievement-1)/2) + gf_decto45((lv_lvl1 + (lv_lvl2 * 8))) + StringSub(lv_tempstring, ((lp_achievement+1)/2)+1, StringLength(lv_tempstring))));
    }
    else {
        BankValueSetFromString(gv_zbanks[lp_player], "acm", "a", ("" + gf_decto45((lv_lvl1 + (lv_lvl2 * 8))) + StringSub(lv_tempstring, 2, StringLength(lv_tempstring))));
    }
    BankSave(gv_zbanks[lp_player]);
}

void gf_achievementTeam (int lp_player) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive) && (lp_player != lv_i)) {
            gf_bankaddtoint(gv_zbanks[lv_i], "h", "acm", 1);
            if ((gf_bankgetint(gv_zbanks[lv_i], "h", "acm") >= gf_achievementgetvalueofnextlevel(46, lv_i))) {
                gf_achievementnew(lv_i, 46);
            }

        }

    }
}

int gf_achievementpointsum (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 72)) {
        lv_i += 1;
        lv_k += gf_achievementgetlevel(lp_player, lv_i);
    }
    return lv_k;
}

void gf_achievementPossiblyGainedTeam (int lp_achievementnumber, int lp_amounttocheckfor) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i+=1;
        while ((PlayerStatus(lv_i) == c_playerStatusActive) && (gf_achievementgetvalueofnextleveladd(lp_achievementnumber, lv_i, 0) <= lp_amounttocheckfor)) {
            gf_achievementnew(lv_i, lp_achievementnumber);
        }
    }
}

void gf_achievementPossiblyGainedTeamLessThan (int lp_achievementnumber, int lp_amounttocheckfor) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i+=1;
        while ((PlayerStatus(lv_i) == c_playerStatusActive) && (gf_achievementgetvalueofnextleveladd(lp_achievementnumber, lv_i, 0) >= lp_amounttocheckfor)) {
            gf_achievementnew(lv_i, lp_achievementnumber);
        }
    }
}

void gf_achievementPossiblyGainedSolo (int lp_achievementnumber, int lp_amounttocheckfor, int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    while ((PlayerStatus(lp_i) == c_playerStatusActive) && (gf_achievementgetvalueofnextleveladd(lp_achievementnumber, lp_i, 0) <= lp_amounttocheckfor)) {
        gf_achievementnew(lp_i, lp_achievementnumber);
    }
}

int gf_achievementgetvalueofnextlevel (int lp_achievement, int lp_player) {
    // Variable Declarations
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return gf_achievementgetvalueofnextleveladd(lp_achievement, lp_player, 0);
}

int gf_achievementgetvalueofnextleveladd (int lp_achievement, int lp_player, int lp_add) {
    // Variable Declarations
    int lv_k;

    // Automatic Variable Declarations
    int auto8A75F68C_val;
    int auto88A8F7DD_val;
    int auto42FAD777_val;
    int auto830FBECF_val;
    int auto754CF226_val;
    int auto8FD559C2_val;
    int auto47C54C7F_val;

    // Variable Initialization

    // Implementation
    lv_k = gf_achievementgetlevel(lp_player, lp_achievement)+lp_add;
    if ((lp_achievement < 6)) {
        if ((gf_achievementgetlevel(lp_player, lp_achievement) < 5)) {
            return (gv_zrecordtimes[FixedToInt(gv_difficulty)] * PowI(2.0, (4.0 - IntToFixed(gf_achievementgetlevel(lp_player, lp_achievement)))));
        }
        else {
            return 0;
        }
    }

    if ((lp_achievement == 7)) {
        auto8A75F68C_val = gv_killAchLevel[lp_player];
        if (auto8A75F68C_val == 0) {
            return 100;
        }
        else if (auto8A75F68C_val == 1) {
            return 1000;
        }
        else if (auto8A75F68C_val == 2) {
            return 10000;
        }
        else if (auto8A75F68C_val == 3) {
            return 100000;
        }
        else if (auto8A75F68C_val == 4) {
            return 1000000;
        }
        else {
            return 100000000;
        }
    }

    if ((lp_achievement == 8)) {
        auto88A8F7DD_val = gv_questAchLevel[lp_player];
        if (auto88A8F7DD_val == 0) {
            return 10;
        }
        else if (auto88A8F7DD_val == 1) {
            return 100;
        }
        else if (auto88A8F7DD_val == 2) {
            return 1000;
        }
        else if (auto88A8F7DD_val == 3) {
            return 10000;
        }
        else if (auto88A8F7DD_val == 4) {
            return 100000;
        }
        else {
            return 100000000;
        }
    }

    if ((lp_achievement == 9)) {
        auto42FAD777_val = lv_k;
        if (auto42FAD777_val == 0) {
            return 50;
        }
        else if (auto42FAD777_val == 1) {
            return 100;
        }
        else if (auto42FAD777_val == 2) {
            return 175;
        }
        else if (auto42FAD777_val == 3) {
            return 250;
        }
        else if (auto42FAD777_val == 4) {
            return 500;
        }
        else if (auto42FAD777_val == 5) {
            return 100000000;
        }
        else {
        }
    }

    if ((lp_achievement == 10)) {
        auto830FBECF_val = lv_k;
        if (auto830FBECF_val == 0) {
            return 1000;
        }
        else if (auto830FBECF_val == 1) {
            return 5000;
        }
        else if (auto830FBECF_val == 2) {
            return 10000;
        }
        else if (auto830FBECF_val == 3) {
            return 25000;
        }
        else if (auto830FBECF_val == 4) {
            return 50000;
        }
        else if (auto830FBECF_val == 5) {
            return 100000000;
        }
        else {
        }
    }

    if ((lp_achievement == 11)) {
        if ((lv_k < 5)) {
            return 20+(5*lv_k);
        }
        else {
            return 1000000;
        }
    }

    if ((lp_achievement == 39)) {
        if ((lv_k < 5)) {
            return (50*(lv_k+1));
        }
        else {
            return 1000000;
        }
    }

    if ((lp_achievement == 41)) {
        if ((lv_k < 5)) {
            return ((lv_k+1)*40)-1;
        }
        else {
            return 1000000;
        }
    }

    if ((lp_achievement == 44)) {
        auto754CF226_val = lv_k;
        if (auto754CF226_val == 0) {
            return 500;
        }
        else if (auto754CF226_val == 1) {
            return 5000;
        }
        else if (auto754CF226_val == 2) {
            return 25000;
        }
        else if (auto754CF226_val == 3) {
            return 75000;
        }
        else if (auto754CF226_val == 4) {
            return 150000;
        }
        else if (auto754CF226_val == 5) {
            return 100000000;
        }
        else {
        }
    }

    if ((lp_achievement == 45)) {
        auto8FD559C2_val = lv_k;
        if (auto8FD559C2_val == 0) {
            return 100;
        }
        else if (auto8FD559C2_val == 1) {
            return 250;
        }
        else if (auto8FD559C2_val == 2) {
            return 500;
        }
        else if (auto8FD559C2_val == 3) {
            return 1000;
        }
        else if (auto8FD559C2_val == 4) {
            return 2000;
        }
        else if (auto8FD559C2_val == 5) {
            return 100000000;
        }
        else {
        }
    }

    if ((lp_achievement == 46)) {
        auto47C54C7F_val = lv_k;
        if (auto47C54C7F_val == 0) {
            return 50;
        }
        else if (auto47C54C7F_val == 1) {
            return 125;
        }
        else if (auto47C54C7F_val == 2) {
            return 250;
        }
        else if (auto47C54C7F_val == 3) {
            return 500;
        }
        else if (auto47C54C7F_val == 4) {
            return 1000;
        }
        else if (auto47C54C7F_val == 5) {
            return 100000000;
        }
        else {
        }
    }

    if ((lp_achievement == 47)) {
        if ((lv_k < 5)) {
            return 10+(5*lv_k);
        }
        else {
            return 1000000;
        }
    }

    if ((lp_achievement == 48)) {
        if ((lv_k < 5)) {
            return 100+(100*lv_k);
        }
        else {
            return 1000000;
        }
    }

    if ((lp_achievement == 61)) {
        if ((lv_k < 5)) {
            return lv_k+1;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 62)) {
        if ((lv_k < 5)) {
            return ((lv_k+1)*(lv_k+1))+2;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 63)) {
        if ((lv_k < 5)) {
            return ((lv_k+1)*(lv_k+1))*500+250;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 64)) {
        if ((lv_k < 5)) {
            return 60*5*(lv_k+1);
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 65)) {
        if ((lv_k < 5)) {
            return 1000*((lv_k+1)*(lv_k+1));
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 66)) {
        if ((lv_k < 5)) {
            return 10000-(lv_k*2400);
        }
        else {
            return -10000000;
        }
    }

    if ((lp_achievement == 67)) {
        if ((lv_k < 5)) {
            return (lv_k+1)*3;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 68)) {
        if ((lv_k < 5)) {
            return 2*60*(5+((lv_k+1)*(lv_k+1)));
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 69)) {
        if ((lv_k < 5)) {
            return lv_k+1;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 70)) {
        if ((lv_k < 5)) {
            return 2000*((lv_k+1)*(lv_k+1));
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 71)) {
        if ((lv_k < 5)) {
            return lv_k+1;
        }
        else {
            return 10000000;
        }
    }

    if ((lp_achievement == 72)) {
        if ((lv_k < 5)) {
            return lv_k+1;
        }
        else {
            return 10000000;
        }
    }

    return 0;
}

int gf_achievementgetlevel (int lp_player, int lp_achievement) {
    // Variable Declarations
    int lv_k;
    int lv_i;
    int lv_loadvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        if ((lp_achievement != 7) && (lp_achievement != 8)) {
            if ((BankKeyExists(gv_zbanks[lp_player], "acm", "a") == true)) {
                if ((StringLength(BankValueGetAsString(gv_zbanks[lp_player], "acm", "a")) >= (lp_achievement+1)/2)) {
                    lv_loadvalue = gf__45todec(StringSub(BankValueGetAsString(gv_zbanks[lp_player], "acm", "a"), (lp_achievement+1)/2, (lp_achievement+1)/2));
                    return gf_split45to2(lv_loadvalue, lp_achievement);
                }
                else {
                    while ((StringLength(BankValueGetAsString(gv_zbanks[lp_player], "acm", "a")) >= (lp_achievement+1)/2)) {
                        BankValueSetFromString(gv_zbanks[lp_player], "acm", "a", (BankValueGetAsString(gv_zbanks[lp_player], "acm", "a") + "0"));
                        BankSave(gv_zbanks[lv_i]);
                    }
                    return 0;
                }
            }
            else {
                BankValueSetFromString(gv_zbanks[lp_player], "acm", "a", "00000000000000000000000000000000000");
                BankSave(gv_zbanks[lv_i]);
                return 0;
            }
        }
        else {
            if ((lp_achievement == 7)) {
                return gv_killAchLevel[lp_player];
            }
            else {
                if ((lp_achievement == 8)) {
                    return gv_questAchLevel[lp_player];
                }

            }
        }
    }
    else {
        return 0;
    }
    return 0;
}

text gf_achievementgetlevelcolorcode (int lp_acmlvl) {
    // Automatic Variable Declarations
    int autoEAEF9C0B_val;

    // Implementation
    autoEAEF9C0B_val = lp_acmlvl;
    if (autoEAEF9C0B_val == 1) {
        return StringExternal("Param/Value/0A2EE30F");
    }
    else if (autoEAEF9C0B_val == 2) {
        return StringExternal("Param/Value/ABB8F2DF");
    }
    else if (autoEAEF9C0B_val == 3) {
        return StringExternal("Param/Value/9EA7A505");
    }
    else if (autoEAEF9C0B_val == 4) {
        return StringExternal("Param/Value/1BC7C46E");
    }
    else if (autoEAEF9C0B_val == 5) {
        return StringExternal("Param/Value/9F319E4F");
    }
    else {
        return StringExternal("Param/Value/C612A19F");
    }
}

text gf_achievementcolorcodetext (text lp_text, int lp_acmlvl) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_achievementgetlevelcolorcode(lp_acmlvl) + lp_text + StringExternal("Param/Value/780A678D"));
}

text gf_achievementtimelimits (int lp_d, int lp_factor, int lp_acmlvl) {
    // Automatic Variable Declarations
    // Implementation
    return (gf_achievementcolorcodetext(gf_gametime((gv_zrecordtimes[lp_d] * lp_factor)), lp_acmlvl) + StringExternal("Param/Value/6A333068"));
}

void gf_achievementherokills () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_zacmherokillscounter += 1;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            if ((gf_achievementgetvalueofnextlevel(47, lv_i) <= gv_zacmherokillscounter)) {
                gf_achievementnew(lv_i, 47);
            }

        }

    }
}

void gf_achievements0killaward (int lp_achievement) {
    // Variable Declarations
    int lv_d;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d = FixedToInt(gv_difficulty);

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            while ((gf_achievementgetlevel(lv_i, lp_achievement) < lv_d)) {
                gf_achievementnew(lv_i, lp_achievement);
            }
        }

    }
}

void gf_achievementlowlevel (int lp_achievement) {
    // Variable Declarations
    int lv_d;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d = gf_Currentlevel();

    // Implementation
    lv_d = 5-((lv_d-22)/2);
    if ((lv_d <= 0)) {
        return;
    }

    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            while ((gf_achievementgetlevel(lv_i, lp_achievement) < lv_d) && (gf_achievementgetlevel(lv_i, lp_achievement) < 5)) {
                gf_achievementnew(lv_i, lp_achievement);
            }
        }

    }
}

void gf_achievementsforplayer (int lp_player, int lp_achievement) {
    // Variable Declarations
    int lv_d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d = FixedToInt(gv_difficulty);

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        while ((gf_achievementgetlevel(lp_player, lp_achievement) < lv_d)) {
            gf_achievementnew(lp_player, lp_achievement);
        }
    }

}

void gf_achievementretroadd (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_player) == "2-S2-1-798311") || (PlayerHandle(lp_player) == "2-S2-1-253101") || (PlayerHandle(lp_player) == "2-S2-1-1941189") || (PlayerHandle(lp_player) == ""))) {
        while ((gf_achievementgetlevel(lp_player, 5) < 5)) {
            gf_achievementnew(lp_player, 5);
        }
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-1718559") || (PlayerHandle(lp_player) == "2-S2-1-1278768") || (PlayerHandle(lp_player) == "2-S2-1-365493") || (PlayerHandle(lp_player) == "2-S2-1-798311") || (PlayerHandle(lp_player) == ""))) {
        while ((gf_achievementgetlevel(lp_player, 4) < 5)) {
            gf_achievementnew(lp_player, 4);
        }
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-1718559") || (PlayerHandle(lp_player) == "2-S2-1-1941189") || (PlayerHandle(lp_player) == "2-S2-1-411582") || (PlayerHandle(lp_player) == ""))) {
        while ((gf_achievementgetlevel(lp_player, 3) < 5)) {
            gf_achievementnew(lp_player, 3);
        }
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-1278768") || (PlayerHandle(lp_player) == "2-S2-1-798311") || (PlayerHandle(lp_player) == "2-S2-1-1929059") || (PlayerHandle(lp_player) == ""))) {
        while ((gf_achievementgetlevel(lp_player, 2) < 5)) {
            gf_achievementnew(lp_player, 2);
        }
    }

    if (((PlayerHandle(lp_player) == "2-S2-1-1278768") || (PlayerHandle(lp_player) == "2-S2-1-798311") || (PlayerHandle(lp_player) == "2-S2-1-1929059") || (PlayerHandle(lp_player) == ""))) {
        while ((gf_achievementgetlevel(lp_player, 1) < 5)) {
            gf_achievementnew(lp_player, 1);
        }
    }

}

trigger auto_gf_upgradebuttonflasher_Trigger = null;

void gf_upgradebuttonflasher () {
    if (auto_gf_upgradebuttonflasher_Trigger == null) {
        auto_gf_upgradebuttonflasher_Trigger = TriggerCreate("auto_gf_upgradebuttonflasher_TriggerFunc");
    }

    TriggerExecute(auto_gf_upgradebuttonflasher_Trigger, false, false);
}

bool auto_gf_upgradebuttonflasher_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while(true){
    if ((gv_upgradesAvailable > 0) && (gv_difficulty < 2.0)) {
        libNtve_gf_FlashScreenButton(35, 2.0, ColorWithAlpha(0.00, 0.00, 0.00, 0.00), ColorWithAlpha(100.00, 100.00, 100.00, 0.00));
    }
    else {
        libNtve_gf_StopFlashingScreenButton(35);
    }
    Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_initupgradedialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/97F9DCA4"));
    gv_upgradedialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 100, StringToText(""), StringExternal("Param/Value/C26E8759"), "");
    gv_upgradedialogbuttons[0][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 150, StringToText(""), StringExternal("Param/Value/F3D16985"), "");
    gv_upgradedialogbuttons[1][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 200, StringToText(""), StringExternal("Param/Value/45F556B3"), "");
    gv_upgradedialogbuttons[2][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 250, StringToText(""), StringExternal("Param/Value/FB2E0EA0"), "");
    gv_upgradedialogbuttons[3][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 300, StringToText(""), StringExternal("Param/Value/434EB361"), "");
    gv_upgradedialogbuttons[4][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 350, StringToText(""), StringExternal("Param/Value/0C56103D"), "");
    gv_upgradedialogbuttons[5][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 25, 400, StringToText(""), StringExternal("Param/Value/9140EACB"), "");
    gv_upgradedialogbuttons[6][0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 100, StringToText(""), StringExternal("Param/Value/B0C07E64"), "");
    gv_upgradedialogbuttons[0][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 150, StringToText(""), StringExternal("Param/Value/325A21B0"), "");
    gv_upgradedialogbuttons[1][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 200, StringToText(""), StringExternal("Param/Value/A8EBBE11"), "");
    gv_upgradedialogbuttons[2][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 250, StringToText(""), StringExternal("Param/Value/D7A86EEE"), "");
    gv_upgradedialogbuttons[3][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 300, StringToText(""), StringExternal("Param/Value/4107D69D"), "");
    gv_upgradedialogbuttons[4][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 350, StringToText(""), StringExternal("Param/Value/93914233"), "");
    gv_upgradedialogbuttons[5][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 550, 50, c_anchorTopLeft, 600, 400, StringToText(""), StringExternal("Param/Value/99A03A7D"), "");
    gv_upgradedialogbuttons[6][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_upgradedialog, 150, 50, c_anchorTopLeft, 25, 25, StringExternal("Param/Value/70BDB199"), StringExternal("Param/Value/0EB2C9E0"), "");
    gv_upgradedialogbuttons[7][0] = DialogControlLastCreated();
}

trigger auto_gf_laForge_Trigger = null;
unit auto_gf_laForge_lp_forge;

void gf_laForge (unit lp_forge) {
    auto_gf_laForge_lp_forge = lp_forge;

    if (auto_gf_laForge_Trigger == null) {
        auto_gf_laForge_Trigger = TriggerCreate("auto_gf_laForge_TriggerFunc");
    }

    TriggerExecute(auto_gf_laForge_Trigger, false, false);
}

bool auto_gf_laForge_TriggerFunc (bool testConds, bool runActions) {
    unit lp_forge = auto_gf_laForge_lp_forge;

    // Variable Declarations
    int lv_level;
    int lv_value;
    int lv_floattext;
    int lv_floattext2;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_value = 500;
    lv_floattext = c_textTagNone;
    lv_floattext2 = c_textTagNone;

    // Implementation
    TextTagCreate(StringExternal("Param/Value/0B69CFE1"), 40, Point(250,9), 1.0, true, false, PlayerGroupAll());
    lv_floattext = TextTagLastCreated();
    TextTagCreate(StringExternal("Param/Value/FF4A3C65"), 30, Point(250,8), 1.0, true, false, PlayerGroupAll());
    lv_floattext2 = TextTagLastCreated();
    while ((lv_level <= 100)) {
        if ((lv_level >= 20) && (lv_level <= 41)) {
            lv_i = 0;
            lv_j = (lv_level-15)/5;
            while ((lv_i < 4)) {
                lv_i += 1;
                if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                    if ((gf_achievementgetlevel(lv_i, 28) < lv_j)) {
                        gf_achievementnew(lv_i, 28);
                    }

                }

            }
        }

        if ((PlayerGetPropertyInt(5, c_playerPropMinerals) >= lv_value)) {
            UnitIssueOrder(lp_forge, Order(AbilityCommand("ForgeResearch", 7)), c_orderQueueReplace);
            PlayerModifyPropertyInt(5, c_playerPropMinerals, c_playerPropOperSubtract, lv_value);
            lv_value += 250+(lv_level*75);
            TextTagSetText(lv_floattext2, StringExternal("Param/Value/D2CCFB4A"));
            Wait(MaxF(2.0, (30.0 - ((gv_rewardUsed[1][9] + gv_rewardUsed[2][9] + gv_rewardUsed[3][9] + gv_rewardUsed[4][9]) * 0.3))), c_timeGame);
            lv_level += 1;
            libNtve_gf_SetUpgradeLevelForPlayer(5, "ForgeMineralUpgrade", lv_level);
            UnitIssueOrder(lp_forge, Order(AbilityCommand("que5", 0)), c_orderQueueReplace);
            TextTagSetText(lv_floattext, (StringExternal("Param/Value/7F98F8CC") + IntToText(lv_level)));
            TextTagSetText(lv_floattext2, (IntToText(((PlayerGetPropertyInt(5, c_playerPropMinerals) * 100) / lv_value)) + StringExternal("Param/Value/32BE8DD9")));
        }
        else {
            TextTagSetText(lv_floattext2, (IntToText(((PlayerGetPropertyInt(5, c_playerPropMinerals) * 100) / lv_value)) + StringExternal("Param/Value/04B65237")));
            Wait(1.0, c_timeGame);
        }
    }
    TextTagSetText(lv_floattext, StringExternal("Param/Value/2F61AE81"));
    TextTagSetText(lv_floattext2, StringExternal("Param/Value/6A55633A"));
    return true;
}

bool gf_isMod (string lp_playerhandle) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_playerhandle == "") || (lp_playerhandle == "2-S2-1-253101") || (lp_playerhandle == "2-S2-1-798311") || (lp_playerhandle == "2-S2-1-1278768") || (lp_playerhandle == "1-S2-1-4088642") || (lp_playerhandle == "2-S2-1-4436915") || (lp_playerhandle == "3-S2-1-4594647") || (lp_playerhandle == "1-S2-1-4026647") || (lp_playerhandle == "2-S2-1-8654633") || (lp_playerhandle == "3-S2-1-7518239") || (lp_playerhandle == "1-S2-1-4633870") || (lp_playerhandle == "2-S2-1-2582189") || (lp_playerhandle == "3-S2-1-7465410"))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_chatcommandstickselect_Trigger = null;
int auto_gf_chatcommandstickselect_lp_pnum;

void gf_chatcommandstickselect (int lp_pnum) {
    auto_gf_chatcommandstickselect_lp_pnum = lp_pnum;

    if (auto_gf_chatcommandstickselect_Trigger == null) {
        auto_gf_chatcommandstickselect_Trigger = TriggerCreate("auto_gf_chatcommandstickselect_TriggerFunc");
    }

    TriggerExecute(auto_gf_chatcommandstickselect_Trigger, false, false);
}

bool auto_gf_chatcommandstickselect_TriggerFunc (bool testConds, bool runActions) {
    int lp_pnum = auto_gf_chatcommandstickselect_lp_pnum;

    // Variable Declarations
    int lv_gn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gn = lp_pnum-1;

    // Implementation
    if ((gv_zstickselect[lp_pnum] == true)) {
        PlayerOptionOverride(lp_pnum, "selectuncontrolable", "0");
    }
    else {
        PlayerOptionOverride(lp_pnum, "selectuncontrolable", "1");
    }
    return true;
}

trigger auto_gf_showstatwindow_Trigger = null;
int auto_gf_showstatwindow_lp_player;

void gf_showstatwindow (int lp_player) {
    auto_gf_showstatwindow_lp_player = lp_player;

    if (auto_gf_showstatwindow_Trigger == null) {
        auto_gf_showstatwindow_Trigger = TriggerCreate("auto_gf_showstatwindow_TriggerFunc");
    }

    TriggerExecute(auto_gf_showstatwindow_Trigger, false, false);
}

bool auto_gf_showstatwindow_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_showstatwindow_lp_player;

    // Automatic Variable Declarations
    // Implementation
    if ((TriggerIsEnabled(gt_initstatwindow) == true)) {
        TriggerExecute(gt_initstatwindow, true, false);
    }

    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        DialogSetVisible(gv_zstatsdialog, PlayerGroupSingle(lp_player), true);
    }

    return true;
}

void gf_initTalentDialogs () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\credits_2017_charbattlezone.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[0] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/128B43AC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/47D696E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/5B1BBF1D"), StringExternal("Param/Value/DC2189EC"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/59AF59E8"), StringExternal("Param/Value/5A8EEF4F"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/3E1134CD"), StringExternal("Param/Value/631E54CE"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/DA9DE1CC"), StringExternal("Param/Value/865545B8"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/099C12EC"), StringExternal("Param/Value/74B5ECFA"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/90166CBE"), StringExternal("Param/Value/F62C5D5F"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/71FF8948"), StringExternal("Param/Value/883E7C30"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/B7A7A361"), StringExternal("Param/Value/652CD63F"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/F6BBE174"), StringExternal("Param/Value/7F5E4DFA"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/99AB62C8"), StringExternal("Param/Value/CDE18643"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/1B443FBF"), StringExternal("Param/Value/4ED35A58"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/C3DC4CF9"), StringExternal("Param/Value/89808E44"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/B50474CB"), StringExternal("Param/Value/22E58118"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/75900E28"), StringExternal("Param/Value/0CFF9FB4"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/E44E2D44"), StringExternal("Param/Value/888FC18A"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/8729C7BC"), StringExternal("Param/Value/CC239C98"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/0D424453"), StringExternal("Param/Value/2AC3FFF0"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/D38712CA"), StringExternal("Param/Value/3AD2DF64"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/43C7CF19"), StringExternal("Param/Value/0517AC1C"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/9419BB0C"), StringExternal("Param/Value/4ABD481E"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/B194830D"), StringExternal("Param/Value/F57F5AC3"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/02FFD5FC"), StringExternal("Param/Value/C2EECB0E"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/70F30058"), StringExternal("Param/Value/CD51EB36"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/A15956BF"), StringExternal("Param/Value/CE522E0B"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/4B4B3E3C"), StringExternal("Param/Value/AB0CD222"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_taldarim01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/827D2D6A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/0E36B10A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/2AEF4227"), StringExternal("Param/Value/5243AFCB"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/2A90337D"), StringExternal("Param/Value/3F1C4838"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/60C92060"), StringExternal("Param/Value/B8232220"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/26F4444F"), StringExternal("Param/Value/223C61E7"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/0509A022"), StringExternal("Param/Value/376AD31B"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/E228427A"), StringExternal("Param/Value/421220F9"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/A39DBC2A"), StringExternal("Param/Value/CA9ADF62"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/D2C2C8EF"), StringExternal("Param/Value/50C07CFA"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/B685A792"), StringExternal("Param/Value/E491E7E9"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/19C24839"), StringExternal("Param/Value/D36DD125"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/D4DF1105"), StringExternal("Param/Value/C22E9C20"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/106B255E"), StringExternal("Param/Value/C5C40328"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/1775B878"), StringExternal("Param/Value/87901C80"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/1D60A5D9"), StringExternal("Param/Value/489EEF2F"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/5896FB3A"), StringExternal("Param/Value/62A30917"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/4B8136A9"), StringExternal("Param/Value/26365F1C"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/0D43B820"), StringExternal("Param/Value/CB64696F"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/EBC94288"), StringExternal("Param/Value/A755B909"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/090B621C"), StringExternal("Param/Value/2123AECE"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/577DFED3"), StringExternal("Param/Value/3E717803"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/54D8FBDB"), StringExternal("Param/Value/2EFE81CC"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/CF6BAB9E"), StringExternal("Param/Value/E1072387"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/FC6B9C41"), StringExternal("Param/Value/F3E36292"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/586AD693"), StringExternal("Param/Value/5BB66F90"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 300, StringExternal("Param/Value/068A203D"), StringExternal("Param/Value/62D0F512"), "");
    gv_talentsdialogbuttons[4][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/B3FB7A60"), StringExternal("Param/Value/AE7873AB"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\evolutionbg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/234E40BF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/56576E2D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/F41FBF74"), StringExternal("Param/Value/E5A81C74"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/514DCC0B"), StringExternal("Param/Value/E4230856"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/2B3C1F68"), StringExternal("Param/Value/8E791D03"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/3803AED1"), StringExternal("Param/Value/AFD32E92"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/06BC54B6"), StringExternal("Param/Value/E09531D3"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/E2ED4CB7"), StringExternal("Param/Value/1A5D966F"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/2D83C7CF"), StringExternal("Param/Value/120BDBB1"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/D11C3B9D"), StringExternal("Param/Value/0E578662"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/AA54C44F"), StringExternal("Param/Value/F7F49B7D"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/0CAB6C43"), StringExternal("Param/Value/1CBB01C1"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/A6312763"), StringExternal("Param/Value/CB00AFEE"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/AB1F7D9D"), StringExternal("Param/Value/04955547"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/679D4CC1"), StringExternal("Param/Value/823C19AB"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/524E17FE"), StringExternal("Param/Value/CD4A2CD9"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/C7E5DCED"), StringExternal("Param/Value/2D7471C2"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/2E95A014"), StringExternal("Param/Value/E1DE654A"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/AC99A1BC"), StringExternal("Param/Value/714650D0"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/77A2BFD7"), StringExternal("Param/Value/F32C0072"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/E33398E7"), StringExternal("Param/Value/E3B53CC9"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/6307F9D5"), StringExternal("Param/Value/4F15E7D2"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/3869FF17"), StringExternal("Param/Value/2702E308"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/209E7AA5"), StringExternal("Param/Value/C52145A0"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/1E94DFAB"), StringExternal("Param/Value/BD2DEA41"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\loading-zeratul01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/EA9553D3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/262A8CEA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/493C3B41"), StringExternal("Param/Value/247D3C88"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/40CDF32C"), StringExternal("Param/Value/3662A529"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/B8460592"), StringExternal("Param/Value/D35241F8"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/890100DF"), StringExternal("Param/Value/F3F78610"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/A898FBFB"), StringExternal("Param/Value/610E764C"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/7216EECC"), StringExternal("Param/Value/5685C8D4"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/609DABD5"), StringExternal("Param/Value/1BDD6260"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/7359BD7C"), StringExternal("Param/Value/629A3931"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/244F8842"), StringExternal("Param/Value/1CC0543E"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/A35559D9"), StringExternal("Param/Value/82BCA558"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/701204B0"), StringExternal("Param/Value/5EC754AC"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/1C461111"), StringExternal("Param/Value/BBF718E5"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/E6F113B9"), StringExternal("Param/Value/DCFDAF57"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/9361ED56"), StringExternal("Param/Value/6C6C05E0"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/3A18F233"), StringExternal("Param/Value/71ECA11F"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/44245BA1"), StringExternal("Param/Value/FD3359C9"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/5A2830AB"), StringExternal("Param/Value/A0047698"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/AACA8417"), StringExternal("Param/Value/C2CEB928"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/A7D58431"), StringExternal("Param/Value/45C00D6E"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/206C1E21"), StringExternal("Param/Value/58931A47"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/954530FE"), StringExternal("Param/Value/9AE93B1C"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/794BDD85"), StringExternal("Param/Value/CE1A1A5A"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/94E85BE8"), StringExternal("Param/Value/F6DF78C1"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/DFFDCD0A"), StringExternal("Param/Value/F030D48F"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/9984852C"), StringExternal("Param/Value/86041DA3"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_aiur01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/803E5E6A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/30390C42"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/DDBFE132"), StringExternal("Param/Value/6687F07B"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/43A01FD8"), StringExternal("Param/Value/15F17AD6"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/B5C94C83"), StringExternal("Param/Value/F4C46387"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/CD3D7ECA"), StringExternal("Param/Value/1147AB79"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/D0FC7236"), StringExternal("Param/Value/504BB0DB"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/1870FA03"), StringExternal("Param/Value/9D9FE131"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/E619D3DE"), StringExternal("Param/Value/17187AF9"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/092A5720"), StringExternal("Param/Value/296B5437"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/D5062831"), StringExternal("Param/Value/6639D6EC"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/4257EC1D"), StringExternal("Param/Value/304FE819"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/FB2465E8"), StringExternal("Param/Value/E3968B56"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/E4570717"), StringExternal("Param/Value/C65CA7AB"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/0EA8B968"), StringExternal("Param/Value/47A571BE"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/71384958"), StringExternal("Param/Value/65A0C651"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/6B32DBB8"), StringExternal("Param/Value/F7D53CBE"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/799C845B"), StringExternal("Param/Value/5ACD6A25"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/49FABEF9"), StringExternal("Param/Value/2A81BAFC"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/631C0D1B"), StringExternal("Param/Value/CFD4D221"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/BC146713"), StringExternal("Param/Value/574FC3A5"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/0C60D5A2"), StringExternal("Param/Value/AA974721"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/56F661D1"), StringExternal("Param/Value/EFC52CE6"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/56615F0F"), StringExternal("Param/Value/C20C7DD1"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_epilogue03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/B0E1FCEA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/65B4A8FC"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/79B5746F"), StringExternal("Param/Value/5B9EA8A6"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/B4A57393"), StringExternal("Param/Value/E7B641D3"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/CD375505"), StringExternal("Param/Value/6AD96092"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/9DCB842A"), StringExternal("Param/Value/5596A400"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/5B7DE7A7"), StringExternal("Param/Value/41D82E00"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/A9A22F62"), StringExternal("Param/Value/4562227B"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/F6BC4422"), StringExternal("Param/Value/67730C5C"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/33BCE1EA"), StringExternal("Param/Value/2360C938"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/7FCFEA77"), StringExternal("Param/Value/9D7A41EA"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/475AACF4"), StringExternal("Param/Value/21FBE232"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/EA670AD3"), StringExternal("Param/Value/8FCBDFB5"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/9D3E77D5"), StringExternal("Param/Value/445C1ECB"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/BA0659A9"), StringExternal("Param/Value/F5F3905F"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/2CA7BC2F"), StringExternal("Param/Value/395497F6"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/0C1937DB"), StringExternal("Param/Value/A982C084"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/AE2D6404"), StringExternal("Param/Value/3AC03AF5"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/36B26B8D"), StringExternal("Param/Value/06DA200D"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/3959ECE0"), StringExternal("Param/Value/173A977F"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/85EDC45E"), StringExternal("Param/Value/B7FBC9F2"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/E372829E"), StringExternal("Param/Value/E672672D"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/6A96433E"), StringExternal("Param/Value/0237E0D2"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/94134155"), StringExternal("Param/Value/C1C9E736"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/1E7DCD52"), StringExternal("Param/Value/455FD6EE"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/AA9C5E87"), StringExternal("Param/Value/FB13859F"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/8411F104"), StringExternal("Param/Value/1E38C814"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\starbackground.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/652B2BB3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/F19A8F6D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/8C962852"), StringExternal("Param/Value/AB4FF831"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/087597F9"), StringExternal("Param/Value/F47E6CB2"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/9406B563"), StringExternal("Param/Value/79924F3B"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/F0EFF7FB"), StringExternal("Param/Value/88113D99"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/4805FC05"), StringExternal("Param/Value/D27627A0"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/2ADEF788"), StringExternal("Param/Value/9F74E85E"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/A5385AE9"), StringExternal("Param/Value/5C16AE15"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/F92751DA"), StringExternal("Param/Value/596F7BF3"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/82A33864"), StringExternal("Param/Value/9F56ABE8"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/64CA9BE7"), StringExternal("Param/Value/0074BD6E"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/F6EEC9B0"), StringExternal("Param/Value/67314C9B"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/2A8FC3B8"), StringExternal("Param/Value/CEDA5360"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/6334032D"), StringExternal("Param/Value/6664A827"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/9C464164"), StringExternal("Param/Value/5BCB5339"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/A76D17B2"), StringExternal("Param/Value/043B3371"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/15AD30F3"), StringExternal("Param/Value/F447B392"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/F68878E7"), StringExternal("Param/Value/44EF8592"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/A22C96B5"), StringExternal("Param/Value/E7880AA9"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/B77455BE"), StringExternal("Param/Value/02795B09"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/AAD653A9"), StringExternal("Param/Value/5EE596CA"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/2FBA72D3"), StringExternal("Param/Value/A9D2B39B"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/8CC43A82"), StringExternal("Param/Value/1BBA3005"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/8F618FA6"), StringExternal("Param/Value/8D98BB28"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/4D5D003F"), StringExternal("Param/Value/217297DA"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/74C0768C"), StringExternal("Param/Value/3DF31D5C"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\loading-ulnar.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/05CAB118"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/457D19CD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/5103D92B"), StringExternal("Param/Value/06C0DF41"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/9CD16069"), StringExternal("Param/Value/E9379BB0"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/5911490E"), StringExternal("Param/Value/93DA9DF3"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/D6A257CE"), StringExternal("Param/Value/D599984E"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/07C9A1A0"), StringExternal("Param/Value/239F8B65"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/5A586A2F"), StringExternal("Param/Value/2B19E27C"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/E6887588"), StringExternal("Param/Value/472C3E68"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/9C31006A"), StringExternal("Param/Value/8062E9A8"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/66217622"), StringExternal("Param/Value/F46909DF"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/C3E007E5"), StringExternal("Param/Value/1ABF724C"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/174C5C8B"), StringExternal("Param/Value/70FE64B4"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/093698C8"), StringExternal("Param/Value/F06C24B4"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/3659BAED"), StringExternal("Param/Value/30B19A4A"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/6CC7E9B9"), StringExternal("Param/Value/4B868B43"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/9F0BA244"), StringExternal("Param/Value/1448A71C"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/59C7E3E4"), StringExternal("Param/Value/2F65B2FE"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/E8AB169D"), StringExternal("Param/Value/EAE26FE9"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/B24A6FE4"), StringExternal("Param/Value/B72B2E01"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/5B0E408D"), StringExternal("Param/Value/510A5594"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/0EC4A35F"), StringExternal("Param/Value/E0ACF44B"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/2DAE9F00"), StringExternal("Param/Value/B449E249"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/A6DC6E7A"), StringExternal("Param/Value/F1788BEA"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/24A1806F"), StringExternal("Param/Value/E683213B"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\sc2_ui_coop_detail_background_artanis.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/177CDF8F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/D7D846CA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/032D8A20"), StringExternal("Param/Value/D9B10B9B"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/788B618A"), StringExternal("Param/Value/5343CD04"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/ED25FA4B"), StringExternal("Param/Value/6C3DDC59"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/D76C94F8"), StringExternal("Param/Value/165D5BC9"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/EDC5C040"), StringExternal("Param/Value/8661F927"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/CF5B361E"), StringExternal("Param/Value/AEFC34B5"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/D07A7977"), StringExternal("Param/Value/D2F39E38"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/11AEE62D"), StringExternal("Param/Value/2DE17238"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/E185B6F2"), StringExternal("Param/Value/63FE9175"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/4DBC18F3"), StringExternal("Param/Value/12A963C2"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/0A0E261A"), StringExternal("Param/Value/952F8AF7"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/E00157D4"), StringExternal("Param/Value/AC197DC0"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/A02B6208"), StringExternal("Param/Value/97C0EC84"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/296B41C8"), StringExternal("Param/Value/786B3F79"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/CD2CF67B"), StringExternal("Param/Value/4336845F"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/707BD3E2"), StringExternal("Param/Value/84C3FCC1"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/081B4D68"), StringExternal("Param/Value/C455E751"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/4DAB4A5C"), StringExternal("Param/Value/1A155140"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/AFFE00F6"), StringExternal("Param/Value/9B3AFA2B"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/3041EF86"), StringExternal("Param/Value/A58A6083"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/72A8C094"), StringExternal("Param/Value/63885195"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/FE9CA4B9"), StringExternal("Param/Value/75C531EB"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/5B98A0F2"), StringExternal("Param/Value/D9719159"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/3E3E5DE9"), StringExternal("Param/Value/3EAE0508"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/97A16571"), StringExternal("Param/Value/9ECD154F"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\sm_pt05_marsaraskypano.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/188EA72E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/8949E6EF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/75F427D9"), StringExternal("Param/Value/EF43D2E1"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/617EF68B"), StringExternal("Param/Value/16DA8623"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/09B576E1"), StringExternal("Param/Value/EF515270"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/0B6FF37F"), StringExternal("Param/Value/7D3C643B"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/CF7A6A35"), StringExternal("Param/Value/50505F0B"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/CF3004B3"), StringExternal("Param/Value/D4BAA448"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/CAB7136D"), StringExternal("Param/Value/B972D9F4"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/DAEF9951"), StringExternal("Param/Value/FDD0864D"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/AE776B2D"), StringExternal("Param/Value/E2CB565D"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/A0A73B31"), StringExternal("Param/Value/014860C7"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/6C4DCE88"), StringExternal("Param/Value/10C9E3D3"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/2DBE8AD5"), StringExternal("Param/Value/CC7E379A"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/50B150EF"), StringExternal("Param/Value/91949B38"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/F9BBCE27"), StringExternal("Param/Value/1B7BCE0C"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/2C8AD7E8"), StringExternal("Param/Value/756B3782"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/84839C10"), StringExternal("Param/Value/4641122F"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/8C504F1C"), StringExternal("Param/Value/13E5E587"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/E1AF69B6"), StringExternal("Param/Value/94967F54"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/605F2A84"), StringExternal("Param/Value/A4F2BED3"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/7A823843"), StringExternal("Param/Value/EDB8420F"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/77B73591"), StringExternal("Param/Value/63A54515"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/F63A316B"), StringExternal("Param/Value/C66D2E23"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/92248F32"), StringExternal("Param/Value/E7DB664F"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\korhalskybox_korhacloudbg_diffuse.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/B7DFA9E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/C2B9085C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/BADB7DC9"), StringExternal("Param/Value/7713B1C8"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/2FCBD172"), StringExternal("Param/Value/A36D8273"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/84E10ED4"), StringExternal("Param/Value/5AD3EC00"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/A8D6F766"), StringExternal("Param/Value/525B89CE"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/6EB1214E"), StringExternal("Param/Value/99D7B9C3"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/B1638703"), StringExternal("Param/Value/F6D15723"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/C228F44F"), StringExternal("Param/Value/29D294DD"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/5EC54021"), StringExternal("Param/Value/A4EBA379"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/946227DA"), StringExternal("Param/Value/1208E7E7"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/2A99904B"), StringExternal("Param/Value/7C348810"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/D0A25F71"), StringExternal("Param/Value/62ACBCA7"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/A12E2C38"), StringExternal("Param/Value/10A43668"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/150C236F"), StringExternal("Param/Value/3A42D23E"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/7F9D2826"), StringExternal("Param/Value/25095AAB"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/34A49CF9"), StringExternal("Param/Value/D15DB2CC"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/8A80F65C"), StringExternal("Param/Value/CD148AF7"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/37455EE0"), StringExternal("Param/Value/EFD2F873"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/0D4C3D32"), StringExternal("Param/Value/09BCAE56"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/1663FBB6"), StringExternal("Param/Value/06590F36"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/832EDA26"), StringExternal("Param/Value/F2DC6FE9"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/3EC4871D"), StringExternal("Param/Value/7619603C"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/A98D56A4"), StringExternal("Param/Value/4902EAAC"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/E77FBF37"), StringExternal("Param/Value/EEE82DAD"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/5EA88D28"), StringExternal("Param/Value/B7DDE037"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_commandertraiticon_alarak.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/9AC76E16"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/BE5672C0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/DC9800D9"), StringExternal("Param/Value/26E36CF3"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/7FE4322F"), StringExternal("Param/Value/91713CFF"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/3ECC875B"), StringExternal("Param/Value/26CA3B6D"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/6055384F"), StringExternal("Param/Value/27804FC4"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/80A1EF7B"), StringExternal("Param/Value/89BCF3E6"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/AC84A672"), StringExternal("Param/Value/B2519F5E"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/85DB1339"), StringExternal("Param/Value/84235513"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/1D4E5E6A"), StringExternal("Param/Value/5502D48A"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/017C64A7"), StringExternal("Param/Value/2FF3910D"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/7280E15E"), StringExternal("Param/Value/B274F8FC"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/4A9AD403"), StringExternal("Param/Value/DC85A657"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/A7DC7CBB"), StringExternal("Param/Value/D740F3AD"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/80E4124D"), StringExternal("Param/Value/48E2C619"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/75985C38"), StringExternal("Param/Value/21A7D12E"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/BCBE42C0"), StringExternal("Param/Value/DF386B1B"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/891E939D"), StringExternal("Param/Value/8F0BAE1E"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/8F9E4F52"), StringExternal("Param/Value/C86E5E16"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/0DD9DDDC"), StringExternal("Param/Value/57139639"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/0ACACCC2"), StringExternal("Param/Value/22BBFE35"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/DA52A072"), StringExternal("Param/Value/41EA5C70"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_homepanel_commander_artanis.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/8D34A921"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/42669463"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/42834869"), StringExternal("Param/Value/63518F6C"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/2877424A"), StringExternal("Param/Value/9F28D274"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/32B4AC8D"), StringExternal("Param/Value/803A9CCD"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/D64D6136"), StringExternal("Param/Value/43B95674"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 300, StringExternal("Param/Value/59BD684F"), StringExternal("Param/Value/191C3202"), "");
    gv_talentsdialogbuttons[4][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/68FB3B6A"), StringExternal("Param/Value/7B0F9ADE"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/B50E433E"), StringExternal("Param/Value/B7BC57FF"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/EEC7E80C"), StringExternal("Param/Value/F3946F16"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/324CE664"), StringExternal("Param/Value/8F59A6E8"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/EFC432FB"), StringExternal("Param/Value/5DC85F44"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/D875C7D6"), StringExternal("Param/Value/4F41BFA5"), "");
    gv_talentsdialogbuttons[4][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/4A05A01A"), StringExternal("Param/Value/A8A6DA28"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/5DED4FD5"), StringExternal("Param/Value/AEA1AB0E"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/C54FA91B"), StringExternal("Param/Value/497E856F"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/B376F26B"), StringExternal("Param/Value/7DB186C3"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/17AF96DC"), StringExternal("Param/Value/FE304D17"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/2D41C80C"), StringExternal("Param/Value/DE7F358D"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/4D74B5CD"), StringExternal("Param/Value/8BB25627"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/BEB0F6D6"), StringExternal("Param/Value/6B710BF8"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/15DD52BC"), StringExternal("Param/Value/B0462E12"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/D5970E7C"), StringExternal("Param/Value/5702E824"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/B6B3F0BD"), StringExternal("Param/Value/0073E640"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 300, StringExternal("Param/Value/9E111B3C"), StringExternal("Param/Value/68202C1A"), "");
    gv_talentsdialogbuttons[4][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/2C0CD457"), StringExternal("Param/Value/6DD66B2C"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/D3423982"), StringExternal("Param/Value/CD1E77C7"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/39D510BB"), StringExternal("Param/Value/44B819B3"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/CBED99F1"), StringExternal("Param/Value/EEF9F1FD"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/187FA4DE"), StringExternal("Param/Value/C499BF8D"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 300, StringExternal("Param/Value/3F0848DF"), StringExternal("Param/Value/0EEE44FF"), "");
    gv_talentsdialogbuttons[4][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/81383803"), StringExternal("Param/Value/6FB37C80"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_hots_loading_missionselect_zzerus01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/A76D59A8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/5A2E0AB7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/477462AB"), StringExternal("Param/Value/EC34521F"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/ADA79801"), StringExternal("Param/Value/56EBB36A"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/5B393121"), StringExternal("Param/Value/966FFE7F"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/36F0C2AD"), StringExternal("Param/Value/16552A4E"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/0F6C5BB0"), StringExternal("Param/Value/DEF3434F"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/DA2DB027"), StringExternal("Param/Value/44778A6D"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/9B022672"), StringExternal("Param/Value/D5D118BC"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/7266F10F"), StringExternal("Param/Value/C638ED24"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/1508FFC6"), StringExternal("Param/Value/F483F3D1"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/701A4A7B"), StringExternal("Param/Value/E78A2D7B"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/ECFD9F0E"), StringExternal("Param/Value/8605DE77"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/EEC1E8E7"), StringExternal("Param/Value/5A219639"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/0486DC7D"), StringExternal("Param/Value/725D87B9"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/BF803E16"), StringExternal("Param/Value/6B26BA24"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/950B8E71"), StringExternal("Param/Value/5DFF1246"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/F47AB76B"), StringExternal("Param/Value/C2B34C67"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/3DEA56FE"), StringExternal("Param/Value/948D89D0"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/D70227D6"), StringExternal("Param/Value/31ADFC96"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/CBB48F8B"), StringExternal("Param/Value/FE2406A8"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/9B875472"), StringExternal("Param/Value/87887CA5"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/0D02A2A7"), StringExternal("Param/Value/6F5EB831"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/5314BAC3"), StringExternal("Param/Value/E2B5449C"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/B7EFFB55"), StringExternal("Param/Value/6F95BF89"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/14C94316"), StringExternal("Param/Value/F548554F"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/97734DCC"), StringExternal("Param/Value/A967A7D1"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/3B2123D2"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\mrjack_zerusbg_matte.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/AE4EE13A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/78C74BD1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/BB2412A2"), StringExternal("Param/Value/3377E9B2"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/37514A98"), StringExternal("Param/Value/1B87002C"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/3DAE9F4D"), StringExternal("Param/Value/9F5BB83B"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/7D9AF08C"), StringExternal("Param/Value/0D550B6A"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 300, StringExternal("Param/Value/F1DA0916"), StringExternal("Param/Value/BA92B7D9"), "");
    gv_talentsdialogbuttons[4][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/9C27B628"), StringExternal("Param/Value/6D06366F"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/7A25227C"), StringExternal("Param/Value/FD62BB15"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/A69608B3"), StringExternal("Param/Value/01E7298B"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/03D3C715"), StringExternal("Param/Value/933FD302"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/A5139051"), StringExternal("Param/Value/2463C3AB"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/55F4DE7D"), StringExternal("Param/Value/9520C7C7"), "");
    gv_talentsdialogbuttons[4][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/7A927131"), StringExternal("Param/Value/805B2EEC"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/AD3B119A"), StringExternal("Param/Value/07A848B8"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/FC8C69D4"), StringExternal("Param/Value/B33A0AD5"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/2E32E7D1"), StringExternal("Param/Value/5421CC81"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/5165A206"), StringExternal("Param/Value/A858D232"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/E4B11516"), StringExternal("Param/Value/A099742B"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/030A3B3E"), StringExternal("Param/Value/DFC198EE"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/FA4A50D2"), StringExternal("Param/Value/321BCDA1"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/F5B6664C"), StringExternal("Param/Value/4FDC377D"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/692B57A6"), StringExternal("Param/Value/CA173E95"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/421EA90A"), StringExternal("Param/Value/7AD54B4A"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 300, StringExternal("Param/Value/9B09F629"), StringExternal("Param/Value/9F7E12EE"), "");
    gv_talentsdialogbuttons[4][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/FC9EEC35"), StringExternal("Param/Value/9F75B4E5"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/3AAFDE2D"), StringExternal("Param/Value/38D2EAAE"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/B9951CCF"), StringExternal("Param/Value/DD21052A"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/2A21F3C0"), StringExternal("Param/Value/8C170944"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/12BCA3B1"), StringExternal("Param/Value/79F8EE69"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 300, StringExternal("Param/Value/C30E6B00"), StringExternal("Param/Value/7E31D7D6"), "");
    gv_talentsdialogbuttons[4][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/7B2C43B8"), StringExternal("Param/Value/F1745D29"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/65088249"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_prologue01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/5924C65F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/3E4EA804"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/EF4F09A1"), StringExternal("Param/Value/33FD154E"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/B2636371"), StringExternal("Param/Value/35D06DAE"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/1F2E6D79"), StringExternal("Param/Value/0A15DD30"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/C2158C40"), StringExternal("Param/Value/7F58A302"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/0E455E52"), StringExternal("Param/Value/F554DBA6"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/8AB0D270"), StringExternal("Param/Value/DB98E6B1"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/9B01C9CE"), StringExternal("Param/Value/7D71AC28"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/96B8A408"), StringExternal("Param/Value/09946734"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/8963429D"), StringExternal("Param/Value/6D14BFDF"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/4CB92B6A"), StringExternal("Param/Value/961302C5"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/957B5D12"), StringExternal("Param/Value/41DB243E"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/11724A3E"), StringExternal("Param/Value/1ED77C20"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/171543ED"), StringExternal("Param/Value/6174E3A7"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/E1D05909"), StringExternal("Param/Value/99283ECF"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/944CB914"), StringExternal("Param/Value/7BB2EAC0"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/896E451A"), StringExternal("Param/Value/13DE9EE1"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/ED54CCD8"), StringExternal("Param/Value/A9F65EA2"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/173780C0"), StringExternal("Param/Value/8EE1A198"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/210F7E19"), StringExternal("Param/Value/6D11798E"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/A0059CB8"), StringExternal("Param/Value/5DBF2B27"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/073B5D72"), StringExternal("Param/Value/230E4E22"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/785F1BBC"), StringExternal("Param/Value/A9A69446"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/4396B20B"), StringExternal("Param/Value/EFB97EEC"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/1364B498"), StringExternal("Param/Value/8D4D5F55"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/BE5DB8B4"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_shakuras01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/9F07BE69"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/0B8307B0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/959C04D9"), StringExternal("Param/Value/0CD93A3A"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/49337736"), StringExternal("Param/Value/F801D734"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/E915B842"), StringExternal("Param/Value/A6ECF4AE"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/E0F463E7"), StringExternal("Param/Value/019D5607"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 300, StringExternal("Param/Value/D374CBF7"), StringExternal("Param/Value/F637C7BA"), "");
    gv_talentsdialogbuttons[4][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/2C8972B8"), StringExternal("Param/Value/1DD8B941"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/1A0322EB"), StringExternal("Param/Value/D6DD71A8"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/455EA921"), StringExternal("Param/Value/6E51544F"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/E3AA70F3"), StringExternal("Param/Value/5B4CC3F5"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/D88DF10C"), StringExternal("Param/Value/8F1BAEEC"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/108443FB"), StringExternal("Param/Value/ADA8273F"), "");
    gv_talentsdialogbuttons[4][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/A932C800"), StringExternal("Param/Value/F485F932"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/4100C55C"), StringExternal("Param/Value/96131889"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/94C5A35E"), StringExternal("Param/Value/60A47DBC"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/2675C686"), StringExternal("Param/Value/9E5E8C79"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/64CE9F45"), StringExternal("Param/Value/30C10B60"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 300, StringExternal("Param/Value/1233738F"), StringExternal("Param/Value/253D950C"), "");
    gv_talentsdialogbuttons[4][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/5E767A19"), StringExternal("Param/Value/07954041"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/A05C83AA"), StringExternal("Param/Value/643CD134"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/2D2BE690"), StringExternal("Param/Value/724D3DC0"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/AF78B136"), StringExternal("Param/Value/F9476517"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/E709DC8C"), StringExternal("Param/Value/88253341"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 300, StringExternal("Param/Value/01D2A521"), StringExternal("Param/Value/8382E0A6"), "");
    gv_talentsdialogbuttons[4][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/A4AC814B"), StringExternal("Param/Value/E6164D7B"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/F4BE4ABA"), StringExternal("Param/Value/CB690F8B"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/E262874E"), StringExternal("Param/Value/50B60849"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/6540B233"), StringExternal("Param/Value/A701B31D"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/0244022E"), StringExternal("Param/Value/BAE5F7C9"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 300, StringExternal("Param/Value/144FE5C9"), StringExternal("Param/Value/1474814A"), "");
    gv_talentsdialogbuttons[4][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/F0934F0D"), StringExternal("Param/Value/F00CA99D"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/EB789038"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_purifier01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/747C1F9E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/83699D24"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/2D5D26F9"), StringExternal("Param/Value/DD58C6F7"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/51AEE433"), StringExternal("Param/Value/345CF345"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/0A2AA8E5"), StringExternal("Param/Value/1549EF53"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/ABEEB6D9"), StringExternal("Param/Value/2FF06B94"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/E5A00329"), StringExternal("Param/Value/320888C1"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/5499B294"), StringExternal("Param/Value/E818E9EA"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/865661DE"), StringExternal("Param/Value/EE3B8EA3"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/A4B8AD8C"), StringExternal("Param/Value/A4848677"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/563DBFEC"), StringExternal("Param/Value/33354CFF"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 300, StringExternal("Param/Value/BE28CAF6"), StringExternal("Param/Value/C6D7847B"), "");
    gv_talentsdialogbuttons[4][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/F376C725"), StringExternal("Param/Value/759B8CF0"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/256270A5"), StringExternal("Param/Value/738C8712"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/8DE71F56"), StringExternal("Param/Value/D09A6D9D"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/8DFBB97C"), StringExternal("Param/Value/1ABA7EB5"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/F6F2DFEA"), StringExternal("Param/Value/1C762A2F"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/4ED33A0A"), StringExternal("Param/Value/AC6342C8"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/4EC860A0"), StringExternal("Param/Value/EAD2524D"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/50304ECB"), StringExternal("Param/Value/DB25DEBB"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/C823CFBE"), StringExternal("Param/Value/4CF8C0B7"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/CEF57F8A"), StringExternal("Param/Value/DF9ABB9D"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/57B1178D"), StringExternal("Param/Value/F36C96EA"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/81953CC6"), StringExternal("Param/Value/2F1C193C"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/07FEEF72"), StringExternal("Param/Value/E136EF0C"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/4C8CED0B"), StringExternal("Param/Value/68B0E17A"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/3E22DCCC"), StringExternal("Param/Value/6FBD2F6E"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/7EC30D6B"), StringExternal("Param/Value/7088C2B6"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/13E62E56"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_loading_purifier03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/5ABBE646"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/FF78E543"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/C647C19A"), StringExternal("Param/Value/92E35784"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/1FC30EDD"), StringExternal("Param/Value/74BB645A"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/E6366DE7"), StringExternal("Param/Value/5EA08B86"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/5B51A43E"), StringExternal("Param/Value/643FBBC5"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/8D978676"), StringExternal("Param/Value/137FF5C4"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/AED7498D"), StringExternal("Param/Value/6EA495D8"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/F8DDC25F"), StringExternal("Param/Value/E9773BF3"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/4E29A0AE"), StringExternal("Param/Value/41E30B3E"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/6C94F846"), StringExternal("Param/Value/2F672089"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/EFA7F3D8"), StringExternal("Param/Value/229EEACC"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/B32C90A4"), StringExternal("Param/Value/99951426"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/5975CDFD"), StringExternal("Param/Value/7E9CED54"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/CB7C00E5"), StringExternal("Param/Value/A649F7D2"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/3F999B07"), StringExternal("Param/Value/BF0E6E80"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/F7D4BB43"), StringExternal("Param/Value/361D87E0"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/FEE006BD"), StringExternal("Param/Value/7A9B474F"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/83E19E13"), StringExternal("Param/Value/6C748796"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/07264E0A"), StringExternal("Param/Value/E978340B"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/0A6A0825"), StringExternal("Param/Value/CD84EB73"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/7C62E0D6"), StringExternal("Param/Value/304A3046"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/07511026"), StringExternal("Param/Value/81EA15F6"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/054A252E"), StringExternal("Param/Value/441FF763"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
    lv_i += 1;
    DialogCreate(1175, 500, c_anchorCenter, 0, 0, true);
    DialogSetTitle(DialogLastCreated(), StringExternal("Param/Value/78C69062"));
    gv_talentsdialog[lv_i] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1125, 450, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_hots_loading_missionselect_zhybrid03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 45, 37, StringExternal("Param/Value/0A64452D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 655, 45, StringExternal("Param/Value/8EEA89DA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsdialogbuttons[8][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 100, StringExternal("Param/Value/C97BC8E3"), StringExternal("Param/Value/0D2E071D"), "");
    gv_talentsdialogbuttons[0][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 150, StringExternal("Param/Value/3C33D58F"), StringExternal("Param/Value/BB3246B0"), "");
    gv_talentsdialogbuttons[1][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 200, StringExternal("Param/Value/96CAD83C"), StringExternal("Param/Value/95B369D6"), "");
    gv_talentsdialogbuttons[2][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 250, StringExternal("Param/Value/9BEC7C30"), StringExternal("Param/Value/B734012C"), "");
    gv_talentsdialogbuttons[3][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 25, 350, StringExternal("Param/Value/50ED28BD"), StringExternal("Param/Value/2FA50F83"), "");
    gv_talentsdialogbuttons[5][0][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 100, StringExternal("Param/Value/45466FC7"), StringExternal("Param/Value/366E95F2"), "");
    gv_talentsdialogbuttons[0][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 150, StringExternal("Param/Value/48408195"), StringExternal("Param/Value/DE3526AA"), "");
    gv_talentsdialogbuttons[1][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 200, StringExternal("Param/Value/F1DE0F45"), StringExternal("Param/Value/03D56282"), "");
    gv_talentsdialogbuttons[2][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 250, StringExternal("Param/Value/54ED6898"), StringExternal("Param/Value/336BACA9"), "");
    gv_talentsdialogbuttons[3][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 250, 350, StringExternal("Param/Value/6B6D6AF8"), StringExternal("Param/Value/B46468CE"), "");
    gv_talentsdialogbuttons[5][1][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 100, StringExternal("Param/Value/320A8772"), StringExternal("Param/Value/5EB2269E"), "");
    gv_talentsdialogbuttons[0][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 150, StringExternal("Param/Value/28763A8F"), StringExternal("Param/Value/58539775"), "");
    gv_talentsdialogbuttons[1][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 200, StringExternal("Param/Value/5E7AB7E7"), StringExternal("Param/Value/004F0CC5"), "");
    gv_talentsdialogbuttons[2][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 250, StringExternal("Param/Value/D9DB295C"), StringExternal("Param/Value/3D3A28CC"), "");
    gv_talentsdialogbuttons[3][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 475, 350, StringExternal("Param/Value/781BBBE5"), StringExternal("Param/Value/253793B9"), "");
    gv_talentsdialogbuttons[5][2][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 100, StringExternal("Param/Value/1E4C1A2B"), StringExternal("Param/Value/24A94684"), "");
    gv_talentsdialogbuttons[0][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 150, StringExternal("Param/Value/F1738F9D"), StringExternal("Param/Value/D97FD6E9"), "");
    gv_talentsdialogbuttons[1][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 200, StringExternal("Param/Value/99FBBB02"), StringExternal("Param/Value/1E09BB0F"), "");
    gv_talentsdialogbuttons[2][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 250, StringExternal("Param/Value/D027C38B"), StringExternal("Param/Value/A692A54F"), "");
    gv_talentsdialogbuttons[3][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 700, 350, StringExternal("Param/Value/F7CB6485"), StringExternal("Param/Value/410D9E68"), "");
    gv_talentsdialogbuttons[5][3][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 100, StringExternal("Param/Value/E61A534B"), StringExternal("Param/Value/5F28E698"), "");
    gv_talentsdialogbuttons[0][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 150, StringExternal("Param/Value/88503F08"), StringExternal("Param/Value/9B5FC033"), "");
    gv_talentsdialogbuttons[1][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 200, StringExternal("Param/Value/0E935B71"), StringExternal("Param/Value/AFC31EC8"), "");
    gv_talentsdialogbuttons[2][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 250, StringExternal("Param/Value/8272EBC9"), StringExternal("Param/Value/E0D2B35B"), "");
    gv_talentsdialogbuttons[3][4][lv_i] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentsdialog[lv_i], 225, 50, c_anchorTopLeft, 925, 350, StringExternal("Param/Value/B44921E0"), StringExternal("Param/Value/4A6E7323"), "");
    gv_talentsdialogbuttons[5][4][lv_i] = DialogControlLastCreated();
}

void gf_DialogHideAll (int lp_player) {
    // Variable Declarations
    int lv_p1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p1 = lp_player-1;

    // Implementation
    DialogSetVisible(gv_rewardDialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_teleportdialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_upgradedialog, PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[0], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[1], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[2], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[3], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[4], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[5], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[6], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[7], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[8], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[9], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[10], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[11], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[12], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[13], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[14], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[15], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[16], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[17], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[18], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_talentsdialog[19], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_zachievementDialog, PlayerGroupSingle(lp_player), false);
}

trigger auto_gf_talentfreeupdater_Trigger = null;

void gf_talentfreeupdater () {
    if (auto_gf_talentfreeupdater_Trigger == null) {
        auto_gf_talentfreeupdater_Trigger = TriggerCreate("auto_gf_talentfreeupdater_TriggerFunc");
    }

    TriggerExecute(auto_gf_talentfreeupdater_Trigger, false, false);
}

bool auto_gf_talentfreeupdater_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_j;
    playergroup[5] lv_pgs;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_pgs[init_i] = PlayerGroupEmpty();
    }

    // Implementation
    lv_pgs[1] = PlayerGroupSingle(1);
    lv_pgs[2] = PlayerGroupSingle(2);
    lv_pgs[3] = PlayerGroupSingle(3);
    lv_pgs[4] = PlayerGroupSingle(4);
    while ((!(true) != true)) {
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                lv_j = 0;
                while ((lv_j < 20)) {
                    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][lv_j], IntToText(gv_talentpointsavailable[lv_i-1]), lv_pgs[lv_i]);
                    lv_j += 1;
                }
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

void gf_TalentPressedFire (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    int lv_pn;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pn = lp_p+1;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "FireballIgnite", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "FireballIgnite", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ignite ")+IntToText(TechTreeUpgradeCount(lv_pn, "FireballIgnite", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Fireballrange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fireballrange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Inner Fire ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fireballrange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && ((TechTreeUpgradeCount(lv_pn, "Fireballspeed", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "FireballspeedUP2", c_techCountQueuedOrBetter) < 1))) {
        if ((TechTreeUpgradeCount(lv_pn, "Fireballspeed", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "Fireballspeed", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "FireballspeedUP2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blazing Speed ")+IntToText(TechTreeUpgradeCount(lv_pn, "FireballspeedUP2", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "Fireballspeed", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "FireballMeteor", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "FireballMeteor", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fiery Justice ")+IntToText(TechTreeUpgradeCount(lv_pn, "FireballMeteor", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "FireballMeteorChain", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "FireballMeteorChain", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Burning Sky 1/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastwaveArea", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastwaveArea", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Impact ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastwaveArea", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastwaveSlow", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastwaveSlow", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Powerblast ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastwaveSlow", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastwaveEnergy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastwaveEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blastdesign ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastwaveEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FireHeroEternalFlame", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "FireHeroEternalFlame", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Eternal Flame ")+IntToText(TechTreeUpgradeCount(lv_pn, "FireHeroEternalFlame", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastwaveChain", c_techCountQueuedOrBetter) < 3) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastwaveChain", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pyroblast ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastwaveChain", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Hellfire", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hellfire", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hellfire ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hellfire", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "InfernoDebuff", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "InfernoDebuff", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Evil Present ")+IntToText(TechTreeUpgradeCount(lv_pn, "InfernoDebuff", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "InfernoLeech", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "InfernoLeech", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fire Mastery ")+IntToText(TechTreeUpgradeCount(lv_pn, "InfernoLeech", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Cataclysm", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cataclysm", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cataclysm ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cataclysm", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Armageddon", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Armageddon", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Armageddon ")+IntToText(TechTreeUpgradeCount(lv_pn, "Armageddon", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Cauterize", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cauterize", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cauterize ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cauterize", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "BurningSoul", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BurningSoul", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Burning Soul ")+IntToText(TechTreeUpgradeCount(lv_pn, "BurningSoul", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "BurningBlood", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "BurningBlood", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringExternal("Param/Value/B1501B78"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Warmth", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Warmth", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Warmth ")+IntToText(TechTreeUpgradeCount(lv_pn, "Warmth", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Hades", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hades", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hades ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hades", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "MoltenFury", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "MoltenFury", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Molten Fury ")+IntToText(TechTreeUpgradeCount(lv_pn, "MoltenFury", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Firestarter", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Firestarter", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Firestarter ")+StringToText("1/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "MagmaArmorFireChannels", c_techCountQueuedOrBetter) < 4)) {
        if ((TechTreeUpgradeCount(lv_pn, "MagmaArmorFireChannels", c_techCountQueuedOrBetter) == 0)) {
            TechTreeUpgradeAddLevel(lv_pn, "MagmaArmorFireChannels", 1);
        }

        TechTreeUpgradeAddLevel(lv_pn, "MagmaArmorFireChannels", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fire Channels ")+IntToText(TechTreeUpgradeCount(lv_pn, "MagmaArmorFireChannels", c_techCountCompleteOnly) - 1)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Fuel", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fuel", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fuel ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fuel", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Thermal", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Thermal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Thermal ")+IntToText(TechTreeUpgradeCount(lv_pn, "Thermal", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][0], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedPoison (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    int lv_pn;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pn = lp_p+1;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 0) < 2.0)) {
        TechTreeUpgradeAddLevel(lv_pn, "Splatter", 1);
        UnitSetCustomValue(gv_hero[lv_player], 0, (UnitGetCustomValue(gv_hero[lv_player], 0) + 0.25));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Splatter ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 0)-1.5)*4,c_fixedPrecisionAny)+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 1) < 6.0)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonboltButtonDummyDuration", 1);
        UnitSetCustomValue(gv_hero[lv_player], 1, (UnitGetCustomValue(gv_hero[lv_player], 1) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stability ")+FixedToText(UnitGetCustomValue(gv_hero[lv_player], 1)-3,c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 2) < 25.0)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonboltButtonDummyDMG", 1);
        UnitSetCustomValue(gv_hero[lv_player], 2, (UnitGetCustomValue(gv_hero[lv_player], 2) + 5.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chemistry ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 2)-10)/5,c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "PoisonboltPlague", c_techCountCompleteOnly) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonboltPlague", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Plague ")+IntToText(TechTreeUpgradeCount(lv_pn, "PoisonboltPlague", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 3) < 1.0) && (gf_Currentlevel() >= 10)) {
        UnitSetCustomValue(gv_hero[lv_player], 3, (UnitGetCustomValue(gv_hero[lv_player], 3) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Deadly Fumes ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 3)-0),c_fixedPrecisionAny)+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (UnitGetCustomValue(gv_hero[lv_player], 5) < 1.0)) {
        UnitSetCustomValue(gv_hero[lv_player], 5, (UnitGetCustomValue(gv_hero[lv_player], 5) + 0.25));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stable Isotope ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 5)-0.5)*4,c_fixedPrecisionAny)+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (UnitGetCustomValue(gv_hero[lv_player], 6) < 3.5)) {
        UnitSetCustomValue(gv_hero[lv_player], 6, (UnitGetCustomValue(gv_hero[lv_player], 6) + 0.5));
        TechTreeUpgradeAddLevel(lv_pn, "Transmission", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transmission ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 6)-2)*2,c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Blight", c_techCountCompleteOnly) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Blight", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blight ")+IntToText(TechTreeUpgradeCount(lv_pn, "Blight", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Corruption", c_techCountCompleteOnly) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Corruption", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Corruption ")+IntToText(TechTreeUpgradeCount(lv_pn, "Corruption", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (UnitGetCustomValue(gv_hero[lv_player], 7) < 1.0) && (gf_Currentlevel() >= 10)) {
        UnitSetCustomValue(gv_hero[lv_player], 7, (UnitGetCustomValue(gv_hero[lv_player], 7) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tox Trigger ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 7)),c_fixedPrecisionAny)+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathRange", c_techCountCompleteOnly) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transfer ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathRange", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathDamage", c_techCountCompleteOnly) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pain ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathDamage", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathHosts", c_techCountCompleteOnly) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathHosts", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Suffering ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathHosts", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathEnergy", c_techCountCompleteOnly) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Schadenfreude ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathEnergy", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathKillEnergy", c_techCountCompleteOnly) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathKillEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Killingspree ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathKillEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BlackDeathRespawn", c_techCountCompleteOnly) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackDeathRespawn", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Epidemic ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackDeathRespawn", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "PoisonHeroMysterymix", c_techCountCompleteOnly) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonHeroMysterymix", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mysterymix ")+IntToText(TechTreeUpgradeCount(lv_pn, "PoisonHeroMysterymix", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (UnitGetCustomValue(gv_hero[lv_player], 16) < 3.0)) {
        UnitSetCustomValue(gv_hero[lv_player], 16, (UnitGetCustomValue(gv_hero[lv_player], 16) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Repugnant ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player],16)),c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Virulent", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Virulent", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Virulent ")+IntToText(TechTreeUpgradeCount(lv_pn, "Virulent", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (UnitGetCustomValue(gv_hero[lv_player], 20) < 5.0)) {
        TechTreeUpgradeAddLevel(lv_pn, "Containment", 1);
        UnitSetCustomValue(gv_hero[lv_player], 20, (UnitGetCustomValue(gv_hero[lv_player], 20) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Containment ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player],20)-3),c_fixedPrecisionAny)+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PoisonBubbleDamage", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonBubbleDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ventilation ")+IntToText(TechTreeUpgradeCount(lv_pn, "PoisonBubbleDamage", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PoisonBubbleDuration", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "PoisonBubbleDuration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Consolation ")+IntToText(TechTreeUpgradeCount(lv_pn, "PoisonBubbleDuration", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Diseased", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Diseased", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Diseased ")+IntToText(TechTreeUpgradeCount(lv_pn, "Diseased", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][2], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedLightning (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_player;
    int lv_pn;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_p;
    lv_pn = (lp_p + 1);
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 1) < 3.0)) {
        UnitSetCustomValue(gv_hero[lv_player], 1, (UnitGetCustomValue(gv_hero[lv_player], 1) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chain ")+FixedToText(UnitGetCustomValue(gv_hero[lv_player], 1),c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 2) < 2.0)) {
        UnitSetCustomValue(gv_hero[lv_player], 2, (UnitGetCustomValue(gv_hero[lv_player], 2) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overload ")+FixedToText(UnitGetCustomValue(gv_hero[lv_player], 2),c_fixedPrecisionAny)+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 4) < 2.0)) {
        UnitSetCustomValue(gv_hero[lv_player], 4, (UnitGetCustomValue(gv_hero[lv_player], 4) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Conductor ")+FixedToText(UnitGetCustomValue(gv_hero[lv_player], 4),c_fixedPrecisionAny)+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (UnitGetCustomValue(gv_hero[lv_player], 3) < 1.0) && (gf_Currentlevel() >= 10)) {
        UnitSetCustomValue(gv_hero[lv_player], 3, (UnitGetCustomValue(gv_hero[lv_player], 3) + 1.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Supercharge ")+FixedToText(UnitGetCustomValue(gv_hero[lv_player], 3),c_fixedPrecisionAny)+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FrostshockArea", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostshockArea", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blizzard ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostshockArea", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FrostshockShatter", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostshockShatter", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shatter ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostshockShatter", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FrostshockWinter", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostshockWinter", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Winter ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostshockWinter", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FrostshockCoolant", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostshockCoolant", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Coolant ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostshockCoolant", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "FrostshockIceage", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostshockIceage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ice Age ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostshockIceage", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Thunderclap", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Thunderclap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Thunderclap ")+IntToText(TechTreeUpgradeCount(lv_pn, "Thunderclap", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Lightningfury", c_techCountQueuedOrBetter) < 2)) {
        UnitSetCustomValue(gv_hero[lv_player], 10, (UnitGetCustomValue(gv_hero[lv_player], 10) + 0.6));
        TechTreeUpgradeAddLevel(lv_pn, "Lightningfury", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Lightningfury ")+IntToText(TechTreeUpgradeCount(lv_pn, "Lightningfury", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ChargedStrikeTalent", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ChargedStrikeTalent", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("ChargedStrike 1/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ThunderfuryWrath", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "ThunderfuryWrath", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Wrath ")+IntToText(TechTreeUpgradeCount(lv_pn, "ThunderfuryWrath", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "FrostFury", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostFury", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("FrostFury ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostFury", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ThunderfuryLightningsTalent", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "ThunderfuryLightningsTalent", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stormrage ")+IntToText(TechTreeUpgradeCount(lv_pn, "ThunderfuryLightningsTalent", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "PowerDrainStacks", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PowerDrainStacks", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vampirism ")+IntToText(TechTreeUpgradeCount(lv_pn, "PowerDrainStacks", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "PowerDrainDuration", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PowerDrainDuration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Capacitor ")+IntToText(TechTreeUpgradeCount(lv_pn, "PowerDrainDuration", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "PowerDrainCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "PowerDrainCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Short ")+IntToText(TechTreeUpgradeCount(lv_pn, "PowerDrainCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "LightningHeroRetention", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "LightningHeroRetention", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Retention ")+IntToText(TechTreeUpgradeCount(lv_pn, "LightningHeroRetention", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "StaticEnergy", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "StaticEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("StaticEnergy ")+IntToText(TechTreeUpgradeCount(lv_pn, "StaticEnergy", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (UnitGetCustomValue(gv_hero[lv_player], 23) < 0.3)) {
        UnitSetCustomValue(gv_hero[lv_player], 23, (UnitGetCustomValue(gv_hero[lv_player], 23) + 0.1));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Volatile Energy ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 23))*10,c_fixedPrecisionAny)+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (UnitGetCustomValue(gv_hero[lv_player], 21) > 5.0)) {
        TechTreeUpgradeAddLevel(lv_pn, "LightningHeroStaticDrain", 1);
        UnitSetCustomValue(gv_hero[lv_player], 21, 5.0);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Static Drain ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 21))/5,c_fixedPrecisionAny)+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "StaticShieldEnergy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "StaticShieldEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Energyflow ")+IntToText(TechTreeUpgradeCount(lv_pn, "StaticShieldEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "ThunderfuryWrath", c_techCountQueuedOrBetter) > 0) && (TechTreeUpgradeCount(lv_pn, "Zap", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Zap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Zap ")+IntToText(TechTreeUpgradeCount(lv_pn, "Zap", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "LightningHeroExhaustion", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "LightningHeroExhaustion", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Exhaustion ")+IntToText(TechTreeUpgradeCount(lv_pn, "LightningHeroExhaustion", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (UnitGetCustomValue(gv_hero[lv_player], 20) < 15.0) && (gf_Currentlevel() >= 10)) {
        UnitSetCustomValue(gv_hero[lv_player], 20, (UnitGetCustomValue(gv_hero[lv_player], 20) + 3.0));
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Capacity ")+FixedToText((UnitGetCustomValue(gv_hero[lv_player], 20))/3-1,c_fixedPrecisionAny)+StringToText("/4"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][1], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedShadow (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShadowcrashSlow", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowcrashSlow", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dark Grasp ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowcrashSlow", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShadowcrashRange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowcrashRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dusk ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowcrashRange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShadowcrashPowergain", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowcrashPowergain", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shadows ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowcrashPowergain", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShadowEnergyToEnergy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowEnergyToEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shadow Feast ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowEnergyToEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "ShadowcrashAEEnergy", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowcrashAEEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Haunt ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowcrashAEEnergy", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "DoomDamage", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "DoomDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Death's Embrace ")+IntToText(TechTreeUpgradeCount(lv_pn, "DoomDamage", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "DoomRange", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "DoomRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Soulburn ")+IntToText(TechTreeUpgradeCount(lv_pn, "DoomRange", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "DoomEnergy", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "DoomEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shadowfury ")+IntToText(TechTreeUpgradeCount(lv_pn, "DoomEnergy", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Clouded", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Clouded", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Clouded ")+IntToText(TechTreeUpgradeCount(lv_pn, "Clouded", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "doombox", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "doombox", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Havoc ")+IntToText(TechTreeUpgradeCount(lv_pn, "doombox", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ShadowplayImproved", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowplayImproved", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Puppeteer ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowplayImproved", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ShadowplayHeal", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowplayHeal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Medic ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowplayHeal", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ShadowplayLimit", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowplayLimit", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dark Art ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowplayLimit", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Entropy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Entropy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Entropy ")+IntToText(TechTreeUpgradeCount(lv_pn, "Entropy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ShadowplayOverlord", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowplayOverlord", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overlord ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowplayOverlord", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Darkness", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Darkness", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Darkness ")+IntToText(TechTreeUpgradeCount(lv_pn, "Darkness", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "EnergytapBonusHeal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "EnergytapBonusHeal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Smoke ")+IntToText(TechTreeUpgradeCount(lv_pn, "EnergytapBonusHeal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "EnergytapLowEnergy", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "EnergytapLowEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mirrors ")+IntToText(TechTreeUpgradeCount(lv_pn, "EnergytapLowEnergy", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "EnergyTapFree", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "EnergyTapFree", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Development ")+IntToText(TechTreeUpgradeCount(lv_pn, "EnergyTapFree", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "EnergyTapMagic", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "EnergyTapMagic", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Magic ")+IntToText(TechTreeUpgradeCount(lv_pn, "EnergyTapMagic", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "BlackwallEnergy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlackwallEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dark Channels ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackwallEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "BlackwallDarkness", c_techCountQueuedOrBetter) < 3)) {
        UnitBehaviorAdd(gv_hero[lv_player], "CloakofFear", gv_hero[lv_player], 1);
        TechTreeUpgradeAddLevel(lv_pn, "BlackwallDarkness", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cloak of Fear ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlackwallDarkness", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Midnight", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Midnight", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Midnight ")+IntToText(TechTreeUpgradeCount(lv_pn, "Midnight", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Condemnation", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Condemnation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Condemnation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Condemnation", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "ShadowHeroPenumbra", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShadowHeroPenumbra", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Penumbra ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShadowHeroPenumbra", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][3], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedWarp (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "GuidedMissileScanrange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "GuidedMissileScanrange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Sonar ")+IntToText(TechTreeUpgradeCount(lv_pn, "GuidedMissileScanrange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "GuidedMissileTTL", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "GuidedMissileTTL", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Zortrium ")+IntToText(TechTreeUpgradeCount(lv_pn, "GuidedMissileTTL", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "GuidedMissilePierce", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "GuidedMissilePierce", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pierce ")+IntToText(TechTreeUpgradeCount(lv_pn, "GuidedMissilePierce", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "GuidedMissileSplit", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "GuidedMissileSplit", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Split ")+IntToText(TechTreeUpgradeCount(lv_pn, "GuidedMissileSplit", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "MultishotMultitask", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultishotMultitask", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Multitasking ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultishotMultitask", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "MultishotEnergyreturn", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultishotEnergyreturn", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Manaleech ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultishotEnergyreturn", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Focus", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Focus", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Focus ")+IntToText(TechTreeUpgradeCount(lv_pn, "Focus", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "MultishotFlames", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultishotFlames", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blaze ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultishotFlames", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "StrafeAgility", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "StrafeAgility", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Agility ")+IntToText(TechTreeUpgradeCount(lv_pn, "StrafeAgility", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "StrafeVirtuosity", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "StrafeVirtuosity", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Virtuosity ")+IntToText(TechTreeUpgradeCount(lv_pn, "StrafeVirtuosity", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "StrafeEndurance", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "StrafeEndurance", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Endurance ")+IntToText(TechTreeUpgradeCount(lv_pn, "StrafeEndurance", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "StrafeEndless", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "StrafeEndless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Endless ")+IntToText(TechTreeUpgradeCount(lv_pn, "StrafeEndless", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "StrafeExplosives", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "StrafeExplosives", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Explosives ")+IntToText(TechTreeUpgradeCount(lv_pn, "StrafeExplosives", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "DecoyEndure", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "DecoyEndure", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hallucination ")+IntToText(TechTreeUpgradeCount(lv_pn, "DecoyEndure", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "DecoyCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "DecoyCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Null ")+IntToText(TechTreeUpgradeCount(lv_pn, "DecoyCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "PartingGift", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PartingGift", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("PartingGift ")+IntToText(TechTreeUpgradeCount(lv_pn, "PartingGift", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Doppelganger", c_techCountQueuedOrBetter) < 3) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Doppelganger", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Doubleganger ")+IntToText(TechTreeUpgradeCount(lv_pn, "Doppelganger", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PowerPlatingEnergy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PowerPlatingEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Generators ")+IntToText(TechTreeUpgradeCount(lv_pn, "PowerPlatingEnergy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PowerPlatingHPreg", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PowerPlatingHPreg", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Microbots ")+IntToText(TechTreeUpgradeCount(lv_pn, "PowerPlatingHPreg", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "WarpDrone", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpDrone", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Drone ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpDrone", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "WarpHeroDurable", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpHeroDurable", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Durable ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpHeroDurable", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Assault", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Assault", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Assault ")+IntToText(TechTreeUpgradeCount(lv_pn, "Assault", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][4], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedParticle (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShockwaveCheap", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShockwaveCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Clock ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShockwaveCheap", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShockwaveDebuff", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShockwaveDebuff", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ripfield ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShockwaveDebuff", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShockwaveRange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShockwaveRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Merculite ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShockwaveRange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "ShockwaveDoubleCast", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShockwaveDoubleCast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pattern ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShockwaveDoubleCast", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "ShockwaveCannon", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ShockwaveCannon", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Orbital Link ")+IntToText(TechTreeUpgradeCount(lv_pn, "ShockwaveCannon", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "OrbitalCannonAE", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "OrbitalCannonAE", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Supply ")+IntToText(TechTreeUpgradeCount(lv_pn, "OrbitalCannonAE", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "OrbitalCannonIgnite", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "OrbitalCannonIgnite", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Plasma ")+IntToText(TechTreeUpgradeCount(lv_pn, "OrbitalCannonIgnite", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Reload", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reload", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reload ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reload", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "OrbitalCannonPreheat", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "OrbitalCannonPreheat", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Preheat ")+IntToText(TechTreeUpgradeCount(lv_pn, "OrbitalCannonPreheat", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "OrbitalCannonNeutron", c_techCountQueuedOrBetter) < 3) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "OrbitalCannonNeutron", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Neutronblast ")+IntToText(TechTreeUpgradeCount(lv_pn, "OrbitalCannonNeutron", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoMissile", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "PlasmaTorpedoMissile", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Launchers ")+IntToText(TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoMissile", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoRange", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PlasmaTorpedoRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("NGR ")+IntToText(TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoRange", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoShieldgain", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PlasmaTorpedoShieldgain", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Receiver ")+IntToText(TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoShieldgain", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ParticleHeroSafeguard", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ParticleHeroSafeguard", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Safeguard ")+IntToText(TechTreeUpgradeCount(lv_pn, "ParticleHeroSafeguard", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ParticleHeroLeftover", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ParticleHeroLeftover", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Leftover ")+IntToText(TechTreeUpgradeCount(lv_pn, "ParticleHeroLeftover", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoCharge", c_techCountQueuedOrBetter) < 2) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "PlasmaTorpedoCharge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overload ")+IntToText(TechTreeUpgradeCount(lv_pn, "PlasmaTorpedoCharge", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "DematerializeImp", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "DematerializeImp", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Nano Lasers ")+IntToText(TechTreeUpgradeCount(lv_pn, "DematerializeImp", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "DematerializeCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "DematerializeCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Optronics ")+IntToText(TechTreeUpgradeCount(lv_pn, "DematerializeCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Rematerialize", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Rematerialize", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Rematerialize ")+IntToText(TechTreeUpgradeCount(lv_pn, "Rematerialize", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "ParticleHeroOverheal", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ParticleHeroOverheal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overheal ")+IntToText(TechTreeUpgradeCount(lv_pn, "ParticleHeroOverheal", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "DematerializeEOL", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "DematerializeEOL", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Discharge ")+IntToText(TechTreeUpgradeCount(lv_pn, "DematerializeEOL", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "MultiphaseShieldFast", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultiphaseShieldFast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Emitters ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultiphaseShieldFast", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "MultiphaseShieldred", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultiphaseShieldred", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dampeners ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultiphaseShieldred", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "MultiphaseShieldrestore", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "MultiphaseShieldrestore", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Converter ")+IntToText(TechTreeUpgradeCount(lv_pn, "MultiphaseShieldrestore", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Transmute", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Transmute", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transmute ")+IntToText(TechTreeUpgradeCount(lv_pn, "Transmute", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][5], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedTwilight (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TwilightCannonDamage", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightCannonDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Conduits ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightCannonDamage", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TwilightCannonAbsorb", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightCannonAbsorb", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Absorbtion ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightCannonAbsorb", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TwilightCannonSuper", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightCannonSuper", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Recursion ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightCannonSuper", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TwilightHeroOverpower", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightHeroOverpower", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overpower ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightHeroOverpower", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "TwilightCannonMultigun", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightCannonMultigun", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Nightfall ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightCannonMultigun", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "NightstormCheap", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "NightstormCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Creative ")+IntToText(TechTreeUpgradeCount(lv_pn, "NightstormCheap", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "NightstormDuration", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "NightstormDuration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stability ")+IntToText(TechTreeUpgradeCount(lv_pn, "NightstormDuration", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "NightstormDamage", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "NightstormDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overwhelming ")+IntToText(TechTreeUpgradeCount(lv_pn, "NightstormDamage", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Dilation", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Dilation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dilation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Dilation", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "NightstormBlind", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "NightstormBlind", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blind ")+IntToText(TechTreeUpgradeCount(lv_pn, "NightstormBlind", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "TwilightHeroMatrix", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TwilightHeroMatrix", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Matrix ")+IntToText(TechTreeUpgradeCount(lv_pn, "TwilightHeroMatrix", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "RecombulatorRange", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "RecombulatorRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("LRSS ")+IntToText(TechTreeUpgradeCount(lv_pn, "RecombulatorRange", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "RecombulatorAbsorb", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "RecombulatorAbsorb", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Absorbertron ")+IntToText(TechTreeUpgradeCount(lv_pn, "RecombulatorAbsorb", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "RecombulatorCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "RecombulatorCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Version 2 ")+IntToText(TechTreeUpgradeCount(lv_pn, "RecombulatorCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && ((TechTreeUpgradeCount(lv_pn, "RecombulatorReflect", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "RecombulatorReflect2", c_techCountQueuedOrBetter) < 1)) && (gf_Currentlevel() >= 10)) {
        if ((TechTreeUpgradeCount(lv_pn, "RecombulatorReflect", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "RecombulatorReflect", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "RecombulatorReflect2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reflector ")+IntToText(TechTreeUpgradeCount(lv_pn, "RecombulatorReflect2", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "RecombulatorReflect", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "WarpoutHeal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpoutHeal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transwarp ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpoutHeal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "WarpoutSurplus", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpoutSurplus", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Surplus ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpoutSurplus", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "WarpoutCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpoutCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Energize ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpoutCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Distribute", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Distribute", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Redistribute ")+IntToText(TechTreeUpgradeCount(lv_pn, "Distribute", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Nightwarp", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Nightwarp", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Nightwarp ")+IntToText(TechTreeUpgradeCount(lv_pn, "Nightwarp", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PolymerArmor", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "PolymerArmor", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Residue ")+IntToText(TechTreeUpgradeCount(lv_pn, "PolymerArmor", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "PolymerHeal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "PolymerHeal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Structure ")+IntToText(TechTreeUpgradeCount(lv_pn, "PolymerHeal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "KineticBuffer", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "KineticBuffer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Kinetic Buffer ")+IntToText(TechTreeUpgradeCount(lv_pn, "KineticBuffer", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Resonance", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Resonance", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Resonance ")+IntToText(TechTreeUpgradeCount(lv_pn, "Resonance", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Cycle", c_techCountQueuedOrBetter) < 3) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cycle", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cycle ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cycle", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][6], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedTime (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TimewaveRange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimewaveRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Metawave ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimewaveRange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TimewaveDuration", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimewaveDuration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Timefield ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimewaveDuration", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TimewaveCheap", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimewaveCheap", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Futures ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimewaveCheap", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TimewaveInstability", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimewaveInstability", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Instability ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimewaveInstability", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "TimewaveLink", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimewaveLink", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Paradox ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimewaveLink", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "AltertimeHaste", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "AltertimeHaste", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Quicken ")+IntToText(TechTreeUpgradeCount(lv_pn, "AltertimeHaste", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "AltertimeACIGNORE", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "AltertimeACIGNORE", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Inevitable ")+IntToText(TechTreeUpgradeCount(lv_pn, "AltertimeACIGNORE", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "AltertimeLeech", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "AltertimeLeech", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Conservation ")+IntToText(TechTreeUpgradeCount(lv_pn, "AltertimeLeech", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "AltertimeRange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "AltertimeRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Expansion ")+IntToText(TechTreeUpgradeCount(lv_pn, "AltertimeRange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "AltertimeDMG", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "AltertimeDMG", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vanish ")+IntToText(TechTreeUpgradeCount(lv_pn, "AltertimeDMG", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "MutationEnergy", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MutationEnergy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Energy ")+IntToText(TechTreeUpgradeCount(lv_pn, "MutationEnergy", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "MutationRange", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MutationRange", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Source ")+IntToText(TechTreeUpgradeCount(lv_pn, "MutationRange", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "MutationDamage", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MutationDamage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Supply ")+IntToText(TechTreeUpgradeCount(lv_pn, "MutationDamage", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "TimeHeroJuncture", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroJuncture", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Juncture ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroJuncture", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "MutationHost", c_techCountQueuedOrBetter) < 1) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "MutationHost", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Host ")+IntToText(TechTreeUpgradeCount(lv_pn, "MutationHost", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "TimeHeroReversal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroReversal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reversal ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroReversal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "TimeHeroBreach", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroBreach", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Breach ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroBreach", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "TimeHeroFlux", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroFlux", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Flux ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroFlux", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "TimeHeroEscape", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroEscape", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Escape ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroEscape", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "TimeHeroDimension", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroDimension", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dimension ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroDimension", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "TimeHeroChronology", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroChronology", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chronology ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroChronology", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "TimeHeroTempo", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroTempo", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tempo ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroTempo", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "TimeHeroKronos", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TimeHeroKronos", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Kronos ")+IntToText(TechTreeUpgradeCount(lv_pn, "TimeHeroKronos", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][7], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedWaterHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Splash", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Splash", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Splash ")+IntToText(TechTreeUpgradeCount(lv_pn, "Splash", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Conservative", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Conservative", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Conservative ")+IntToText(TechTreeUpgradeCount(lv_pn, "Conservative", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Surge", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Surge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Surge ")+IntToText(TechTreeUpgradeCount(lv_pn, "Surge", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "IceBlast", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "IceBlast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ice Blast ")+IntToText(TechTreeUpgradeCount(lv_pn, "IceBlast", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "SubZero", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "SubZero", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("SubZero ")+IntToText(TechTreeUpgradeCount(lv_pn, "SubZero", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Frost", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Frost", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Frost ")+IntToText(TechTreeUpgradeCount(lv_pn, "Frost", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Fracture", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fracture", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fracture ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fracture", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "IceBurn", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "IceBurn", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("IceBurn ")+IntToText(TechTreeUpgradeCount(lv_pn, "IceBurn", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Thaw", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Thaw", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Thaw ")+IntToText(TechTreeUpgradeCount(lv_pn, "Thaw", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Heatwave", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Heatwave", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Heatwave ")+IntToText(TechTreeUpgradeCount(lv_pn, "Heatwave", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Vaporize", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vaporize", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vaporize ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vaporize", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Steam", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Steam", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Steam ")+IntToText(TechTreeUpgradeCount(lv_pn, "Steam", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "HotPool", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "HotPool", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("HotPool ")+IntToText(TechTreeUpgradeCount(lv_pn, "HotPool", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BoilOver", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "BoilOver", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("BoilOver ")+IntToText(TechTreeUpgradeCount(lv_pn, "BoilOver", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Recycle", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Recycle", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Recycle ")+IntToText(TechTreeUpgradeCount(lv_pn, "Recycle", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Tsunami", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Tsunami", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tsunami ")+IntToText(TechTreeUpgradeCount(lv_pn, "Tsunami", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Soothe", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Soothe", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Soothe ")+IntToText(TechTreeUpgradeCount(lv_pn, "Soothe", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Ripple", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Ripple", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ripple ")+IntToText(TechTreeUpgradeCount(lv_pn, "Ripple", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Douse", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Douse", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Douse ")+IntToText(TechTreeUpgradeCount(lv_pn, "Douse", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Replenish", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Replenish", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Replenish ")+IntToText(TechTreeUpgradeCount(lv_pn, "Replenish", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Reservoir", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reservoir", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reservoir ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reservoir", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Condensation", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Condensation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Condensation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Condensation", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Current", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Current", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Current ")+IntToText(TechTreeUpgradeCount(lv_pn, "Current", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "HydroBlast", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "HydroBlast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("HydroBlast ")+IntToText(TechTreeUpgradeCount(lv_pn, "HydroBlast", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Ocean", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Ocean", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ocean ")+IntToText(TechTreeUpgradeCount(lv_pn, "Ocean", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][8], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedEarthHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Mass", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Mass", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mass ")+IntToText(TechTreeUpgradeCount(lv_pn, "Mass", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Chink", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Chink", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chink ")+IntToText(TechTreeUpgradeCount(lv_pn, "Chink", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Flatten", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Flatten", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Flatten ")+IntToText(TechTreeUpgradeCount(lv_pn, "Flatten", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Fiery", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fiery", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fiery ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fiery", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Slope", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Slope", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Slope ")+IntToText(TechTreeUpgradeCount(lv_pn, "Slope", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Chasm", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Chasm", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chasm ")+IntToText(TechTreeUpgradeCount(lv_pn, "Chasm", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Tremor", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Tremor", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tremor ")+IntToText(TechTreeUpgradeCount(lv_pn, "Tremor", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Shred", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shred", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shred ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shred", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Hew", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hew", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hew ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hew", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "FaultLines", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "FaultLines", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("FaultLines ")+IntToText(TechTreeUpgradeCount(lv_pn, "FaultLines", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Combust", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Combust", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Combust ")+IntToText(TechTreeUpgradeCount(lv_pn, "Combust", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Flow", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Flow", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Flow ")+IntToText(TechTreeUpgradeCount(lv_pn, "Flow", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Molten", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Molten", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Molten ")+IntToText(TechTreeUpgradeCount(lv_pn, "Molten", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "LavaSpout", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "LavaSpout", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("LavaSpout ")+IntToText(TechTreeUpgradeCount(lv_pn, "LavaSpout", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Firewall", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Firewall", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Firewall ")+IntToText(TechTreeUpgradeCount(lv_pn, "Firewall", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Bulwark", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Bulwark", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Bulwark ")+IntToText(TechTreeUpgradeCount(lv_pn, "Bulwark", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Jagged", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Jagged", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Jagged ")+IntToText(TechTreeUpgradeCount(lv_pn, "Jagged", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Velocity", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Velocity", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Velocity ")+IntToText(TechTreeUpgradeCount(lv_pn, "Velocity", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Stones", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Stones", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stones ")+IntToText(TechTreeUpgradeCount(lv_pn, "Stones", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Landslide", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Landslide", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Landslide ")+IntToText(TechTreeUpgradeCount(lv_pn, "Landslide", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Colossal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Colossal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Colossal ")+IntToText(TechTreeUpgradeCount(lv_pn, "Colossal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Chip", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Chip", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chip ")+IntToText(TechTreeUpgradeCount(lv_pn, "Chip", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Reconstruct", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reconstruct", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reconstruct ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reconstruct", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Trample", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Trample", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Trample ")+IntToText(TechTreeUpgradeCount(lv_pn, "Trample", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][9], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedAirHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Elevate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Elevate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Elevate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Elevate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Jolt", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Jolt", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Jolt ")+IntToText(TechTreeUpgradeCount(lv_pn, "Jolt", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Squall", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Squall", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Squall ")+IntToText(TechTreeUpgradeCount(lv_pn, "Squall", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "AirHeroLofty", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "AirHeroLofty", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Lofty ")+IntToText(TechTreeUpgradeCount(lv_pn, "AirHeroLofty", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Gale", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Gale", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Gale ")+IntToText(TechTreeUpgradeCount(lv_pn, "Gale", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Whirlwind", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Whirlwind", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Whirlwind ")+IntToText(TechTreeUpgradeCount(lv_pn, "Whirlwind", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Debris", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Debris", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Debris ")+IntToText(TechTreeUpgradeCount(lv_pn, "Debris", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "F5", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "F5", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("F-5 ")+IntToText(TechTreeUpgradeCount(lv_pn, "F5", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Tempest", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Tempest", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tempest ")+IntToText(TechTreeUpgradeCount(lv_pn, "Tempest", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Typhoon", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Typhoon", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Typhoon ")+IntToText(TechTreeUpgradeCount(lv_pn, "Typhoon", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Gust", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Gust", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Gust ")+IntToText(TechTreeUpgradeCount(lv_pn, "Gust", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Transformer", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Transformer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transformer ")+IntToText(TechTreeUpgradeCount(lv_pn, "Transformer", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Impact", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Impact", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Impact ")+IntToText(TechTreeUpgradeCount(lv_pn, "Impact", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Cyclone", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cyclone", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cyclone ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cyclone", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Hyperdrive", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hyperdrive", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hyperdrive ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hyperdrive", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Accelerate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Accelerate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Accelerate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Accelerate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Swell", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Swell", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Swell ")+IntToText(TechTreeUpgradeCount(lv_pn, "Swell", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Draft", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Draft", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Draft ")+IntToText(TechTreeUpgradeCount(lv_pn, "Draft", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Monsoon", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Monsoon", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Monsoon ")+IntToText(TechTreeUpgradeCount(lv_pn, "Monsoon", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Evasion", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Evasion", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Evasion ")+IntToText(TechTreeUpgradeCount(lv_pn, "Evasion", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Turbines", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Turbines", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Turbines ")+IntToText(TechTreeUpgradeCount(lv_pn, "Turbines", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Scout", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Scout", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Scout ")+IntToText(TechTreeUpgradeCount(lv_pn, "Scout", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Seer", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Seer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Seer ")+IntToText(TechTreeUpgradeCount(lv_pn, "Seer", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Storm", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Storm", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Storm ")+IntToText(TechTreeUpgradeCount(lv_pn, "Storm", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][10], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedGravityHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Tear", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Tear", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tear ")+IntToText(TechTreeUpgradeCount(lv_pn, "Tear", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Whiplash", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Whiplash", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Whiplash ")+IntToText(TechTreeUpgradeCount(lv_pn, "Whiplash", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Portal", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Portal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Portal ")+IntToText(TechTreeUpgradeCount(lv_pn, "Portal", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Excess", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Excess", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Excess ")+IntToText(TechTreeUpgradeCount(lv_pn, "Excess", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Endless", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Endless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Endless ")+IntToText(TechTreeUpgradeCount(lv_pn, "Endless", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Relentless", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Relentless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Relentless ")+IntToText(TechTreeUpgradeCount(lv_pn, "Relentless", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Fissure", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fissure", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fissure ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fissure", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Magnetism", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Magnetism", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Magnetism ")+IntToText(TechTreeUpgradeCount(lv_pn, "Magnetism", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Amplitude", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Amplitude", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Amplitude ")+IntToText(TechTreeUpgradeCount(lv_pn, "Amplitude", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Power", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Power", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Power ")+IntToText(TechTreeUpgradeCount(lv_pn, "Power", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Leach", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Leach", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Leach ")+IntToText(TechTreeUpgradeCount(lv_pn, "Leach", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "GForce", c_techCountQueuedOrBetter) < 3) && (gf_Currentlevel() >= 10)) {
        TechTreeUpgradeAddLevel(lv_pn, "GForce", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("GForce ")+IntToText(TechTreeUpgradeCount(lv_pn, "GForce", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Hunger", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hunger", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hunger ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hunger", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Greed", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Greed", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Greed ")+IntToText(TechTreeUpgradeCount(lv_pn, "Greed", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Vortex", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vortex", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vortex ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vortex", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Feast", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Feast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Feast ")+IntToText(TechTreeUpgradeCount(lv_pn, "Feast", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Density", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Density", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Density ")+IntToText(TechTreeUpgradeCount(lv_pn, "Density", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Momentum", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Momentum", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Momentum ")+IntToText(TechTreeUpgradeCount(lv_pn, "Momentum", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Unstoppable", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Unstoppable", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Unstoppable ")+IntToText(TechTreeUpgradeCount(lv_pn, "Unstoppable", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Pressure", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Pressure", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pressure ")+IntToText(TechTreeUpgradeCount(lv_pn, "Pressure", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][11], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedGatewayHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Split", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Split", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Split ")+IntToText(TechTreeUpgradeCount(lv_pn,"Split",c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "WarpRift", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpRift", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Warp Rift ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpRift", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Retarget", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Retarget", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Retarget ")+IntToText(TechTreeUpgradeCount(lv_pn, "Retarget", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Ricochet", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Ricochet", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ricochet ")+IntToText(TechTreeUpgradeCount(lv_pn, "Ricochet", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Expose", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Expose", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Expose ")+IntToText(TechTreeUpgradeCount(lv_pn, "Expose", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Fragments", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fragments", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fragments ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fragments", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastZone", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastZone", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blast Zone ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastZone", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "BlastRadius", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BlastRadius", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blast Radius ")+IntToText(TechTreeUpgradeCount(lv_pn, "BlastRadius", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Permeate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Permeate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Permeate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Permeate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Unstable", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Unstable", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Unstable ")+IntToText(TechTreeUpgradeCount(lv_pn, "Unstable", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Retribution", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Retribution", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Retribution ")+IntToText(TechTreeUpgradeCount(lv_pn, "Retribution", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "ChainReact", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ChainReact", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Chain React ")+IntToText(TechTreeUpgradeCount(lv_pn, "ChainReact", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Warpgate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Warpgate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Warpgate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Warpgate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Flurry", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Flurry", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Flurry ")+IntToText(TechTreeUpgradeCount(lv_pn, "Flurry", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "ChargeTalent", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "ChargeTalent", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Charge ")+IntToText(TechTreeUpgradeCount(lv_pn, "ChargeTalent", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Revenge", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Revenge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Revenge ")+IntToText(TechTreeUpgradeCount(lv_pn, "Revenge", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Rend", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Rend", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Rend ")+IntToText(TechTreeUpgradeCount(lv_pn, "Rend", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Injection", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Injection", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Injection ")+IntToText(TechTreeUpgradeCount(lv_pn, "Injection", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Efficient", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Efficient", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Efficient ")+IntToText(TechTreeUpgradeCount(lv_pn, "Efficient", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Shrapnel", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shrapnel", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shrapnel ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shrapnel", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Effective", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Effective", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Effective ")+IntToText(TechTreeUpgradeCount(lv_pn, "Effective", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Barrier", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Barrier", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Barrier ")+IntToText(TechTreeUpgradeCount(lv_pn, "Barrier", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Spillover", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Spillover", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Spillover ")+IntToText(TechTreeUpgradeCount(lv_pn, "Spillover", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Expansion", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Expansion", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Expansion ")+IntToText(TechTreeUpgradeCount(lv_pn, "Expansion", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Acceleration", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Acceleration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Acceleration ")+IntToText(TechTreeUpgradeCount(lv_pn, "Acceleration", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "WarpIn", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "WarpIn", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Warp In ")+IntToText(TechTreeUpgradeCount(lv_pn, "WarpIn", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Gateway", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Gateway", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Gateway ")+IntToText(TechTreeUpgradeCount(lv_pn, "Gateway", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Lifeline", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Lifeline", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Lifeline ")+IntToText(TechTreeUpgradeCount(lv_pn, "Lifeline", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Anoint", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Anoint", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Anoint ")+IntToText(TechTreeUpgradeCount(lv_pn, "Anoint", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Purge", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Purge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Purge ")+IntToText(TechTreeUpgradeCount(lv_pn, "Purge", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][12], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedNatureHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    int auto2C8A13E6_n;
    int auto2C8A13E6_i;

    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Barbed", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Barbed", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Barbed ")+IntToText(TechTreeUpgradeCount(lv_pn, "Barbed", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Grafted", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Grafted", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Grafted ")+IntToText(TechTreeUpgradeCount(lv_pn, "Grafted", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Seed", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Seed", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Seed ")+IntToText(TechTreeUpgradeCount(lv_pn, "Seed", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Preservation", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Preservation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Preservation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Preservation", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Splinter", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Splinter", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Splinter ")+IntToText(TechTreeUpgradeCount(lv_pn, "Splinter", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Potency", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Potency", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Potency ")+IntToText(TechTreeUpgradeCount(lv_pn, "Potency", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Frailty", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Frailty", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Frailty ")+IntToText(TechTreeUpgradeCount(lv_pn, "Frailty", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Burst", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Burst", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Burst ")+IntToText(TechTreeUpgradeCount(lv_pn, "Burst", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Hallucinogen", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hallucinogen", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hallucinogen ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hallucinogen", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Spores", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Spores", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Spores ")+IntToText(TechTreeUpgradeCount(lv_pn, "Spores", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Recharge", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Recharge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Recharge ")+IntToText(TechTreeUpgradeCount(lv_pn, "Recharge", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Undergrowth", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Undergrowth", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Undergrowth ")+IntToText(TechTreeUpgradeCount(lv_pn, "Undergrowth", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Molten", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Volley", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Volley ")+IntToText(TechTreeUpgradeCount(lv_pn, "Volley", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Impact", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Entangle", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Entangle ")+IntToText(TechTreeUpgradeCount(lv_pn, "Entangle", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Cultivate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cultivate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cultivate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cultivate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
        auto2C8A13E6_n = UnitBehaviorCount(gv_hero[lv_player], "ExpelComboCount");
        for (auto2C8A13E6_i = 1; auto2C8A13E6_i <= auto2C8A13E6_n; auto2C8A13E6_i += 1) {
            UnitCreateEffectUnit(gv_hero[lv_player], "NatureHeroExpelCostUpMP", gv_hero[lv_player]);
        }
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Quicken", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Quicken", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Quicken ")+IntToText(TechTreeUpgradeCount(lv_pn, "Quicken", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Enliven", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Enliven", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Enliven ")+IntToText(TechTreeUpgradeCount(lv_pn, "Enliven", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Mend", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Mend", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mend ")+IntToText(TechTreeUpgradeCount(lv_pn, "Mend", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Recover", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Recover", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Recover ")+IntToText(TechTreeUpgradeCount(lv_pn, "Recover", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Buttress", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Buttress", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Buttress ")+IntToText(TechTreeUpgradeCount(lv_pn, "Buttress", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Potential", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(lv_pn, "Potential", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Potential ")+IntToText(TechTreeUpgradeCount(lv_pn, "Potential", c_techCountCompleteOnly))+StringToText("/5"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Yield", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Yield", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Yield ")+IntToText(TechTreeUpgradeCount(lv_pn, "Yield", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Fertilizer", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fertilizer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fertilizer ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fertilizer", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Variety", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Variety", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Variety ")+IntToText(TechTreeUpgradeCount(lv_pn, "Variety", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Ration", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Ration", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ration ")+IntToText(TechTreeUpgradeCount(lv_pn, "Ration", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][13], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedElementalHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Scorch", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Scorch", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Scorch ")+IntToText(TechTreeUpgradeCount(lv_pn, "Scorch", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Incinerate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Incinerate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Incinerate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Incinerate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Exterminate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Exterminate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Exterminate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Exterminate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Blaze", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Blaze", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Blaze ")+IntToText(TechTreeUpgradeCount(lv_pn, "Blaze", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Inundate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Inundate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Inundate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Inundate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Apocalypse", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Apocalypse", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Apocalypse ")+IntToText(TechTreeUpgradeCount(lv_pn, "Apocalypse", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Vent", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vent", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vent ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vent", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Critical", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Critical", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Critical ")+IntToText(TechTreeUpgradeCount(lv_pn, "Critical", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Zephyr", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Zephyr", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Zephyr ")+IntToText(TechTreeUpgradeCount(lv_pn, "Zephyr", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Dizzy", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Dizzy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dizzy ")+IntToText(TechTreeUpgradeCount(lv_pn, "Dizzy", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Imbue", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Imbue", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Imbue ")+IntToText(TechTreeUpgradeCount(lv_pn, "Imbue", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Sky", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Sky", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Sky ")+IntToText(TechTreeUpgradeCount(lv_pn, "Sky", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Concuss", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Concuss", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Concuss ")+IntToText(TechTreeUpgradeCount(lv_pn, "Concuss", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Bastion", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Bastion", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Bastion ")+IntToText(TechTreeUpgradeCount(lv_pn, "Bastion", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "BluntForce", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "BluntForce", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("BluntForce ")+IntToText(TechTreeUpgradeCount(lv_pn, "BluntForce", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Deflection", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Deflection", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Deflection ")+IntToText(TechTreeUpgradeCount(lv_pn, "Deflection", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "TectonicFury", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "TectonicFury", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("TectonicFury ")+IntToText(TechTreeUpgradeCount(lv_pn, "TectonicFury", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Endure", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Endure", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Endure ")+IntToText(TechTreeUpgradeCount(lv_pn, "Endure", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Refresh", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Refresh", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Refresh ")+IntToText(TechTreeUpgradeCount(lv_pn, "Refresh", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Quicken", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reclaim", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reclaim ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reclaim", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Divert", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Divert", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Divert ")+IntToText(TechTreeUpgradeCount(lv_pn, "Divert", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Cohesive", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cohesive", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cohesive ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cohesive", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Saturate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Saturate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Saturate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Saturate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Augment", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Augment", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Augment ")+IntToText(TechTreeUpgradeCount(lv_pn, "Augment", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "FrostFire", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "FrostFire", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("FrostFire ")+IntToText(TechTreeUpgradeCount(lv_pn, "FrostFire", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "SpeedStorm", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "SpeedStorm", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("SpeedStorm ")+IntToText(TechTreeUpgradeCount(lv_pn, "SpeedStorm", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Tartarus", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Tartarus", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Tartarus ")+IntToText(TechTreeUpgradeCount(lv_pn, "Tartarus", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Immortality", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Immortality", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Immortality ")+IntToText(TechTreeUpgradeCount(lv_pn, "Immortality", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Bonus", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Bonus", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Bonus ")+IntToText(TechTreeUpgradeCount(lv_pn, "Bonus", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Release", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Release", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Release ")+IntToText(TechTreeUpgradeCount(lv_pn, "Release", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][14], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedIllusionHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "IllusionHeroDetonate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "IllusionHeroDetonate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Detonate ")+IntToText(TechTreeUpgradeCount(lv_pn, "IllusionHeroDetonate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Buildup", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Buildup", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Buildup ")+IntToText(TechTreeUpgradeCount(lv_pn, "Buildup", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Distend", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Distend", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Distend ")+IntToText(TechTreeUpgradeCount(lv_pn, "Distend", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Duplicate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Duplicate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Duplicate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Duplicate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "DoubleCross", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "DoubleCross", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("DoubleCross ")+IntToText(TechTreeUpgradeCount(lv_pn, "DoubleCross", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Finale", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Finale", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Finale ")+IntToText(TechTreeUpgradeCount(lv_pn, "Finale", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Hoax", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hoax", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hoax ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hoax", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Deceit", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Deceit", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Deceit ")+IntToText(TechTreeUpgradeCount(lv_pn, "Deceit", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Echo", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Echo", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Echo ")+IntToText(TechTreeUpgradeCount(lv_pn, "Echo", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Reach", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reach", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reach ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reach", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Surprise", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Surprise", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Surprise ")+IntToText(TechTreeUpgradeCount(lv_pn, "Surprise", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Heist", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Heist", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Heist ")+IntToText(TechTreeUpgradeCount(lv_pn, "Heist", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Misdirection", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Misdirection", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Misdirection ")+IntToText(TechTreeUpgradeCount(lv_pn, "Misdirection", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Emergence", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Emergence", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Emergence ")+IntToText(TechTreeUpgradeCount(lv_pn, "Emergence", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Aegis", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Aegis", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Aegis ")+IntToText(TechTreeUpgradeCount(lv_pn, "Aegis", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Reanimate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reanimate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reanimate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reanimate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Network", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Network", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Network ")+IntToText(TechTreeUpgradeCount(lv_pn, "Network", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Fearless", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fearless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fearless ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fearless", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Limitless", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Limitless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Limitless ")+IntToText(TechTreeUpgradeCount(lv_pn, "Limitless", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Obscured", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Obscured", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Obscured ")+IntToText(TechTreeUpgradeCount(lv_pn, "Obscured", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Shroud", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shroud", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shroud ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shroud", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Phantom", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Phantom", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Phantom ")+IntToText(TechTreeUpgradeCount(lv_pn, "Phantom", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "IllusionHeroMirage", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "IllusionHeroMirage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mirage ")+IntToText(TechTreeUpgradeCount(lv_pn, "IllusionHeroMirage", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Assassinate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Assassinate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Assassinate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Assassinate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedLuckHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && ((TechTreeUpgradeCount(lv_pn, "Resound", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "Resound2", c_techCountQueuedOrBetter) < 1))) {
        if ((TechTreeUpgradeCount(lv_pn, "Resound", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "Resound", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "Resound2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Resound ")+IntToText(TechTreeUpgradeCount(lv_pn, "Resound", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "Resound2", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Snipe", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Snipe", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Snipe ")+IntToText(TechTreeUpgradeCount(lv_pn, "Snipe", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Magnitude", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Magnitude", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Magnitude ")+IntToText(TechTreeUpgradeCount(lv_pn, "Magnitude", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Supplement", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Supplement", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Supplement ")+IntToText(TechTreeUpgradeCount(lv_pn, "Supplement", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Eradicate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Eradicate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Eradicate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Eradicate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Division", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Division", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Division ")+IntToText(TechTreeUpgradeCount(lv_pn, "Division", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Alacrity", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Alacrity", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Alacrity ")+IntToText(TechTreeUpgradeCount(lv_pn, "Alacrity", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Amplify", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Amplify", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Amplify ")+IntToText(TechTreeUpgradeCount(lv_pn, "Amplify", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Reserves", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reserves", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reserves ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reserves", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Wisp", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Wisp", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Wisp ")+IntToText(TechTreeUpgradeCount(lv_pn, "Wisp", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Arc", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Arc", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Arc ")+IntToText(TechTreeUpgradeCount(lv_pn, "Arc", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Electric", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Electric", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Electric ")+IntToText(TechTreeUpgradeCount(lv_pn, "Electric", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Engulf", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Engulf", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Engulf ")+IntToText(TechTreeUpgradeCount(lv_pn, "Engulf", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Anomaly", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Anomaly", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Anomaly ")+IntToText(TechTreeUpgradeCount(lv_pn, "Anomaly", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Deviance", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Deviance", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Deviance ")+IntToText(TechTreeUpgradeCount(lv_pn, "Deviance", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Perpetuation", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Perpetuation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Perpetuation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Perpetuation", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Liquidate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Liquidate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Liquidate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Liquidate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Deluge", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Deluge", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Deluge ")+IntToText(TechTreeUpgradeCount(lv_pn, "Deluge", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Enervate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Enervate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Enervate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Enervate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Dynamic", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Dynamic", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dynamic ")+IntToText(TechTreeUpgradeCount(lv_pn, "Dynamic", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Recur", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Recur", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Recur ")+IntToText(TechTreeUpgradeCount(lv_pn, "Recur", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Pervade", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Pervade", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pervade ")+IntToText(TechTreeUpgradeCount(lv_pn, "Pervade", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Boundless", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Boundless", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Boundless ")+IntToText(TechTreeUpgradeCount(lv_pn, "Boundless", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Vanquish", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vanquish", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vanquish ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vanquish", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Haste", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Haste", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Haste ")+IntToText(TechTreeUpgradeCount(lv_pn, "Haste", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Ambit", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Ambit", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Ambit ")+IntToText(TechTreeUpgradeCount(lv_pn, "Ambit", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Shielded", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shielded", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shielded ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shielded", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Divination", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Divination", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Divination ")+IntToText(TechTreeUpgradeCount(lv_pn, "Divination", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "WildCard", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "WildCard", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("WildCard ")+IntToText(TechTreeUpgradeCount(lv_pn, "WildCard", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= (10 + (TechTreeUpgradeCount(lv_pn, "Providence", c_techCountQueuedOrBetter) * 10))) && (TechTreeUpgradeCount(lv_pn, "Providence", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Providence", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Providence ")+IntToText(TechTreeUpgradeCount(lv_pn, "Providence", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedProbeHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Salvo", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Salvo", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Salvo ")+IntToText(TechTreeUpgradeCount(lv_pn, "Salvo", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "TailGun", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "TailGun", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("TailGun ")+IntToText(TechTreeUpgradeCount(lv_pn, "TailGun", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Puncture", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Puncture", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Puncture ")+IntToText(TechTreeUpgradeCount(lv_pn, "Puncture", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Drench", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Drench", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Drench ")+IntToText(TechTreeUpgradeCount(lv_pn, "Drench", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Barrage", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Barrage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Barrage ")+IntToText(TechTreeUpgradeCount(lv_pn, "Barrage", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Rich", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Rich", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Rich ")+IntToText(TechTreeUpgradeCount(lv_pn, "Rich", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Quake", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Quake", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Quake ")+IntToText(TechTreeUpgradeCount(lv_pn, "Quake", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Shards", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shards", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shards ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shards", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Gravitate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Gravitate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Gravitate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Gravitate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 4) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Pulverize", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Pulverize", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Pulverize ")+IntToText(TechTreeUpgradeCount(lv_pn, "Pulverize", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Seism", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Seism", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Seism ")+IntToText(TechTreeUpgradeCount(lv_pn, "Seism", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Muck", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Muck", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Muck ")+IntToText(TechTreeUpgradeCount(lv_pn, "Muck", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Billow", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Billow", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Billow ")+IntToText(TechTreeUpgradeCount(lv_pn, "Billow", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Wither", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Wither", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Wither ")+IntToText(TechTreeUpgradeCount(lv_pn, "Wither", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Leakage", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Leakage", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Leakage ")+IntToText(TechTreeUpgradeCount(lv_pn, "Leakage", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Outbreak", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Outbreak", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Outbreak ")+IntToText(TechTreeUpgradeCount(lv_pn, "Outbreak", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Battery", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Battery", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Battery ")+IntToText(TechTreeUpgradeCount(lv_pn, "Battery", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Repair", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Repair", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Repair ")+IntToText(TechTreeUpgradeCount(lv_pn, "Repair", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Scope", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Scope", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Scope ")+IntToText(TechTreeUpgradeCount(lv_pn, "Scope", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Shell", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Shell", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Shell ")+IntToText(TechTreeUpgradeCount(lv_pn, "Shell", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Cannon", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cannon", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cannon ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cannon", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Wealth", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Wealth", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Wealth ")+IntToText(TechTreeUpgradeCount(lv_pn, "Wealth", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Jackpot", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Jackpot", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Jackpot ")+IntToText(TechTreeUpgradeCount(lv_pn, "Jackpot", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Spare", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Spare", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Spare ")+IntToText(TechTreeUpgradeCount(lv_pn, "Spare", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && ((TechTreeUpgradeCount(lv_pn, "Equip1", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "Equip2", c_techCountQueuedOrBetter) < 1))) {
        if ((TechTreeUpgradeCount(lv_pn, "Equip1", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "Equip1", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "Equip2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Equip ")+IntToText(TechTreeUpgradeCount(lv_pn, "Equip1", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "Equip2", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Guardian", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Guardian", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Guardian ")+IntToText(TechTreeUpgradeCount(lv_pn, "Guardian", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedBladeHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Sever", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Sever", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Sever ")+IntToText(TechTreeUpgradeCount(lv_pn, "Sever", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Adrenaline", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Adrenaline", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Adrenaline ")+IntToText(TechTreeUpgradeCount(lv_pn, "Adrenaline", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Slash", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Slash", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Slash ")+IntToText(TechTreeUpgradeCount(lv_pn, "Slash", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Excaliber", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Excaliber", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Excaliber ")+IntToText(TechTreeUpgradeCount(lv_pn, "Excaliber", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Broaden", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Broaden", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Broaden ")+IntToText(TechTreeUpgradeCount(lv_pn, "Broaden", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Encompass", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Encompass", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Encompass ")+IntToText(TechTreeUpgradeCount(lv_pn, "Encompass", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Lacerate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Lacerate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Lacerate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Lacerate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Mangle", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Mangle", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mangle ")+IntToText(TechTreeUpgradeCount(lv_pn, "Mangle", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Duel", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Duel", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Duel ")+IntToText(TechTreeUpgradeCount(lv_pn, "Duel", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Vigor", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vigor", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vigor ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vigor", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Crash", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Crash", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Crash ")+IntToText(TechTreeUpgradeCount(lv_pn, "Crash", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Desolation", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Desolation", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Desolation ")+IntToText(TechTreeUpgradeCount(lv_pn, "Desolation", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Spring", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Spring", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Spring ")+IntToText(TechTreeUpgradeCount(lv_pn, "Spring", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Hurdle", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Hurdle", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Hurdle ")+IntToText(TechTreeUpgradeCount(lv_pn, "Hurdle", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Transfer", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Transfer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Transfer ")+IntToText(TechTreeUpgradeCount(lv_pn, "Transfer", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Mutilate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Mutilate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Mutilate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Mutilate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Frenzy", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Frenzy", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Frenzy ")+IntToText(TechTreeUpgradeCount(lv_pn, "Frenzy", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Buffer", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Buffer", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Buffer ")+IntToText(TechTreeUpgradeCount(lv_pn, "Buffer", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Absorb", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Absorb", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Absorb ")+IntToText(TechTreeUpgradeCount(lv_pn, "Absorb", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Orbit", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Orbit", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Orbit ")+IntToText(TechTreeUpgradeCount(lv_pn, "Orbit", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Furor", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Furor", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Furor ")+IntToText(TechTreeUpgradeCount(lv_pn, "Furor", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Fanatical", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fanatical", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fanatical ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fanatical", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_TalentPressedBeamHero (int lp_p, int lp_br, int lp_bn, int lp_hv) {
    // Variable Declarations
    int lv_pn;
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = (lp_p + 1);
    lv_player = lp_p;
    lv_buttonrow = lp_br;
    lv_buttonnumber = lp_bn;
    lv_heroversion = lp_hv;
    lv_pg = PlayerGroupSingle(lv_pn);

    // Implementation
    if ((lv_buttonnumber == 0) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Prolong", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Prolong", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Prolong ")+IntToText(TechTreeUpgradeCount(lv_pn, "Prolong", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Bore", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Bore", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Bore ")+IntToText(TechTreeUpgradeCount(lv_pn, "Bore", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Fence", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Fence", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Fence ")+IntToText(TechTreeUpgradeCount(lv_pn, "Fence", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 0) && (TechTreeUpgradeCount(lv_pn, "Intersection", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Intersection", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Intersection ")+IntToText(TechTreeUpgradeCount(lv_pn, "Intersection", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 0) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Cross", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cross", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cross ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cross", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Constant", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Constant", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Constant ")+IntToText(TechTreeUpgradeCount(lv_pn, "Constant", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 1) && ((TechTreeUpgradeCount(lv_pn, "Stretch", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "Stretch2", c_techCountQueuedOrBetter) < 1))) {
        if ((TechTreeUpgradeCount(lv_pn, "Stretch", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "Stretch", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "Stretch2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stretch ")+IntToText(TechTreeUpgradeCount(lv_pn, "Stretch", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "Stretch2", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Empower", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Empower", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Empower ")+IntToText(TechTreeUpgradeCount(lv_pn, "Empower", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 1) && (TechTreeUpgradeCount(lv_pn, "Dispatch", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Dispatch", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Dispatch ")+IntToText(TechTreeUpgradeCount(lv_pn, "Dispatch", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 1) && (gf_Currentlevel() >= 10) && ((TechTreeUpgradeCount(lv_pn, "Link", c_techCountQueuedOrBetter) < 1) || (TechTreeUpgradeCount(lv_pn, "Link2", c_techCountQueuedOrBetter) < 1))) {
        if ((TechTreeUpgradeCount(lv_pn, "Link", c_techCountQueuedOrBetter) < 1)) {
            TechTreeUpgradeAddLevel(lv_pn, "Link", 1);
        }
        else {
            TechTreeUpgradeAddLevel(lv_pn, "Link2", 1);
        }
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Link ")+IntToText(TechTreeUpgradeCount(lv_pn, "Link", c_techCountCompleteOnly)+TechTreeUpgradeCount(lv_pn, "Link2", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Swiftness", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Swiftness", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Swiftness ")+IntToText(TechTreeUpgradeCount(lv_pn, "Swiftness", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Perpetual", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Perpetual", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Perpetual ")+IntToText(TechTreeUpgradeCount(lv_pn, "Perpetual", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Vast", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Vast", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Vast ")+IntToText(TechTreeUpgradeCount(lv_pn, "Vast", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 2) && (TechTreeUpgradeCount(lv_pn, "Cremate", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Cremate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Cremate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Cremate", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 2) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Remote", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Remote", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Remote ")+IntToText(TechTreeUpgradeCount(lv_pn, "Remote", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Reiterate", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reiterate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reiterate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reiterate", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "MLStasis", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "MLStasis", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Stasis ")+IntToText(TechTreeUpgradeCount(lv_pn, "MLStasis", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Perforate", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Perforate", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Perforate ")+IntToText(TechTreeUpgradeCount(lv_pn, "Perforate", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 3) && (TechTreeUpgradeCount(lv_pn, "Profusion", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Profusion", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Profusion ")+IntToText(TechTreeUpgradeCount(lv_pn, "Profusion", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 3) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Reciprocal", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Reciprocal", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Reciprocal ")+IntToText(TechTreeUpgradeCount(lv_pn, "Reciprocal", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 0) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Celerity", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Celerity", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Celerity ")+IntToText(TechTreeUpgradeCount(lv_pn, "Celerity", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 1) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Overhaul", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Overhaul", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Overhaul ")+IntToText(TechTreeUpgradeCount(lv_pn, "Overhaul", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 2) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Energize", c_techCountQueuedOrBetter) < 2)) {
        TechTreeUpgradeAddLevel(lv_pn, "Energize", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Energize ")+IntToText(TechTreeUpgradeCount(lv_pn, "Energize", c_techCountCompleteOnly))+StringToText("/2"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 3) && (lv_buttonrow == 4) && (TechTreeUpgradeCount(lv_pn, "Block", c_techCountQueuedOrBetter) < 1)) {
        TechTreeUpgradeAddLevel(lv_pn, "Block", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Block ")+IntToText(TechTreeUpgradeCount(lv_pn, "Block", c_techCountCompleteOnly))+StringToText("/1"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    if ((lv_buttonnumber == 5) && (lv_buttonrow == 4) && (gf_Currentlevel() >= 10) && (TechTreeUpgradeCount(lv_pn, "Bypass", c_techCountQueuedOrBetter) < 3)) {
        TechTreeUpgradeAddLevel(lv_pn, "Bypass", 1);
        libNtve_gf_SetDialogItemText(EventDialogControl(), StringToText("Bypass ")+IntToText(TechTreeUpgradeCount(lv_pn, "Bypass", c_techCountCompleteOnly))+StringToText("/3"), lv_pg);
        gv_talentpointsavailable[lv_player] -= 1;
    }

    libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_player]), PlayerGroupSingle(lv_pn));
}

void gf_disguiseunit (unit lp_unit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gf_achievementretroadd(lp_player);
    if ((gv_rewardUsed[lp_player][12] >= 1)) {
        if ((UnitGetType(lp_unit) == "LightningHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap LightningHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "PoisonHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PoisonHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "FireHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PitMalash");
        }

        if ((UnitGetType(lp_unit) == "ShadowHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ShadowHeroUpgraded");
        }

        if ((UnitGetType(lp_unit) == "TwilightHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap TwilightHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "ParticleHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ParticleHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "GravityHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap DarkArchonChampion");
        }

        if ((UnitGetType(lp_unit) == "WarpHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap Immortal_CollectionSkin_Adun");
        }

        if ((UnitGetType(lp_unit) == "TimeHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap TimeHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "WaterHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap Tassadar");
        }

        if ((UnitGetType(lp_unit) == "AirHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap Urun");
        }

        if ((UnitGetType(lp_unit) == "EarthHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap EarthHeroUpgrade");
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "EarthHeroBonusSkin", 1);
        }

        if ((UnitGetType(lp_unit) == "GatewayHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ArtanisVoid");
        }

        if ((UnitGetType(lp_unit) == "NatureHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap NatureHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "ElementalHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ElementalHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "IllusionHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap IllusionHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "LuckHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap LuckHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "ProbeHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ProbeHeroUpgrade");
        }

        if ((UnitGetType(lp_unit) == "BladeHero")) {
        }

        if ((UnitGetType(lp_unit) == "BeamHero")) {
            ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap BeamHeroUpgrade");
        }

    }

}

void gf_undisguiseunit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_unit) == "LightningHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap LightningHero");
    }

    if ((UnitGetType(lp_unit) == "PoisonHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap PoisonHero");
    }

    if ((UnitGetType(lp_unit) == "FireHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap FireHero");
    }

    if ((UnitGetType(lp_unit) == "ShadowHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ShadowHero");
    }

    if ((UnitGetType(lp_unit) == "TwilightHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap TwilightHero");
    }

    if ((UnitGetType(lp_unit) == "ParticleHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ParticleHero");
    }

    if ((UnitGetType(lp_unit) == "GravityHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap GravityHero");
    }

    if ((UnitGetType(lp_unit) == "WarpHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap WarpHero");
    }

    if ((UnitGetType(lp_unit) == "TimeHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap TimeHero");
    }

    if ((UnitGetType(lp_unit) == "WaterHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap WaterHero");
    }

    if ((UnitGetType(lp_unit) == "AirHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap AirHero");
    }

    if ((UnitGetType(lp_unit) == "EarthHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap EarthHero");
    }

    if ((UnitGetType(lp_unit) == "GatewayHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap GatewayHero");
    }

    if ((UnitGetType(lp_unit) == "NatureHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap NatureHero");
    }

    if ((UnitGetType(lp_unit) == "ElementalHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ElementalHero");
    }

    if ((UnitGetType(lp_unit) == "IllusionHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap IllusionHero");
    }

    if ((UnitGetType(lp_unit) == "LuckHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap LuckHero");
    }

    if ((UnitGetType(lp_unit) == "ProbeHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap ProbeHero");
    }

    if ((UnitGetType(lp_unit) == "BladeHero")) {
    }

    if ((UnitGetType(lp_unit) == "BeamHero")) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "ModelSwap BeamHero");
    }

}

text gf_getrewardinfo (int lp_player) {
    // Variable Declarations
    int lv_i;
    text lv_returntext;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 10)) {
        lv_returntext = (lv_returntext + gf_getrewardtext(lv_i) + IntToText(gv_rewardUsed[lp_player][lv_i]) + StringExternal("Param/Value/41A12106"));
        lv_i = lv_i+1;
    }
    return lv_returntext;
}

text gf_getrewardtext (int lp_rewardnum) {
    // Automatic Variable Declarations
    int auto2B5D42FE_val;

    // Implementation
    auto2B5D42FE_val = lp_rewardnum;
    if (auto2B5D42FE_val == 0) {
        return StringExternal("Param/Value/CE8E434B");
    }
    else if (auto2B5D42FE_val == 1) {
        return StringExternal("Param/Value/4B56640A");
    }
    else if (auto2B5D42FE_val == 2) {
        return StringExternal("Param/Value/E9075C7C");
    }
    else if (auto2B5D42FE_val == 3) {
        return StringExternal("Param/Value/81479B87");
    }
    else if (auto2B5D42FE_val == 4) {
        return StringExternal("Param/Value/5C87DA11");
    }
    else if (auto2B5D42FE_val == 5) {
        return StringExternal("Param/Value/86AA1265");
    }
    else if (auto2B5D42FE_val == 6) {
        return StringExternal("Param/Value/96B7BED8");
    }
    else if (auto2B5D42FE_val == 7) {
        return StringExternal("Param/Value/7EF15383");
    }
    else if (auto2B5D42FE_val == 8) {
        return StringExternal("Param/Value/EEB66AD3");
    }
    else if (auto2B5D42FE_val == 9) {
        return StringExternal("Param/Value/E4C713FB");
    }
    else {
        return StringExternal("Param/Value/4DDC9510");
    }
}

void gf_rewardreset (int lp_pnum) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = lp_pnum;

    // Implementation
    while ((lv_i < 15)) {
        gf_bankaddtoint(gv_zbanks[lp_pnum], IntToString(lv_i), "rewards", (gv_rewardUsed[lp_pnum][lv_i] * -1));
        gv_rewardUsed[lp_pnum][lv_i] = 0;
        gf_rewardnewtooltip(lp_pnum, lv_i);
        lv_i += 1;
    }
    gv_xpboost = (1.0 + ((gv_rewardUsed[1][9] + gv_rewardUsed[2][9] + gv_rewardUsed[3][9] + gv_rewardUsed[4][9]) * 0.02));
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergy", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergyReg", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardShieldHP", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardShieldHP2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardSpeed", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardSpeed2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardArmor", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardArmor2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardRegen", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardRegen2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage2", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "EarthHeroBonusSkin", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "rewarddmg", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "rewardarmor", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "RewardEnergyAuraBase", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "RewardEnergyAura", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "Guardian", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "TerminatorHidden", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "Inspiration", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "MLPowerField", 0);
    UnitBehaviorRemove(gv_hero[lp_pnum-1], "MoonLord", 0);
    gf_undisguiseunit(gv_hero[lp_pnum-1]);
    BankValueSetFromInt(gv_zbanks[lp_pnum], "rewards", "all", gv_rewardaccumulated[lp_pnum]);
    BankValueSetFromInt(gv_zbanks[lp_pnum], "rewards", "unspend", gv_rewardaccumulated[lp_pnum]);
    gv_rewardUnspend[lp_pnum] = gv_rewardaccumulated[lp_pnum];
    BankSave(gv_zbanks[lp_pnum]);
    libNtve_gf_SetDialogItemText(gv_rewardButtons[21], (StringExternal("Param/Value/E86D3610") + IntToText(gf_rewardgetprice(lp_pnum, 0))), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[22], (StringExternal("Param/Value/C88DE233") + IntToText(gf_rewardgetprice(lp_pnum, 5))), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[23], (StringExternal("Param/Value/27DF76F9") + IntToText(gf_rewardgetprice(lp_pnum, 10))), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[24], IntToText(gv_rewardUnspend[lp_pnum]), PlayerGroupSingle(lp_pnum));
}

void gf_rewardadd (int lp_typ, int lp_amount, int lp_pnum, bool lp_respawn) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_typ == 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergy2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergy", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
    }

    if ((lp_typ == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergyReg2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardEnergyReg", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
    }

    if ((lp_typ == 2)) {
        UnitBehaviorAdd(gv_hero[lp_pnum-1], "rewarddmg", gv_hero[lp_pnum-1], lp_amount);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage", ((UnitBehaviorCount(gv_hero[lp_pnum-1], "Guardian") + UnitBehaviorCount(gv_hero[lp_pnum-1], "rewarddmg")) % 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage2", ((UnitBehaviorCount(gv_hero[lp_pnum-1], "Guardian") + UnitBehaviorCount(gv_hero[lp_pnum-1], "rewarddmg")) / 100));
    }

    if ((lp_typ == 3) && (lp_amount >= 1)) {
        UnitBehaviorAdd(gv_hero[lp_pnum-1], "RewardEnergyAuraBase", gv_hero[lp_pnum-1], 1);
        UnitBehaviorAdd(gv_hero[lp_pnum-1], "RewardEnergyAura", gv_hero[lp_pnum-1], lp_amount);
    }

    if ((lp_typ == 4) && (lp_amount >= 1)) {
        UnitBehaviorAdd(gv_hero[lp_pnum-1], "Guardian", gv_hero[lp_pnum-1], lp_amount);
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage", ((UnitBehaviorCount(gv_hero[lp_pnum-1], "Guardian") + UnitBehaviorCount(gv_hero[lp_pnum-1], "rewarddmg")) % 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardDamage2", ((UnitBehaviorCount(gv_hero[lp_pnum-1], "Guardian") + UnitBehaviorCount(gv_hero[lp_pnum-1], "rewarddmg")) / 100));
    }

    if ((lp_typ == 5)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardShieldHP2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardShieldHP", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
    }

    if ((lp_typ == 6)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardRegen2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardRegen", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
    }

    if ((lp_typ == 7)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardSpeed2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardSpeed", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
    }

    if ((lp_typ == 8)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardArmor2", (gv_rewardUsed[lp_pnum][lp_typ] / 100));
        libNtve_gf_SetUpgradeLevelForPlayer(lp_pnum, "RewardArmor", (gv_rewardUsed[lp_pnum][lp_typ] % 100));
        UnitBehaviorAdd(gv_hero[lp_pnum-1], "rewardarmor", gv_hero[lp_pnum-1], lp_amount);
    }

    if ((lp_typ == 9) && (lp_respawn == false)) {
        gv_xpboost = (1.0 + ((gv_rewardUsed[1][9] + gv_rewardUsed[2][9] + gv_rewardUsed[3][9] + gv_rewardUsed[4][9]) * 0.02));
    }

    if ((lp_typ == 13)) {
    }

    if ((lp_typ == 14) && (gv_rewardUsed[lp_pnum][14] >= 1)) {
        UnitBehaviorAdd(gv_hero[(lp_pnum - 1)], "TerminatorHidden", gv_hero[(lp_pnum - 1)], 1);
    }

    if ((lp_typ == 10) && (gv_rewardUsed[lp_pnum][10] >= 1) && (gf_achievementpointsum(lp_pnum) >= 200)) {
        UnitBehaviorAdd(gv_hero[(lp_pnum - 1)], "Inspiration", gv_hero[(lp_pnum - 1)], 1);
    }

    if ((lp_typ == 11) && (gv_rewardUsed[lp_pnum][11] >= 1) && (gf_achievementpointsum(lp_pnum) >= 250)) {
        gf_PowerField(gv_hero[(lp_pnum - 1)]);
    }

    if ((lp_typ == 12) && (gv_rewardUsed[lp_pnum][12] >= 1) && (gf_achievementpointsum(lp_pnum) >= 300)) {
        UnitBehaviorAdd(gv_hero[(lp_pnum - 1)], "MoonLord", gv_hero[(lp_pnum - 1)], 1);
        gf_disguiseunit(gv_hero[(lp_pnum - 1)], lp_pnum);
    }

}

void gf_rewardbuy (int lp_pnum, int lp_typ) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_typ <= 4) && (gf_rewardgetprice(lp_pnum, 0) <= gv_rewardUnspend[lp_pnum])) {
        gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 0);
        gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 0) * -1));
    }
    else {
        if ((lp_typ <= 9) && (gf_rewardgetprice(lp_pnum, 5) <= gv_rewardUnspend[lp_pnum])) {
            gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 5);
            gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 5) * -1));
        }
        else {
            if ((lp_typ > 9)) {
                if ((gv_rewardUsed[lp_pnum][lp_typ] >= 1)) {
                    UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/1C3857E3"));
                    return ;
                }
                else {
                    if ((lp_typ == 13) && (gf_rewardgetprice(lp_pnum, 10) <= gv_rewardUnspend[lp_pnum])) {
                        if ((gf_achievementpointsum(lp_pnum) >= 100)) {
                            gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                            gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/0565430A"));
                            return ;
                        }
                    }
                    else {
                        if ((lp_typ == 14) && (gf_rewardgetprice(lp_pnum, 10) <= gv_rewardUnspend[lp_pnum])) {
                            if ((gf_achievementpointsum(lp_pnum) >= 150)) {
                                gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                                gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                            }
                            else {
                                UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/10F4EACA"));
                                return ;
                            }
                        }
                        else {
                            if ((lp_typ == 10) && (gf_rewardgetprice(lp_pnum, 10) <= gv_rewardUnspend[lp_pnum])) {
                                if ((gf_achievementpointsum(lp_pnum) >= 200)) {
                                    gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                                    gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                                }
                                else {
                                    UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/0C14677A"));
                                    return ;
                                }
                            }
                            else {
                                if ((lp_typ == 11) && (gf_rewardgetprice(lp_pnum, 10) <= gv_rewardUnspend[lp_pnum])) {
                                    if ((gf_achievementpointsum(lp_pnum) >= 250)) {
                                        gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                                        gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                                    }
                                    else {
                                        UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/B87B968C"));
                                        return ;
                                    }
                                }
                                else {
                                    if ((lp_typ == 12) && (gf_rewardgetprice(lp_pnum, 10) <= gv_rewardUnspend[lp_pnum])) {
                                        if ((gf_achievementpointsum(lp_pnum) >= 300)) {
                                            gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                                            gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                                        }
                                        else {
                                            UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/9C011591"));
                                            return ;
                                        }
                                    }
                                    else {
                                        gv_rewardUnspend[lp_pnum] -= gf_rewardgetprice(lp_pnum, 10);
                                        gf_bankaddtoint(gv_zbanks[lp_pnum], "unspend", "rewards", (gf_rewardgetprice(lp_pnum, 10) * -1));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                return ;
            }
        }
    }
    gf_bankaddtoint(gv_zbanks[lp_pnum], IntToString(lp_typ), "rewards", 1);
    gv_rewardUsed[lp_pnum][lp_typ] += 1;
    gf_rewardadd(lp_typ, 1, lp_pnum, false);
    gf_rewardnewpoints(lp_pnum, 0);
    gf_rewardnewtooltip(lp_pnum, lp_typ);
}

void gf_rewardnewtooltip (int lp_pnum, int lp_rnum) {
    // Variable Declarations
    playergroup lv_pg;

    // Automatic Variable Declarations
    int auto378956CC_val;

    // Variable Initialization
    lv_pg = PlayerGroupSingle(lp_pnum);

    // Implementation
    auto378956CC_val = lp_rnum;
    if (auto378956CC_val == 0) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/91C78073") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 1) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/61563805") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 2) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/C5D09501") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 3) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/002DFB1A") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 4) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/78532889") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 5) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/D6E28AF6") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 6) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/50896835") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 7) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/100D15B8") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 8) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/8D8BA30F") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 9) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/59D9600B") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 10) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/F198C6C6") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 11) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/F2E17248") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 12) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/29CF5B18") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 13) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/DAA9B16D") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else if (auto378956CC_val == 14) {
        libNtve_gf_SetDialogItemTooltip(gv_rewardButtons[lp_rnum], (StringExternal("Param/Value/FB4ACE1E") + gf_rewardlevel(lp_pnum, lp_rnum)), lv_pg);
    }
    else {
    }
}

void gf_rewardaddall (int lp_pnum, bool lp_respawn) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 15)) {
        gf_rewardadd(lv_i, gv_rewardUsed[lp_pnum][lv_i], lp_pnum, lp_respawn);
        lv_i += 1;
    }
}

trigger auto_gf_rewardtimer_Trigger = null;

void gf_rewardtimer () {
    if (auto_gf_rewardtimer_Trigger == null) {
        auto_gf_rewardtimer_Trigger = TriggerCreate("auto_gf_rewardtimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_rewardtimer_Trigger, false, false);
}

bool auto_gf_rewardtimer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int[5] lv_timers;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while(true){
    lv_i=0;
    Wait(5.0, c_timeGame);
    while(lv_i<5){
    lv_timers[lv_i]+=5;
    if(lv_timers[lv_i]>=300){
    lv_timers[lv_i]=0;
    gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
    }
    lv_i+=1;
    }
    }
    return true;
}

void gf_rewardcollectachievement (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusActive)) {
        while ((gf_achievementgetvalueofnextlevel(44, lp_player) <= gv_rewardaccumulated[lp_player])) {
            gf_achievementnew(lp_player, 44);
        }
    }

}

void gf_rewardnewpoints (int lp_pnum, int lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    gv_rewardaccumulated[lp_pnum] += lp_amount;
    gv_rewardUnspend[lp_pnum] += lp_amount;
    libNtve_gf_SetDialogItemText(gv_rewardButtons[24], IntToText(gv_rewardUnspend[lp_pnum]), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[21], (StringExternal("Param/Value/7DC75C3A") + IntToText(gf_rewardgetprice(lp_pnum, 0))), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[22], (StringExternal("Param/Value/E00A74B8") + IntToText(gf_rewardgetprice(lp_pnum, 5))), PlayerGroupSingle(lp_pnum));
    libNtve_gf_SetDialogItemText(gv_rewardButtons[23], (StringExternal("Param/Value/1A36928A") + IntToText(gf_rewardgetprice(lp_pnum, 10))), PlayerGroupSingle(lp_pnum));
}

void gf_rewarddialoginit () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;

    // Implementation
    DialogCreate(800, 650, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_rewardDialog = DialogLastCreated();
    DialogSetTitle(gv_rewardDialog, StringExternal("Param/Value/491F7E6D"));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/0DDD9C5B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rewardButtons[21] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 100, StringExternal("Param/Value/8E5AD805"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rewardButtons[22] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 100, StringExternal("Param/Value/73149654"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rewardButtons[23] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 50, c_anchorTopRight, 45, 80, StringToText(""), StringExternal("Param/Value/0575CF0A"), "");
    gv_rewardButtons[25] = DialogControlLastCreated();
    while ((lv_i <= 4)) {
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            libNtve_gf_SetDialogItemText(gv_rewardButtons[21], (StringExternal("Param/Value/770818D5") + IntToText(gf_rewardgetprice(lv_i, 0))), PlayerGroupSingle(lv_i));
            libNtve_gf_SetDialogItemText(gv_rewardButtons[22], (StringExternal("Param/Value/5522F939") + IntToText(gf_rewardgetprice(lv_i, 5))), PlayerGroupSingle(lv_i));
            libNtve_gf_SetDialogItemText(gv_rewardButtons[23], (StringExternal("Param/Value/C8D39A72") + IntToText(gf_rewardgetprice(lv_i, 10))), PlayerGroupSingle(lv_i));
        }

        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 630, 47, StringExternal("Param/Value/6EC03A61"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_rewardButtons[24] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorTopLeft, 25, 50, StringExternal("Param/Value/FEC9A4E2"), StringExternal("Param/Value/5450D77D"), "");
    gv_rewardButtons[20] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 150, (StringExternal("Param/Value/F191AD81") + gf_rewardlevel(lv_i, 0)), StringExternal("Param/Value/39A1998A"), "");
    gv_rewardButtons[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 250, (StringExternal("Param/Value/11BB55A7") + gf_rewardlevel(lv_i, 1)), StringExternal("Param/Value/FC655953"), "");
    gv_rewardButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 350, (StringExternal("Param/Value/2AB49A49") + gf_rewardlevel(lv_i, 2)), StringExternal("Param/Value/57BF81D0"), "");
    gv_rewardButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 450, (StringExternal("Param/Value/C23288B1") + gf_rewardlevel(lv_i, 3)), StringExternal("Param/Value/1CE1A394"), "");
    gv_rewardButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 550, (StringExternal("Param/Value/B132AE11") + gf_rewardlevel(lv_i, 4)), StringExternal("Param/Value/65D82054"), "");
    gv_rewardButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 150, (StringExternal("Param/Value/74A0D967") + gf_rewardlevel(lv_i, 5)), StringExternal("Param/Value/BD7373E9"), "");
    gv_rewardButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 250, (StringExternal("Param/Value/C90ACA57") + gf_rewardlevel(lv_i, 6)), StringExternal("Param/Value/FD3C1C07"), "");
    gv_rewardButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 350, (StringExternal("Param/Value/40EC832C") + gf_rewardlevel(lv_i, 7)), StringExternal("Param/Value/FD12CDCA"), "");
    gv_rewardButtons[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 450, (StringExternal("Param/Value/F8B783B3") + gf_rewardlevel(lv_i, 8)), StringExternal("Param/Value/DF404208"), "");
    gv_rewardButtons[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 280, 550, (StringExternal("Param/Value/3A2DD070") + gf_rewardlevel(lv_i, 9)), StringExternal("Param/Value/BCC3E58F"), "");
    gv_rewardButtons[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 150, (StringExternal("Param/Value/D236D2B3") + gf_rewardlevel(lv_i, 13)), StringExternal("Param/Value/FF9519A7"), "");
    gv_rewardButtons[13] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 250, (StringExternal("Param/Value/25E82CAF") + gf_rewardlevel(lv_i, 14)), StringExternal("Param/Value/664C4266"), "");
    gv_rewardButtons[14] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 350, (StringExternal("Param/Value/6ECC106D") + gf_rewardlevel(lv_i, 10)), StringExternal("Param/Value/A5E3BF0A"), "");
    gv_rewardButtons[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 450, (StringExternal("Param/Value/203F432C") + gf_rewardlevel(lv_i, 11)), StringExternal("Param/Value/9AA07E9B"), "");
    gv_rewardButtons[11] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 510, 550, (StringExternal("Param/Value/05065707") + gf_rewardlevel(lv_i, 12)), StringExternal("Param/Value/1798E1C8"), "");
    gv_rewardButtons[12] = DialogControlLastCreated();
    lv_i = 0;
    while ((lv_i < 15)) {
        gf_rewardnewtooltip(1, lv_i);
        gf_rewardnewtooltip(2, lv_i);
        gf_rewardnewtooltip(3, lv_i);
        gf_rewardnewtooltip(4, lv_i);
        lv_i += 1;
    }
    gf_rewardtimer();
}

text gf_rewardlevel (int lp_pnum, int lp_rnum) {
    // Automatic Variable Declarations
    // Implementation
    return (StringExternal("Param/Value/30F4F539") + IntToText(gv_rewardUsed[lp_pnum][lp_rnum]));
}

int gf_rewardgetprice (int lp_pnum, int lp_rewardrow) {
    // Variable Declarations
    int lv_t;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = lp_rewardrow;

    // Implementation
    while ((lv_i < (lp_rewardrow + 5))) {
        lv_t += gv_rewardUsed[lp_pnum][lv_i];
        lv_i += 1;
    }
    lv_t = PowI(IntToFixed(lv_t), 1.75);
    if ((lp_rewardrow >= 10)) {
        lv_t = 1000;
    }

    if ((lv_t < 1)) {
        return 1;
    }
    else {
        return lv_t;
    }
}

void gf_rewardgainpoints (int lp_pnum, int lp_amount, int lp_difficulty) {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_total;
    int lv_modulo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = lp_pnum;
    lv_j = lp_amount;
    lv_total = (lp_amount * lp_difficulty);

    // Implementation
    if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
        gv_zacmRewardsThisMatch[lp_pnum] += lv_total;
        gf_achievementPossiblyGainedSolo(63, gv_zacmRewardsThisMatch[lp_pnum], lp_pnum);
        if (((lv_total < 0) || (gv_rewardaccumulated[lv_i] < gv_rEWARDCAP))) {
            if ((lv_total > 0) && ((gv_rewardaccumulated[lv_i] + lv_total) > gv_rEWARDCAP)) {
                lv_total = (gv_rEWARDCAP - gv_rewardaccumulated[lv_i]);
            }

            lv_modulo = ModI(lv_total, lp_difficulty);
            gf_bankaddtoint(gv_zbanks[lv_i], IntToString(lp_difficulty), "time", (lv_total / lp_difficulty));
            gf_bankaddtoint(gv_zbanks[lv_i], "1", "time", lv_modulo);
            gf_bankaddtoint(gv_zbanks[lv_i], "all", "rewards", lv_total);
            gf_bankaddtoint(gv_zbanks[lv_i], "unspend", "rewards", lv_total);
            gf_rewardnewpoints(lv_i, lv_total);
            gf_rewardcollectachievement(lv_i);
            gf_banksetc(lp_pnum, gv_zbanks[lv_i]);
        }

    }

}

void gf_gainrewardbonusall (int lp_amount) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            gf_rewardgainpoints(lv_i, lp_amount, 5);
        }

    }
}

trigger auto_gf_PowerField_Trigger = null;
unit auto_gf_PowerField_lp_unit;

void gf_PowerField (unit lp_unit) {
    auto_gf_PowerField_lp_unit = lp_unit;

    if (auto_gf_PowerField_Trigger == null) {
        auto_gf_PowerField_Trigger = TriggerCreate("auto_gf_PowerField_TriggerFunc");
    }

    TriggerExecute(auto_gf_PowerField_Trigger, false, false);
}

bool auto_gf_PowerField_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_PowerField_lp_unit;

    // Variable Declarations
    unit lv_pylon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.125, c_timeGame);
    UnitBehaviorAdd(lp_unit, "MLPowerField", lp_unit, 1);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PowerFieldPylon", c_unitCreateIgnorePlacement, 5, UnitGetPosition(lp_unit));
    lv_pylon = UnitLastCreated();
    while ((UnitIsAlive(lp_unit) == true) && (UnitBehaviorCount(lp_unit, "MLPowerField") > 0)) {
        UnitSetPosition(lv_pylon, UnitGetPosition(lp_unit), false);
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_pylon);
    return true;
}

trigger auto_gf_ChronoWave_Trigger = null;
int auto_gf_ChronoWave_lp_player;
int auto_gf_ChronoWave_lp_massacre;

void gf_ChronoWave (int lp_player, int lp_massacre) {
    auto_gf_ChronoWave_lp_player = lp_player;
    auto_gf_ChronoWave_lp_massacre = lp_massacre;

    if (auto_gf_ChronoWave_Trigger == null) {
        auto_gf_ChronoWave_Trigger = TriggerCreate("auto_gf_ChronoWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChronoWave_Trigger, false, false);
}

bool auto_gf_ChronoWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ChronoWave_lp_player;
    int lp_massacre = auto_gf_ChronoWave_lp_massacre;

    // Variable Declarations
    fixed lv_chance;
    fixed lv_random;

    // Automatic Variable Declarations
    int auto22DAC36C_n;
    int auto22DAC36C_i;
    unitgroup autoBF573FFC_g;
    int autoBF573FFC_u;
    unit autoBF573FFC_var;

    // Variable Initialization

    // Implementation
    if ((gv_rewardUsed[lp_player][13] >= 1)) {
        auto22DAC36C_n = (lp_massacre / 300);
        for (auto22DAC36C_i = 1; auto22DAC36C_i <= auto22DAC36C_n; auto22DAC36C_i += 1) {
            UnitIssueOrder(gf_getpylonofstage(), OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 2), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        }
        lv_chance = ((0.002 * gv_xpboost) * lp_massacre);
        lv_random = RandomFixed(0.2, 8.0);
        if (((lp_massacre >= 3000) || (lv_chance >= lv_random))) {
            SoundPlayForPlayer(SoundLink("SOA_ChronoSurge", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/B3D18641"));
            autoBF573FFC_g = UnitGroup(null, 5, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoBF573FFC_u = UnitGroupCount(autoBF573FFC_g, c_unitCountAll);
            for (;; autoBF573FFC_u -= 1) {
                autoBF573FFC_var = UnitGroupUnitFromEnd(autoBF573FFC_g, autoBF573FFC_u);
                if (autoBF573FFC_var == null) { break; }
                UnitBehaviorAdd(autoBF573FFC_var, "ChronoWave", autoBF573FFC_var, 1);
            }
        }

    }

    return true;
}

void gf_initbanks () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            BankLoad("Moonlords", lv_i);
            gv_zbanks[lv_i] = BankLastCreated();
            gf_loadvalues(gv_zbanks[lv_i], lv_i);
        }

    }
}

void gf_loadvalues (bank lp_bank, int lp_pnum) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    int lv_l;
    fixed lv_m;
    bool lv_cheater;
    int lv_k;
    int lv_n;
    string lv_tempstring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tempstring = "";

    // Implementation
    if ((gf_bankgetint(lp_bank, "194", "version") < 1)) {
        gf_bankaddtoint(lp_bank, "194", "version", 1);
        if ((gf_bankgetint(lp_bank, "194", "version") < 2)) {
            gf_bankaddtoint(lp_bank, "194", "version", 1);
            gf_bankconvertoldachievementdata197(lp_bank);
        }

        gf_banksetc(lp_pnum, lp_bank);
        BankSectionRemove(lp_bank, "tip");
    }
    else {
        if ((gf_bankgetint(lp_bank, "194", "version") < 2)) {
            gf_bankaddtoint(lp_bank, "194", "version", 1);
            gf_bankconvertoldachievementdata197(lp_bank);
        }

    }
    if ((gf_bankgetint(lp_bank, "1", "time")+(gf_bankgetint(lp_bank, "2", "time")*2)+(gf_bankgetint(lp_bank, "3", "time")*3)+(gf_bankgetint(lp_bank, "4", "time")*4)+(gf_bankgetint(lp_bank, "5", "time")*5))!= gf_bankgetint(lp_bank, "all", "rewards")) {
    lv_cheater=true;}
    if ((gf_achievementgetlevel(lp_pnum,39)*50)> (gf_bankgetint(lp_bank, "1", "completeruns")+gf_bankgetint(lp_bank, "2", "completeruns")+gf_bankgetint(lp_bank, "3", "completeruns")+gf_bankgetint(lp_bank, "4", "completeruns")+gf_bankgetint(lp_bank, "5", "completeruns"))) {
    lv_cheater=true;}
    if (gf_bankgetint(lp_bank, "unspend", "rewards") > gf_bankgetint(lp_bank, "all", "rewards")) {
    lv_cheater=true;}
    if ((gv_rEWARDCAP + 5000)<= gf_bankgetint(lp_bank, "all", "rewards")) {
    lv_cheater=true;}
    if (((gf_bankgetint(lp_bank, "0", "rewards"))+(gf_bankgetint(lp_bank, "1", "rewards"))+(gf_bankgetint(lp_bank, "2", "rewards"))+(gf_bankgetint(lp_bank, "3", "rewards"))+(gf_bankgetint(lp_bank, "4", "rewards")))>=250) {
    lv_cheater=true;}
    if (((gf_bankgetint(lp_bank, "5", "rewards"))+(gf_bankgetint(lp_bank, "6", "rewards"))+(gf_bankgetint(lp_bank, "7", "rewards"))+(gf_bankgetint(lp_bank, "8", "rewards"))+(gf_bankgetint(lp_bank, "9", "rewards")))>=250) {
    lv_cheater=true;}
    lv_l=gf_bankgetint(lp_bank, "0", "rewards")+gf_bankgetint(lp_bank, "1", "rewards")+gf_bankgetint(lp_bank, "2", "rewards")+gf_bankgetint(lp_bank, "3", "rewards")+gf_bankgetint(lp_bank, "4", "rewards");
    if(lv_l>10){
    if(lv_l<20){lv_m=Pow(lv_l,2.0);}else{if(lv_l<50){lv_m=Pow(lv_l,2.38);}else{lv_m=Pow(lv_l,2.45);}}
    }
    lv_l=gf_bankgetint(lp_bank, "5", "rewards")+gf_bankgetint(lp_bank, "6", "rewards")+gf_bankgetint(lp_bank, "7", "rewards")+gf_bankgetint(lp_bank, "8", "rewards")+gf_bankgetint(lp_bank, "9", "rewards");
    if(lv_l>10){
    if(lv_l<20){lv_m+=Pow(lv_l,2.0);}else{if(lv_l<50){lv_m+=Pow(lv_l,2.38);}else{lv_m+=Pow(lv_l,2.45);}}
    }
    if (lv_m>(gf_bankgetint(lp_bank, "all", "rewards")-gf_bankgetint(lp_bank, "unspend", "rewards"))) {lv_cheater=true;}
    if (gf_bankgetint(lp_bank, "unspend", "rewards") < 0) {lv_cheater=true;}
    if (gf_bankgetint(lp_bank, "ps", "option")==1){gv_zstickselect[lp_pnum]=true;gf_chatcommandstickselect(lp_pnum);}
    while(lv_k<5){
      lv_k+=1;
      if (BankSectionExists(lp_bank, IntToString(lv_k))) {
        if ((gf_bankgetint(lp_bank, "12", IntToString(lv_k)) > 0)) {
          gf_bankaddtoint(lp_bank, IntToString(lv_k), "completeruns", 1);
        }    
        BankSectionRemove(lp_bank, IntToString(lv_k));
      }
    }
    lv_tempstring = BankValueGetAsString(lp_bank, "acm", "a");
    if ((lv_cheater == false)) {
        UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/6BCD9D14"));
        BankValueSetFromString(lp_bank, "acm", "a", gf_bankacmfillwith0(lv_tempstring));
        BankSave(lp_bank);
        gv_rewardUnspend[lp_pnum] = gf_bankgetint(lp_bank, "unspend", "rewards");
        gv_rewardaccumulated[lp_pnum] = gf_bankgetint(lp_bank, "all", "rewards");
        while ((lv_i < 15)) {
            gv_rewardUsed[lp_pnum][lv_i] = gf_bankgetint(lp_bank, IntToString(lv_i), "rewards");
            lv_i += 1;
        }
        if ((gf_bankgetint(lp_bank, "98", "version") < 1) && (gf_bankgetint(lp_bank, "all", "rewards") > 0)) {
            gf_rewardreset(lp_pnum);
            gf_bankaddtoint(lp_bank, "98", "version", 1);
            if ((gv_rewardaccumulated[lp_pnum] >= 1)) {
                UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/78C1E000"));
            }

        }
        else {
            if ((gf_bankgetint(lp_bank, "98", "version") < 1)) {
                gf_bankaddtoint(lp_bank, "98", "version", 1);
            }

        }
    }
    else {
        BankSectionRemove(lp_bank, "completeruns");
        BankSectionRemove(lp_bank, "time");
        BankSectionRemove(lp_bank, "points");
        BankSectionRemove(lp_bank, "rewards");
        BankSectionRemove(lp_bank, "acm");
        BankSectionRemove(lp_bank, "tip");
        BankValueSetFromString(lp_bank, "acm", "a", gf_bankacmfillwith0(""));
        BankSave(lp_bank);
        UIDisplayMessage(PlayerGroupSingle(lp_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/629FD88A"));
    }
}

string gf_bankacmfillwith0 (string lp_current) {
    // Variable Declarations
    int lv_i;
    int lv_amount;
    string lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_amount = ((gv_zacmCounter / 2) - StringLength(lp_current));
    lv_temp = "";

    // Implementation
    while ((lv_i < lv_amount)) {
        lv_i += 1;
        lv_temp = (lv_temp + "0");
    }
    return (lp_current + lv_temp);
}

int gf_bankgetint (bank lp_bank, string lp_key, string lp_section) {
    // Automatic Variable Declarations
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == true)) {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, 0);
        return 0;
    }
}

void gf_bankaddtoint (bank lp_bank, string lp_key, string lp_section, int lp_value) {
    // Variable Declarations
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_k = gf_bankgetint(lp_bank, lp_key, lp_section);

    // Implementation
    if ((lp_bank == null)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/6B8255C2"));
    }

    lv_k += lp_value;
    BankValueSetFromInt(lp_bank, lp_section, lp_key, lv_k);
    BankSave(lp_bank);
}

void gf_banksetc (int lp_pnum, bank lp_bank) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerHandle(lp_pnum) != "")) {
        BankValueSetFromInt(lp_bank, "version", "c", (StringToInt(StringSub(PlayerHandle(lp_pnum), 8, 18))+gf_bankgetint(lp_bank, "all", "rewards")+gf_achievementpointsum(lp_pnum))%9);
    }
    else {
        BankValueSetFromInt(lp_bank, "version", "c", (0+gf_bankgetint(lp_bank, "all", "rewards")+gf_achievementpointsum(lp_pnum))%9);
    }
    BankSave(lp_bank);
}

void gf_bankconvertoldachievementdata197 (bank lp_bank) {
    // Variable Declarations
    int lv_i;
    string lv_acm;
    int lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_acm = "";

    // Implementation
    while ((lv_i < 48)) {
        lv_i += 1;
        if ((lv_i != 7) && (lv_i != 8)) {
            lv_temp = (gf_bankgetint(lp_bank, IntToString(lv_i), "acm") + (gf_bankgetint(lp_bank, IntToString(lv_i+1), "acm") * 8));
            BankKeyRemove(lp_bank, "acm", IntToString(lv_i));
            BankKeyRemove(lp_bank, "acm", IntToString(lv_i+1));
        }
        else {
            lv_temp = 0;
        }
        lv_acm = (lv_acm + gf_decto45(lv_temp));
        lv_i += 1;
    }
    BankValueSetFromString(lp_bank, "acm", "a", lv_acm);
    BankSave(lp_bank);
}

string gf_decto45 (int lp_num) {
    // Variable Declarations
    string lv__32string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__32string = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    // Implementation
    return StringSub(lv__32string, lp_num+1, lp_num+1);
}

int gf__45todec (string lp__45num) {
    // Variable Declarations
    int lv_i;
    string lv__32string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__32string = "0123456789abcdefhijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

    // Implementation
    while ((lv_i < 47)) {
        lv_i += 1;
        if ((lp__45num == StringSub(lv__32string, lv_i, lv_i))) {
            return lv_i-1;
        }

    }
    return 0;
}

int gf_split45to2 (int lp__45, int lp_achievement) {
    // Automatic Variable Declarations
    // Implementation
    if ((ModI(lp_achievement, 2) == 0)) {
        return (lp__45 / 8);
    }
    else {
        return lp__45%8;
    }
}

void gf_UnitAddCustomValue (unit lp_unit, fixed lp_amount, int lp_number) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_unit, lp_number, (lp_amount + UnitGetCustomValue(lp_unit, lp_number)));
}

void gf_addlife (unit lp_target, fixed lp_amount, bool lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_percent == true)) {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropLifePercent, c_unitPropCurrent) + lp_amount) <= 100.0)) {
            UnitSetPropertyFixed(lp_target, c_unitPropLifePercent, (UnitGetPropertyFixed(lp_target, c_unitPropLifePercent, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropLifePercent, 100.0);
        }
    }
    else {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) + lp_amount) <= UnitGetPropertyFixed(lp_target, c_unitPropLifeMax, c_unitPropCurrent))) {
            UnitSetPropertyFixed(lp_target, c_unitPropLife, (UnitGetPropertyFixed(lp_target, c_unitPropLife, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropLife, UnitGetPropertyFixed(lp_target, c_unitPropLifeMax, c_unitPropCurrent));
        }
    }
}

void gf_addshield (unit lp_target, fixed lp_amount, bool lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_percent == true)) {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropShieldsPercent, c_unitPropCurrent) + lp_amount) <= 100.0)) {
            UnitSetPropertyFixed(lp_target, c_unitPropShieldsPercent, (UnitGetPropertyFixed(lp_target, c_unitPropShieldsPercent, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropShields, c_unitPropCurrent) + lp_amount) <= UnitGetPropertyFixed(lp_target, c_unitPropShieldsMax, c_unitPropCurrent))) {
            UnitSetPropertyFixed(lp_target, c_unitPropShields, (UnitGetPropertyFixed(lp_target, c_unitPropShields, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropShields, UnitGetPropertyFixed(lp_target, c_unitPropShieldsMax, c_unitPropCurrent));
        }
    }
}

void gf_addenergy (unit lp_target, fixed lp_amount, bool lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_percent == true)) {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropEnergyPercent, c_unitPropCurrent) + lp_amount) <= 100.0)) {
            UnitSetPropertyFixed(lp_target, c_unitPropEnergyPercent, (UnitGetPropertyFixed(lp_target, c_unitPropEnergyPercent, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if (((UnitGetPropertyFixed(lp_target, c_unitPropEnergy, c_unitPropCurrent) + lp_amount) <= UnitGetPropertyFixed(lp_target, c_unitPropEnergyMax, c_unitPropCurrent))) {
            UnitSetPropertyFixed(lp_target, c_unitPropEnergy, (UnitGetPropertyFixed(lp_target, c_unitPropEnergy, c_unitPropCurrent) + lp_amount));
        }
        else {
            UnitSetPropertyFixed(lp_target, c_unitPropEnergy, UnitGetPropertyFixed(lp_target, c_unitPropEnergyMax, c_unitPropCurrent));
        }
    }
}

trigger auto_gf_SkillPlasmaTorpedo_Trigger = null;
point auto_gf_SkillPlasmaTorpedo_lp_origin;
unit auto_gf_SkillPlasmaTorpedo_lp_caster;
int auto_gf_SkillPlasmaTorpedo_lp_owner;
fixed auto_gf_SkillPlasmaTorpedo_lp_heading;

void gf_SkillPlasmaTorpedo (point lp_origin, unit lp_caster, int lp_owner, fixed lp_heading) {
    auto_gf_SkillPlasmaTorpedo_lp_origin = lp_origin;
    auto_gf_SkillPlasmaTorpedo_lp_caster = lp_caster;
    auto_gf_SkillPlasmaTorpedo_lp_owner = lp_owner;
    auto_gf_SkillPlasmaTorpedo_lp_heading = lp_heading;

    if (auto_gf_SkillPlasmaTorpedo_Trigger == null) {
        auto_gf_SkillPlasmaTorpedo_Trigger = TriggerCreate("auto_gf_SkillPlasmaTorpedo_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkillPlasmaTorpedo_Trigger, false, false);
}

bool auto_gf_SkillPlasmaTorpedo_TriggerFunc (bool testConds, bool runActions) {
    point lp_origin = auto_gf_SkillPlasmaTorpedo_lp_origin;
    unit lp_caster = auto_gf_SkillPlasmaTorpedo_lp_caster;
    int lp_owner = auto_gf_SkillPlasmaTorpedo_lp_owner;
    fixed lp_heading = auto_gf_SkillPlasmaTorpedo_lp_heading;

    // Variable Declarations
    fixed lv_heading;
    fixed lv_distance;
    fixed lv_change;
    unit lv_missile;
    int lv_range;
    point lv_oldpos;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heading = lp_heading;
    lv_distance = 1.0;
    lv_change = 4.5;
    lv_range = (160 + (32 * TechTreeUpgradeCount(lp_owner, "PlasmaTorpedoRange", c_techCountCompleteOnly)));

    // Implementation
    UnitCreate(1, "PlasmaTorpedo", c_unitCreateIgnorePlacement, lp_owner, PointWithOffsetPolar(lp_origin, 1.0, lp_heading), lp_heading);
    lv_missile = UnitLastCreated();
    UnitBehaviorAdd(lv_missile, "plasmacharge", lp_caster, (TechTreeUpgradeCount(lp_owner, "PlasmaTorpedoCharge", c_techCountCompleteOnly) + 1));
    UnitBehaviorAdd(lv_missile, "PlasmaTorpedo", lp_caster, 1);
    while ((UnitIsAlive(lv_missile) == true) && (lv_range > 0)) {
        lv_oldpos = UnitGetPosition(lv_missile);
        lv_heading = lv_heading+lv_change;
        lv_change = lv_change-0.0125;
        lv_distance = lv_distance+0.025;
        lv_range -= 1;
        UnitSetPosition(lv_missile, PointWithOffsetPolar(lp_origin, lv_distance, lv_heading), true);
        UnitSetFacing(lv_missile, AngleBetweenPoints(lv_oldpos, UnitGetPosition(lv_missile)), 0.0625);
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_missile) == true)) {
        UnitKill(lv_missile);
    }

    return true;
}

trigger auto_gf_SkillGuidedMissile_Trigger = null;
unit auto_gf_SkillGuidedMissile_lp_caster;
int auto_gf_SkillGuidedMissile_lp_owner;
point auto_gf_SkillGuidedMissile_lp_target;
point auto_gf_SkillGuidedMissile_lp_origin;
int auto_gf_SkillGuidedMissile_lp_pierce;
int auto_gf_SkillGuidedMissile_lp_split;

void gf_SkillGuidedMissile (unit lp_caster, int lp_owner, point lp_target, point lp_origin, int lp_pierce, int lp_split) {
    auto_gf_SkillGuidedMissile_lp_caster = lp_caster;
    auto_gf_SkillGuidedMissile_lp_owner = lp_owner;
    auto_gf_SkillGuidedMissile_lp_target = lp_target;
    auto_gf_SkillGuidedMissile_lp_origin = lp_origin;
    auto_gf_SkillGuidedMissile_lp_pierce = lp_pierce;
    auto_gf_SkillGuidedMissile_lp_split = lp_split;

    if (auto_gf_SkillGuidedMissile_Trigger == null) {
        auto_gf_SkillGuidedMissile_Trigger = TriggerCreate("auto_gf_SkillGuidedMissile_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkillGuidedMissile_Trigger, false, false);
}

bool auto_gf_SkillGuidedMissile_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_SkillGuidedMissile_lp_caster;
    int lp_owner = auto_gf_SkillGuidedMissile_lp_owner;
    point lp_target = auto_gf_SkillGuidedMissile_lp_target;
    point lp_origin = auto_gf_SkillGuidedMissile_lp_origin;
    int lp_pierce = auto_gf_SkillGuidedMissile_lp_pierce;
    int lp_split = auto_gf_SkillGuidedMissile_lp_split;

    // Variable Declarations
    fixed lv_ttl;
    fixed lv_maxrange;
    unit lv_targetunit;
    fixed lv_heading;
    unitgroup lv_targetgrp;
    point lv_point;
    unit lv_missile;
    fixed lv_scanrange;
    int lv_pierceleft;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ttl = (4.0 + IntToFixed(TechTreeUpgradeCount(lp_owner, "GuidedMissileTTL", c_techCountQueuedOrBetter)));
    lv_maxrange = 12.0;
    lv_heading = AngleBetweenPoints(lp_origin, lp_target);
    lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lp_caster), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_scanrange = (2.0 + IntToFixed(TechTreeUpgradeCount(lp_owner, "GuidedMissileScanrange", c_techCountQueuedOrBetter)));

    // Implementation
    UnitCreate(1, "WarpHeroMissile", c_unitCreateIgnorePlacement, lp_owner, lp_origin, AngleBetweenPoints(lp_origin, lp_target));
    lv_missile = UnitLastCreated();
    while ((UnitIsAlive(lv_missile) == true) && (lv_ttl > 0.0) && (DistanceBetweenPoints(UnitGetPosition(lv_missile), lp_origin) <= 12.0)) {
        lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lv_missile), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) >= 1)) {
            UnitCreateEffectPoint(lp_caster, "GuidedImpactSearchArea", UnitGetPosition(lv_missile));
            lv_point = UnitGetPosition(lv_missile);
            UnitKill(lv_missile);
        }
        else {
            if (((lv_targetunit == null) || (UnitIsAlive(lv_targetunit) == false))) {
                UnitSetPosition(lv_missile, PointWithOffsetPolar(UnitGetPosition(lv_missile), 0.1875, lv_heading), true);
                lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lv_missile), lv_scanrange), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) >= 1)) {
                    lv_targetunit = UnitGroupRandomUnit(lv_targetgrp, c_unitCountAll);
                }

            }
            else {
                lv_heading = AngleBetweenPoints(UnitGetPosition(lv_missile), UnitGetPosition(lv_targetunit));
                UnitSetFacing(lv_missile, lv_heading, 0.0625);
                UnitSetPosition(lv_missile, PointWithOffsetPolar(UnitGetPosition(lv_missile), 0.1875, lv_heading), true);
            }
        }
        Wait(0.0625, c_timeGame);
        lv_ttl -= 0.0625;
    }
    if ((UnitIsAlive(lv_missile) == true)) {
        UnitCreateEffectPoint(lp_caster, "GuidedImpactSearchArea", UnitGetPosition(lv_missile));
        UnitKill(lv_missile);
    }
    else {
        if ((lp_pierce > 0)) {
            if ((lp_split == 1)) {
                gf_SkillGuidedMissile(lp_caster, lp_owner, PointWithOffsetPolar(lv_point, 2.0, lv_heading), PointWithOffsetPolar(lv_point, 1.0, (lv_heading + 15.0)), (lp_pierce - 1), 0);
                gf_SkillGuidedMissile(lp_caster, lp_owner, PointWithOffsetPolar(lv_point, 2.0, lv_heading), PointWithOffsetPolar(lv_point, 1.0, (lv_heading - 15.0)), (lp_pierce - 1), 0);
            }
            else {
                gf_SkillGuidedMissile(lp_caster, lp_owner, PointWithOffsetPolar(lv_point, 2.0, lv_heading), PointWithOffsetPolar(lv_point, 1.0, lv_heading), (lp_pierce - 1), 0);
            }
        }

    }
    return true;
}

trigger auto_gf_SkillStrafeShot_Trigger = null;
unit auto_gf_SkillStrafeShot_lp_caster;
unit auto_gf_SkillStrafeShot_lp_location;
int auto_gf_SkillStrafeShot_lp_owner;

void gf_SkillStrafeShot (unit lp_caster, unit lp_location, int lp_owner) {
    auto_gf_SkillStrafeShot_lp_caster = lp_caster;
    auto_gf_SkillStrafeShot_lp_location = lp_location;
    auto_gf_SkillStrafeShot_lp_owner = lp_owner;

    if (auto_gf_SkillStrafeShot_Trigger == null) {
        auto_gf_SkillStrafeShot_Trigger = TriggerCreate("auto_gf_SkillStrafeShot_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkillStrafeShot_Trigger, false, false);
}

bool auto_gf_SkillStrafeShot_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_SkillStrafeShot_lp_caster;
    unit lp_location = auto_gf_SkillStrafeShot_lp_location;
    int lp_owner = auto_gf_SkillStrafeShot_lp_owner;

    // Variable Declarations
    unit lv_target;
    unitgroup lv_targetgrp;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lp_location), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);

    // Implementation
    if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) >= 1)) {
        lv_point = UnitGetPosition(UnitGroupRandomUnit(lv_targetgrp, c_unitCountAll));
        lv_point = gf_targetmissilespell(lp_caster, lp_owner, false, UnitGetPosition(lp_location), lv_point, "WarpHeroMissile", 3.0, 0.25, 0.5, UnitGroupEmpty());
        UnitCreateEffectPoint(lp_caster, "ImmortalStrafeImpactSet", lv_point);
    }
    else {
        lv_point = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_location), 12.0));
        lv_point = gf_targetmissilespell(lp_caster, lp_owner, false, UnitGetPosition(lp_location), lv_point, "WarpHeroMissile", 3.0, 0.25, 0.5, UnitGroupEmpty());
        UnitCreateEffectPoint(lp_caster, "ImmortalStrafeImpactSet", lv_point);
    }
    return true;
}

trigger auto_gf_SkillMultishot_Trigger = null;
unit auto_gf_SkillMultishot_lp_caster;
unit auto_gf_SkillMultishot_lp_location;
int auto_gf_SkillMultishot_lp_owner;
point auto_gf_SkillMultishot_lp_target;

void gf_SkillMultishot (unit lp_caster, unit lp_location, int lp_owner, point lp_target) {
    auto_gf_SkillMultishot_lp_caster = lp_caster;
    auto_gf_SkillMultishot_lp_location = lp_location;
    auto_gf_SkillMultishot_lp_owner = lp_owner;
    auto_gf_SkillMultishot_lp_target = lp_target;

    if (auto_gf_SkillMultishot_Trigger == null) {
        auto_gf_SkillMultishot_Trigger = TriggerCreate("auto_gf_SkillMultishot_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkillMultishot_Trigger, false, false);
}

bool auto_gf_SkillMultishot_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_SkillMultishot_lp_caster;
    unit lp_location = auto_gf_SkillMultishot_lp_location;
    int lp_owner = auto_gf_SkillMultishot_lp_owner;
    point lp_target = auto_gf_SkillMultishot_lp_target;

    // Variable Declarations
    unit lv_target;
    unitgroup lv_targetgrp;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lp_caster), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_point = lp_target;

    // Implementation
    lv_point = gf_targetmissilespell(lp_caster, lp_owner, false, UnitGetPosition(lp_location), lp_target, "WarpHeroMissile", 3.0, 0.25, 0.75, UnitGroupEmpty());
    UnitCreateEffectPoint(lp_caster, "MultishotImpactSearchArea", lv_point);
    return true;
}

trigger auto_gf_SkillMultishotTalent_Trigger = null;
fixed auto_gf_SkillMultishotTalent_lp_delay;
unit auto_gf_SkillMultishotTalent_lp_caster;
unit auto_gf_SkillMultishotTalent_lp_location;
int auto_gf_SkillMultishotTalent_lp_owner;
point auto_gf_SkillMultishotTalent_lp_target;

void gf_SkillMultishotTalent (fixed lp_delay, unit lp_caster, unit lp_location, int lp_owner, point lp_target) {
    auto_gf_SkillMultishotTalent_lp_delay = lp_delay;
    auto_gf_SkillMultishotTalent_lp_caster = lp_caster;
    auto_gf_SkillMultishotTalent_lp_location = lp_location;
    auto_gf_SkillMultishotTalent_lp_owner = lp_owner;
    auto_gf_SkillMultishotTalent_lp_target = lp_target;

    if (auto_gf_SkillMultishotTalent_Trigger == null) {
        auto_gf_SkillMultishotTalent_Trigger = TriggerCreate("auto_gf_SkillMultishotTalent_TriggerFunc");
    }

    TriggerExecute(auto_gf_SkillMultishotTalent_Trigger, false, false);
}

bool auto_gf_SkillMultishotTalent_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_gf_SkillMultishotTalent_lp_delay;
    unit lp_caster = auto_gf_SkillMultishotTalent_lp_caster;
    unit lp_location = auto_gf_SkillMultishotTalent_lp_location;
    int lp_owner = auto_gf_SkillMultishotTalent_lp_owner;
    point lp_target = auto_gf_SkillMultishotTalent_lp_target;

    // Variable Declarations
    unit lv_target;
    unitgroup lv_targetgrp;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lp_caster), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_point = lp_target;

    // Implementation
    Wait(lp_delay, c_timeGame);
    if ((UnitIsAlive(lp_location) == true)) {
        lv_point = gf_targetmissilespell(lp_caster, lp_owner, false, UnitGetPosition(lp_location), lp_target, "WarpHeroMissile", 3.0, 0.25, 0.75, UnitGroupEmpty());
        UnitCreateEffectPoint(lp_caster, "MultishotImpactSearchArea", lv_point);
    }

    return true;
}

void gf_AddShadowEnergy (bool lp_reset, int lp_owner, int lp_amount) {
    // Variable Declarations
    int lv_heron;
    fixed lv_amount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heron = (lp_owner - 1);
    lv_amount = IntToFixed(lp_amount);

    // Implementation
    if ((UnitIsAlive(gv_hero[lv_heron]) == true)) {
        gf_addenergy(gv_hero[lv_heron], 0.125*TechTreeUpgradeCount(lp_owner, "ShadowEnergyToEnergy", c_techCountCompleteOnly)*lp_amount, false);
        gf_UnitAddCustomValue(gv_hero[lv_heron], lv_amount, 1);
        if ((UnitGetCustomValue(gv_hero[lv_heron], 1) >= 100.0)) {
            gf_UnitAddCustomValue(gv_hero[lv_heron], -100.0, 1);
            gf_AEShadowCrash(lp_owner);
        }

    }

    libNtve_gf_SetUpgradeLevelForPlayer(lp_owner, "ShadowEnergyChargeDummy", FixedToInt(UnitGetCustomValue(gv_hero[lv_heron], 1)));
}

void gf_AEShadowCrash (int lp_owner) {
    // Variable Declarations
    int lv_counter;
    unitgroup lv_targets;
    int lv_maxcount;
    unit lv_target;
    int lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targets = UnitGroup(null, 6, RegionCircle(UnitGetPosition(gv_hero[(lp_owner - 1)]), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_maxcount = (10 + (TechTreeUpgradeCount(lp_owner, "Midnight", c_techCountQueuedOrBetter) * 2));
    lv_energy = TechTreeUpgradeCount(lp_owner, "ShadowcrashAEEnergy", c_techCountQueuedOrBetter);

    // Implementation
    SoundPlayAtPointForPlayer(SoundLink("DarkEnergySound", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(gv_hero[(lp_owner - 1)]), 0.0, 100.0, 0.0);
    while ((UnitGroupCount(lv_targets, c_unitCountAll) >= 1) && (lv_maxcount > 0)) {
        lv_target = UnitGroupRandomUnit(lv_targets, c_unitCountAll);
        lv_maxcount -= 1;
        if ((lv_maxcount >= UnitGroupCount(lv_targets, c_unitCountAlive))) {
            lv_counter += 1;
            if ((lv_counter >= (1 + TechTreeUpgradeCount((lp_owner - 0), "Midnight", c_techCountQueuedOrBetter)))) {
                UnitGroupRemove(lv_targets, lv_target);
                lv_counter = 0;
            }

        }
        else {
            UnitGroupRemove(lv_targets, lv_target);
        }
        Wait(0.1, c_timeGame);
        gf_Shadowcrash(lv_energy, UnitGetPosition(lv_target), UnitGetPosition(gv_hero[(lp_owner - 1)]), lp_owner, gv_hero[(lp_owner - 1)]);
        if ((UnitIsAlive(gv_hero[(lp_owner - 1)]) == true) && (RandomInt(0, 100) > (100 - (TechTreeUpgradeCount(lp_owner, "Condemnation", c_techCountQueuedOrBetter) * 33)))) {
            if ((UnitIsAlive(lv_target) == true)) {
                gf_AddShadowEnergy(false, lp_owner, (2 * TechTreeUpgradeCount(lp_owner, "DoomEnergy", c_techCountQueuedOrBetter)));
                gf_DoomDetonate(lp_owner, gv_hero[(lp_owner - 1)], ((TechTreeUpgradeCount(lp_owner, "DoomDamage", c_techCountQueuedOrBetter) * 45.0) + 150.0), UnitGetPosition(lv_target));
            }

        }

    }
}

void gf_SkillShadowWallofDarkness (unit lp_target) {
    // Variable Declarations
    int lv_energy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_energy = ((TechTreeUpgradeCount(UnitGetOwner(lp_target), "BlackwallEnergy", c_techCountQueuedOrBetter) * 2) + 1);

    // Implementation
    gf_AddShadowEnergy(false, UnitGetOwner(lp_target), lv_energy);
}

trigger auto_gf_Shadowwallofdarkness_Trigger = null;
unit auto_gf_Shadowwallofdarkness_lp_hero;

void gf_Shadowwallofdarkness (unit lp_hero) {
    auto_gf_Shadowwallofdarkness_lp_hero = lp_hero;

    if (auto_gf_Shadowwallofdarkness_Trigger == null) {
        auto_gf_Shadowwallofdarkness_Trigger = TriggerCreate("auto_gf_Shadowwallofdarkness_TriggerFunc");
    }

    TriggerExecute(auto_gf_Shadowwallofdarkness_Trigger, false, false);
}

bool auto_gf_Shadowwallofdarkness_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_gf_Shadowwallofdarkness_lp_hero;

    // Automatic Variable Declarations
    // Implementation
    while ((UnitIsAlive(lp_hero) == true)) {
        Wait(0.25, c_timeGame);
        while ((UnitBehaviorCount(lp_hero, "wallofshadowhidden") >= 1)) {
            gf_SkillShadowWallofDarkness(lp_hero);
            UnitBehaviorRemove(lp_hero, "wallofshadowhidden", 1);
        }
    }
    return true;
}

void gf_DoomDetonate (int lp_owner, unit lp_caster, fixed lp_damage, point lp_point) {
    // Variable Declarations
    unitgroup lv_targetgrp;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroup(null, 6, RegionCircle(lp_point, ((IntToFixed(TechTreeUpgradeCount(lp_owner, "DoomRange", c_techCountQueuedOrBetter)) * 0.6) + 2.4)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    UnitCreateEffectPoint(lp_caster, "DoomDetonate", lp_point);
    while ((UnitGroupCount(lv_targetgrp, c_unitCountAll) > 0)) {
        lv_target = UnitGroupUnit(lv_targetgrp, 1);
        UnitDamage(lp_caster, "FireballDamage", lv_target, lp_damage);
        UnitGroupRemove(lv_targetgrp, lv_target);
    }
}

trigger auto_gf_Shadowcrash_Trigger = null;
int auto_gf_Shadowcrash_lp_gainenergy;
point auto_gf_Shadowcrash_lp_targetpoint;
point auto_gf_Shadowcrash_lp_startpoint;
int auto_gf_Shadowcrash_lp_owner;
unit auto_gf_Shadowcrash_lp_caster;

void gf_Shadowcrash (int lp_gainenergy, point lp_targetpoint, point lp_startpoint, int lp_owner, unit lp_caster) {
    auto_gf_Shadowcrash_lp_gainenergy = lp_gainenergy;
    auto_gf_Shadowcrash_lp_targetpoint = lp_targetpoint;
    auto_gf_Shadowcrash_lp_startpoint = lp_startpoint;
    auto_gf_Shadowcrash_lp_owner = lp_owner;
    auto_gf_Shadowcrash_lp_caster = lp_caster;

    if (auto_gf_Shadowcrash_Trigger == null) {
        auto_gf_Shadowcrash_Trigger = TriggerCreate("auto_gf_Shadowcrash_TriggerFunc");
    }

    TriggerExecute(auto_gf_Shadowcrash_Trigger, false, false);
}

bool auto_gf_Shadowcrash_TriggerFunc (bool testConds, bool runActions) {
    int lp_gainenergy = auto_gf_Shadowcrash_lp_gainenergy;
    point lp_targetpoint = auto_gf_Shadowcrash_lp_targetpoint;
    point lp_startpoint = auto_gf_Shadowcrash_lp_startpoint;
    int lp_owner = auto_gf_Shadowcrash_lp_owner;
    unit lp_caster = auto_gf_Shadowcrash_lp_caster;

    // Variable Declarations
    unit lv_target;
    point lv_impactpoint;
    unitgroup lv_targetgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_startpoint, lp_targetpoint, "ShadowCrashMissile", 2.8, 0.275, 1.0, UnitGroupEmpty());
    lv_target = gf_targetmisslespelltarget(lp_owner, lv_impactpoint, 1.0, false);
    if ((lv_target != null)) {
        lv_impactpoint = UnitGetPosition(lv_target);
    }

    UnitCreateEffectPoint(lp_caster, "ShadowcrashImpact", lv_impactpoint);
    if ((UnitIsAlive(lp_caster) == true)) {
        lv_targetgrp = gf_targetmisslespelltargets2(lp_owner, lv_impactpoint, 1.0+(0.5*IntToFixed(TechTreeUpgradeCount(lp_owner, "ShadowcrashRange", c_techCountQueuedOrBetter))), false, UnitGroupEmpty());
        while ((UnitGroupCount(lv_targetgrp, c_unitCountAll) > 0)) {
            lv_target = UnitGroupUnit(lv_targetgrp, 1);
            UnitDamage(lp_caster, "LightningDamage", lv_target, 40.0);
            gf_AddShadowEnergy(false, lp_owner, lp_gainenergy);
            if ((UnitIsAlive(lv_target) == true) && (UnitFilterMatch(lv_target, 6, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true)) {
                UnitSetPosition(lv_target, lv_impactpoint, true);
                UnitBehaviorAdd(lv_target, "Shadowcrash", lp_caster, TechTreeUpgradeCount(lp_owner, "ShadowcrashSlow", c_techCountQueuedOrBetter));
            }

            UnitGroupRemove(lv_targetgrp, lv_target);
        }
    }

    return true;
}

trigger auto_gf_StaticArmor_Trigger = null;
unit auto_gf_StaticArmor_lp_caster;

void gf_StaticArmor (unit lp_caster) {
    auto_gf_StaticArmor_lp_caster = lp_caster;

    if (auto_gf_StaticArmor_Trigger == null) {
        auto_gf_StaticArmor_Trigger = TriggerCreate("auto_gf_StaticArmor_TriggerFunc");
    }

    TriggerExecute(auto_gf_StaticArmor_Trigger, false, false);
}

bool auto_gf_StaticArmor_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_StaticArmor_lp_caster;

    // Variable Declarations
    fixed lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = 1.0;

    // Implementation
    while ((UnitIsAlive(lp_caster) == true)) {
        lv_timer += 1.0;
        if ((lv_timer >= UnitGetCustomValue(lp_caster, 21))) {
            if ((UnitBehaviorCount(lp_caster, "StaticArmor") < FixedToInt(UnitGetCustomValue(lp_caster, 20)))) {
                lv_timer = 1.0;
                UnitBehaviorAdd(lp_caster, "StaticArmor", lp_caster, 1);
            }
            else {
                lv_timer = 1.0;
                UnitCreateEffectUnit(lp_caster, "ZapSet", lp_caster);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_Thunderfury_Trigger = null;
unit auto_gf_Thunderfury_lp_caster;
point auto_gf_Thunderfury_lp_target;
int auto_gf_Thunderfury_lp_owner;
fixed auto_gf_Thunderfury_lp_range;
fixed auto_gf_Thunderfury_lp_knockback;
fixed auto_gf_Thunderfury_lp_stormrage;

void gf_Thunderfury (unit lp_caster, point lp_target, int lp_owner, fixed lp_range, fixed lp_knockback, fixed lp_stormrage) {
    auto_gf_Thunderfury_lp_caster = lp_caster;
    auto_gf_Thunderfury_lp_target = lp_target;
    auto_gf_Thunderfury_lp_owner = lp_owner;
    auto_gf_Thunderfury_lp_range = lp_range;
    auto_gf_Thunderfury_lp_knockback = lp_knockback;
    auto_gf_Thunderfury_lp_stormrage = lp_stormrage;

    if (auto_gf_Thunderfury_Trigger == null) {
        auto_gf_Thunderfury_Trigger = TriggerCreate("auto_gf_Thunderfury_TriggerFunc");
    }

    TriggerExecute(auto_gf_Thunderfury_Trigger, false, false);
}

bool auto_gf_Thunderfury_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_Thunderfury_lp_caster;
    point lp_target = auto_gf_Thunderfury_lp_target;
    int lp_owner = auto_gf_Thunderfury_lp_owner;
    fixed lp_range = auto_gf_Thunderfury_lp_range;
    fixed lp_knockback = auto_gf_Thunderfury_lp_knockback;
    fixed lp_stormrage = auto_gf_Thunderfury_lp_stormrage;

    // Variable Declarations
    point lv_checkpoint;
    int lv_clifflevel;
    int lv_i;
    int lv_j;
    unitgroup lv_targetgrp;
    actor lv_m;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();

    // Implementation
    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lp_target, lp_range, false);
    gf_ThunderfuryKnockback(lp_caster, lp_knockback, lv_targetgrp);
    Wait(0.125, c_timeGame);
    while ((lv_i < UnitGroupCount(lv_targetgrp, c_unitCountAll))) {
        lv_i += 1;
        UnitBehaviorAdd(UnitGroupUnit(lv_targetgrp, lv_i), "Thunderfury", lp_caster, 1);
        if (((UnitHasBehavior2(UnitGroupUnit(lv_targetgrp, lv_i), "Frozen") == true) || (UnitHasBehavior2(UnitGroupUnit(lv_targetgrp, lv_i), "FrozenHeroic") == true)) && (RandomFixed(0.0, 1.0) < (IntToFixed(TechTreeUpgradeCount(lp_owner, "FrostFury", c_techCountQueuedOrBetter)) / 2.0))) {
            if ((UnitBehaviorCount(lp_caster, "StaticArmor") < FixedToInt(UnitGetCustomValue(lp_caster,20)))) {
                UnitBehaviorAdd(lp_caster, "StaticArmor", lp_caster, 1);
            }
            else {
                UnitCreateEffectUnit(lp_caster, "ZapSet", lp_caster);
            }
        }

        UnitCreateEffectUnit(lp_caster, "LightningHeroThunderfurySet", UnitGroupUnit(lv_targetgrp, lv_i));
        if ((lv_i <= 3)) {
            UnitCreateEffectUnit(lp_caster, "LightningHeroThunderfuryWrathSet", UnitGroupUnit(lv_targetgrp, lv_i));
        }

        if ((RandomFixed(0.0, 1.0) < 0.25*(TechTreeUpgradeCount(lp_owner, "ThunderfuryLightningsTalent", c_techCountCompleteOnly)))) {
            gf_Lightning(UnitGetPosition(lp_caster), UnitGetCustomValue(lp_caster,0), UnitGetCustomValue(lp_caster,1), UnitGetCustomValue(lp_caster,2), UnitGetCustomValue(lp_caster,3), FixedToInt(UnitGetCustomValue(lp_caster,4)), UnitGetPosition(UnitGroupUnit(lv_targetgrp, lv_i)), lp_caster, UnitGetOwner(lp_caster), 40.0, UnitGroupEmpty());
        }

    }
    return true;
}

trigger auto_gf_ThunderfuryKnockback_Trigger = null;
unit auto_gf_ThunderfuryKnockback_lp_caster;
fixed auto_gf_ThunderfuryKnockback_lp_knockback;
unitgroup auto_gf_ThunderfuryKnockback_lp_targetgrp;

void gf_ThunderfuryKnockback (unit lp_caster, fixed lp_knockback, unitgroup lp_targetgrp) {
    auto_gf_ThunderfuryKnockback_lp_caster = lp_caster;
    auto_gf_ThunderfuryKnockback_lp_knockback = lp_knockback;
    auto_gf_ThunderfuryKnockback_lp_targetgrp = lp_targetgrp;

    if (auto_gf_ThunderfuryKnockback_Trigger == null) {
        auto_gf_ThunderfuryKnockback_Trigger = TriggerCreate("auto_gf_ThunderfuryKnockback_TriggerFunc");
    }

    TriggerExecute(auto_gf_ThunderfuryKnockback_Trigger, false, false);
}

bool auto_gf_ThunderfuryKnockback_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_ThunderfuryKnockback_lp_caster;
    fixed lp_knockback = auto_gf_ThunderfuryKnockback_lp_knockback;
    unitgroup lp_targetgrp = auto_gf_ThunderfuryKnockback_lp_targetgrp;

    // Variable Declarations
    point lv_checkpoint;
    int lv_clifflevel;
    int lv_i;
    int lv_j;
    unitgroup lv_targetgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupCopy(lp_targetgrp);

    // Implementation
    while ((lv_j < 4)) {
        lv_j += 1;
        lv_i = 0;
        while ((lv_i < UnitGroupCount(lv_targetgrp, c_unitCountAll))) {
            lv_i += 1;
            lv_clifflevel = CliffLevel(UnitGetPosition(UnitGroupUnit(lv_targetgrp, lv_i)));
            lv_checkpoint = PointWithOffsetPolar(UnitGetPosition(UnitGroupUnit(lv_targetgrp, lv_i)), lp_knockback, AngleBetweenPoints(UnitGetPosition(lp_caster), UnitGetPosition(UnitGroupUnit(lv_targetgrp, lv_i))));
            if ((UnitFilterMatch(UnitGroupUnit(lv_targetgrp, lv_i), 6, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == false) && (UnitFilterMatch(UnitGroupUnit(lv_targetgrp, lv_i), 6, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), 0, 0)) == false) && (lv_clifflevel == CliffLevel(lv_checkpoint)) && (PointPathingPassable(lv_checkpoint) == true)) {
                UnitSetPosition(UnitGroupUnit(lv_targetgrp, lv_i), lv_checkpoint, true);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_Lightning_Trigger = null;
point auto_gf_Lightning_lp_origin;
fixed auto_gf_Lightning_lp_jumprange;
fixed auto_gf_Lightning_lp_jumpcount;
fixed auto_gf_Lightning_lp_extrachance;
fixed auto_gf_Lightning_lp_extraonsecondary;
int auto_gf_Lightning_lp_debuffstacks;
point auto_gf_Lightning_lp_target;
unit auto_gf_Lightning_lp_caster;
int auto_gf_Lightning_lp_owner;
fixed auto_gf_Lightning_lp_damage;
unitgroup auto_gf_Lightning_lp_excludedtargets;

void gf_Lightning (point lp_origin, fixed lp_jumprange, fixed lp_jumpcount, fixed lp_extrachance, fixed lp_extraonsecondary, int lp_debuffstacks, point lp_target, unit lp_caster, int lp_owner, fixed lp_damage, unitgroup lp_excludedtargets) {
    auto_gf_Lightning_lp_origin = lp_origin;
    auto_gf_Lightning_lp_jumprange = lp_jumprange;
    auto_gf_Lightning_lp_jumpcount = lp_jumpcount;
    auto_gf_Lightning_lp_extrachance = lp_extrachance;
    auto_gf_Lightning_lp_extraonsecondary = lp_extraonsecondary;
    auto_gf_Lightning_lp_debuffstacks = lp_debuffstacks;
    auto_gf_Lightning_lp_target = lp_target;
    auto_gf_Lightning_lp_caster = lp_caster;
    auto_gf_Lightning_lp_owner = lp_owner;
    auto_gf_Lightning_lp_damage = lp_damage;
    auto_gf_Lightning_lp_excludedtargets = lp_excludedtargets;

    if (auto_gf_Lightning_Trigger == null) {
        auto_gf_Lightning_Trigger = TriggerCreate("auto_gf_Lightning_TriggerFunc");
    }

    TriggerExecute(auto_gf_Lightning_Trigger, false, false);
}

bool auto_gf_Lightning_TriggerFunc (bool testConds, bool runActions) {
    point lp_origin = auto_gf_Lightning_lp_origin;
    fixed lp_jumprange = auto_gf_Lightning_lp_jumprange;
    fixed lp_jumpcount = auto_gf_Lightning_lp_jumpcount;
    fixed lp_extrachance = auto_gf_Lightning_lp_extrachance;
    fixed lp_extraonsecondary = auto_gf_Lightning_lp_extraonsecondary;
    int lp_debuffstacks = auto_gf_Lightning_lp_debuffstacks;
    point lp_target = auto_gf_Lightning_lp_target;
    unit lp_caster = auto_gf_Lightning_lp_caster;
    int lp_owner = auto_gf_Lightning_lp_owner;
    fixed lp_damage = auto_gf_Lightning_lp_damage;
    unitgroup lp_excludedtargets = auto_gf_Lightning_lp_excludedtargets;

    // Variable Declarations
    unitgroup lv_targetgrp;
    point lv_impactpoint;
    unit lv_target;
    unitgroup lv_excludedgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();
    lv_impactpoint = lp_target;
    lv_excludedgrp = lp_excludedtargets;

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_origin, lv_impactpoint, "LightningMissile", 2.5, 0.3, 1.0, lp_excludedtargets);
    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lv_impactpoint, 1.0, false);
    if ((UnitIsAlive(lp_caster) == false)) {
        return true;
    }

    if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) >= 1)) {
        lv_target = UnitGroupUnit(gf_targetmisslespelltargets(lp_owner, lv_impactpoint, 1.0, false), 1);
        UnitGroupAdd(lv_excludedgrp, lv_target);
        if ((UnitGetCustomValue(lp_caster, 23) > 0.0) && (RandomFixed(0.0, 1.0) < UnitGetCustomValue(lp_caster, 23)) && (UnitBehaviorCount(lp_caster, "StaticArmor") < FixedToInt(UnitGetCustomValue(lp_caster,20)))) {
            UnitBehaviorAdd(lp_caster, "StaticArmor", lp_caster, 1);
        }

        if ((lp_debuffstacks > 0)) {
            UnitBehaviorAdd(lv_target, "Lightning", lp_caster, lp_debuffstacks);
        }

        UnitCreateEffectUnit(lp_caster, "LightningHitDamage", lv_target);
        if ((UnitIsAlive(lp_caster) == true) && (RandomFixed(0.0, 1.0) < (lp_extrachance * 0.15))) {
            gf_Lightning(UnitGetPosition(lp_caster), lp_jumprange, UnitGetCustomValue(lp_caster, 1), lp_extrachance, lp_extraonsecondary, lp_debuffstacks, lp_target, lp_caster, lp_owner, lp_damage, UnitGroupEmpty());
        }

        if ((lp_jumpcount > 0.0)) {
            lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lv_impactpoint, lp_jumprange, false);
            libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_excludedgrp, lv_targetgrp);
            if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) > 0)) {
                if ((lp_extraonsecondary > 0.0)) {
                    gf_Lightning(lv_impactpoint, lp_jumprange, (lp_jumpcount - 1.0), lp_extrachance, lp_extraonsecondary, lp_debuffstacks, UnitGetPosition(UnitGroupUnit(lv_targetgrp, 1)), lp_caster, lp_owner, lp_damage, lv_excludedgrp);
                }
                else {
                    gf_Lightning(lv_impactpoint, lp_jumprange, (lp_jumpcount - 1.0), 0.0, lp_extraonsecondary, lp_debuffstacks, UnitGetPosition(UnitGroupUnit(lv_targetgrp, 1)), lp_caster, lp_owner, lp_damage, lv_excludedgrp);
                }
            }

        }

    }

    return true;
}

void gf_Poisonbolt (unit lp_caster, int lp_owner, point lp_origin, point lp_target, fixed lp_ttl, fixed lp_speed, fixed lp_damage, fixed lp_dotamount, fixed lp_dotduration, fixed lp_impactsize, unitgroup lp_excludedtargets, bool lp_psncloud) {
    // Variable Declarations
    unitgroup lv_targetgrp;
    point lv_impactpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();
    lv_impactpoint = lp_target;

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_origin, lv_impactpoint, "Poisonbolt", 3.0, 0.25, 1.0, lp_excludedtargets);
    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lv_impactpoint, lp_impactsize, false);
    while ((UnitIsAlive(lp_caster) == true) && (UnitGroupCount(lv_targetgrp, c_unitCountAll) > 0)) {
        if ((UnitIsAlive(UnitGroupUnit(lv_targetgrp, 1)) == true)) {
            UnitDamage(lp_caster, "PsnDMGDamage", UnitGroupUnit(lv_targetgrp, 1), lp_damage);
            gf_DamageOverTime(true, false, lp_dotamount/48, lp_dotduration, 0.0625, UnitGroupUnit(lv_targetgrp, 1), lp_caster);
            UnitBehaviorAdd(UnitGroupUnit(lv_targetgrp, 1), "Poisoned", lp_caster, 1);
            UnitBehaviorSetDuration(UnitGroupUnit(lv_targetgrp, 1), "Poisoned", FixedToInt(lp_dotduration));
        }

        UnitGroupRemove(lv_targetgrp, UnitGroupUnit(lv_targetgrp, 1));
    }
    if ((lp_psncloud == true) && (UnitIsAlive(lp_caster) == true)) {
        UnitCreateEffectPoint(lp_caster, "PoisonBubbleAtTarget", lv_impactpoint);
    }

}

void gf_MusclePoison (unit lp_caster, int lp_owner, point lp_origin, point lp_target, fixed lp_damage, fixed lp_dotduration, fixed lp_impactsize, bool lp_psnbolt, int lp_stacks) {
    // Variable Declarations
    unitgroup lv_targetgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();

    // Implementation
    if ((UnitBehaviorCount(lp_caster, "PoisonCloud") < FixedToInt(UnitGetCustomValue(lp_caster, 20)))) {
        UnitBehaviorAdd(lp_caster, "PoisonCloud", lp_caster, (0 + TechTreeUpgradeCount(lp_owner, "Blight", c_techCountQueuedOrBetter)));
    }

    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lp_target, lp_impactsize, false);
    while ((UnitIsAlive(lp_caster) == true) && (UnitGroupCount(lv_targetgrp, c_unitCountAll) > 0)) {
        if ((UnitIsAlive(UnitGroupUnit(lv_targetgrp, 1)) == true)) {
            UnitDamage(lp_caster, "PsnDMGDamage", UnitGroupUnit(lv_targetgrp, 1), lp_damage);
            UnitBehaviorAdd(UnitGroupUnit(lv_targetgrp, 1), "MusclePoison", lp_caster, lp_stacks);
            gf_MusclePoisonRemover(lp_dotduration, lp_stacks, UnitGroupUnit(lv_targetgrp, 1));
        }

        UnitGroupRemove(lv_targetgrp, UnitGroupUnit(lv_targetgrp, 1));
    }
    if ((UnitIsAlive(lp_caster) == true) && (lp_psnbolt == true)) {
        if(UnitGetCustomValue(lp_caster, 3)>0){
        gf_Poisonbolt(lp_caster, lp_owner, UnitGetPosition(lp_caster), lp_target, 3.0, 0.25, 30.0, UnitGetCustomValue(lp_caster, 2)/48, UnitGetCustomValue(lp_caster, 1), UnitGetCustomValue(lp_caster, 0), UnitGroupEmpty(), true);
        }
        else{
        gf_Poisonbolt(lp_caster, lp_owner, UnitGetPosition(lp_caster), lp_target, 3.0, 0.25, 30.0, UnitGetCustomValue(lp_caster, 2)/48, UnitGetCustomValue(lp_caster, 1), UnitGetCustomValue(lp_caster, 0), UnitGroupEmpty(), false);
        }
    }

}

trigger auto_gf_MusclePoisonRemover_Trigger = null;
fixed auto_gf_MusclePoisonRemover_lp_duration;
int auto_gf_MusclePoisonRemover_lp_stacks;
unit auto_gf_MusclePoisonRemover_lp_target;

void gf_MusclePoisonRemover (fixed lp_duration, int lp_stacks, unit lp_target) {
    auto_gf_MusclePoisonRemover_lp_duration = lp_duration;
    auto_gf_MusclePoisonRemover_lp_stacks = lp_stacks;
    auto_gf_MusclePoisonRemover_lp_target = lp_target;

    if (auto_gf_MusclePoisonRemover_Trigger == null) {
        auto_gf_MusclePoisonRemover_Trigger = TriggerCreate("auto_gf_MusclePoisonRemover_TriggerFunc");
    }

    TriggerExecute(auto_gf_MusclePoisonRemover_Trigger, false, false);
}

bool auto_gf_MusclePoisonRemover_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_gf_MusclePoisonRemover_lp_duration;
    int lp_stacks = auto_gf_MusclePoisonRemover_lp_stacks;
    unit lp_target = auto_gf_MusclePoisonRemover_lp_target;

    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < lp_stacks)) {
        Wait(lp_duration, c_timeGame);
        lv_i += 1;
        UnitBehaviorRemove(lp_target, "MusclePoison", 1);
    }
    return true;
}

void gf_SkillPoisonCloudCast (unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_target, "PoisonCloud", 1);
    UnitCreateEffectPoint(lp_target, "PoisonBubble", UnitGetPosition(lp_target));
}

trigger auto_gf_poisonarmorstacks_Trigger = null;
unit auto_gf_poisonarmorstacks_lp_caster;

void gf_poisonarmorstacks (unit lp_caster) {
    auto_gf_poisonarmorstacks_lp_caster = lp_caster;

    if (auto_gf_poisonarmorstacks_Trigger == null) {
        auto_gf_poisonarmorstacks_Trigger = TriggerCreate("auto_gf_poisonarmorstacks_TriggerFunc");
    }

    TriggerExecute(auto_gf_poisonarmorstacks_Trigger, false, false);
}

bool auto_gf_poisonarmorstacks_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_poisonarmorstacks_lp_caster;

    // Variable Declarations
    fixed lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = 1.0;

    // Implementation
    while ((UnitIsAlive(lp_caster) == true)) {
        lv_timer += 1.0;
        if ((UnitBehaviorCount(lp_caster, "PoisonCloud") < FixedToInt(UnitGetCustomValue(lp_caster, 20))) && (lv_timer >= 10.0)) {
            lv_timer = 1.0;
            UnitBehaviorAdd(lp_caster, "PoisonCloud", lp_caster, 1);
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_LuckOrbs_Trigger = null;
unit auto_gf_LuckOrbs_lp_hostUnit;
string auto_gf_LuckOrbs_lp_createdUnitType;
int auto_gf_LuckOrbs_lp_createdUnitCount;
int auto_gf_LuckOrbs_lp_player;
fixed auto_gf_LuckOrbs_lp_radius;
fixed auto_gf_LuckOrbs_lp_turnspeed1;
fixed auto_gf_LuckOrbs_lp_createdUnitHieght;

void gf_LuckOrbs (unit lp_hostUnit, string lp_createdUnitType, int lp_createdUnitCount, int lp_player, fixed lp_radius, fixed lp_turnspeed1, fixed lp_createdUnitHieght) {
    auto_gf_LuckOrbs_lp_hostUnit = lp_hostUnit;
    auto_gf_LuckOrbs_lp_createdUnitType = lp_createdUnitType;
    auto_gf_LuckOrbs_lp_createdUnitCount = lp_createdUnitCount;
    auto_gf_LuckOrbs_lp_player = lp_player;
    auto_gf_LuckOrbs_lp_radius = lp_radius;
    auto_gf_LuckOrbs_lp_turnspeed1 = lp_turnspeed1;
    auto_gf_LuckOrbs_lp_createdUnitHieght = lp_createdUnitHieght;

    if (auto_gf_LuckOrbs_Trigger == null) {
        auto_gf_LuckOrbs_Trigger = TriggerCreate("auto_gf_LuckOrbs_TriggerFunc");
    }

    TriggerExecute(auto_gf_LuckOrbs_Trigger, false, false);
}

bool auto_gf_LuckOrbs_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hostUnit = auto_gf_LuckOrbs_lp_hostUnit;
    string lp_createdUnitType = auto_gf_LuckOrbs_lp_createdUnitType;
    int lp_createdUnitCount = auto_gf_LuckOrbs_lp_createdUnitCount;
    int lp_player = auto_gf_LuckOrbs_lp_player;
    fixed lp_radius = auto_gf_LuckOrbs_lp_radius;
    fixed lp_turnspeed1 = auto_gf_LuckOrbs_lp_turnspeed1;
    fixed lp_createdUnitHieght = auto_gf_LuckOrbs_lp_createdUnitHieght;

    // Variable Declarations
    unit[11] lv_over;
    fixed lv_step;
    fixed[11] lv_hp;
    int lv_i;
    bool lv_r1;
    int lv_orbcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r1 = true;

    // Implementation
    while ((lv_i < lp_createdUnitCount)) {
        UnitCreate(1, lp_createdUnitType, c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(lp_hostUnit), 270.0);
        UnitSetHeight(UnitLastCreated(), lp_createdUnitHieght, 0.0);
        lv_over[lv_i] = UnitLastCreated();
        lv_i += 1;
    }
    lv_orbcount = lp_createdUnitCount;
    UnitBehaviorAdd(lp_hostUnit, "InitOrbType", lp_hostUnit, 1);
    while ((UnitIsAlive(lp_hostUnit) == true)) {
        lv_i = 0;
        lv_step += lp_turnspeed1;
        if ((lv_orbcount < (lp_createdUnitCount + TechTreeUpgradeCount(lp_player, "Providence", c_techCountQueuedOrBetter)))) {
            UnitCreate(1, lp_createdUnitType, c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(lp_hostUnit), 270.0);
            UnitSetHeight(UnitLastCreated(), lp_createdUnitHieght, 0.0);
            lv_over[lv_orbcount] = UnitLastCreated();
            lv_orbcount += 1;
            UnitBehaviorAdd(lp_hostUnit, "InitOrbType", lp_hostUnit, 1);
        }

        while ((lv_i < lv_orbcount)) {
            if ((UnitIsAlive(lv_over[lv_i]) == true)) {
                UnitSetPosition(lv_over[lv_i], PointWithOffsetPolar(UnitGetPosition(lp_hostUnit), lp_radius, (((360.0 / IntToFixed(lv_orbcount)) * IntToFixed(lv_i)) + lv_step)), true);
            }

            lv_i += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < lv_orbcount)) {
        UnitKill(lv_over[lv_i]);
        lv_i += 1;
    }
    return true;
}

trigger auto_gf_BladeStormRight_Trigger = null;
unit auto_gf_BladeStormRight_lp_caster;
point auto_gf_BladeStormRight_lp_target;

void gf_BladeStormRight (unit lp_caster, point lp_target) {
    auto_gf_BladeStormRight_lp_caster = lp_caster;
    auto_gf_BladeStormRight_lp_target = lp_target;

    if (auto_gf_BladeStormRight_Trigger == null) {
        auto_gf_BladeStormRight_Trigger = TriggerCreate("auto_gf_BladeStormRight_TriggerFunc");
    }

    TriggerExecute(auto_gf_BladeStormRight_Trigger, false, false);
}

bool auto_gf_BladeStormRight_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_BladeStormRight_lp_caster;
    point lp_target = auto_gf_BladeStormRight_lp_target;

    // Variable Declarations
    unit lv_caster;
    point lv_casterpoint;
    point lv_abilitytarget;
    fixed lv_castdistance;
    fixed lv_circumference;
    point lv_center;
    fixed lv_count;
    fixed lv_angle;
    unit lv_missile;
    int lv_i;
    int lv_encompass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = lp_caster;
    lv_casterpoint = UnitGetPosition(lp_caster);
    lv_abilitytarget = lp_target;
    lv_castdistance = DistanceBetweenPoints(lv_casterpoint, lv_abilitytarget);
    lv_circumference = (lv_castdistance * 3.1415);
    lv_center = PointInterpolate(lv_casterpoint, lv_abilitytarget, 0.5);
    lv_encompass = TechTreeUpgradeCount(UnitGetOwner(lv_caster), "Encompass", c_techCountQueuedOrBetter);

    // Implementation
    libNtve_gf_SetBehaviorCount(lv_caster, "CastLeftSide", lv_caster, 1);
    UnitCreate(1, "BladeStormUnit", 0, UnitGetOwner(lv_caster), lv_casterpoint, 270.0);
    lv_missile = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(lv_missile, "BladeStorm", lv_caster, 1);
    if ((lv_castdistance < 2.5)) {
        lv_castdistance = 2.5;
        lv_circumference = (2.5 * 3.1415);
        lv_center = PointWithOffsetPolar(lv_casterpoint, 1.25, AngleBetweenPoints(lv_casterpoint, lv_abilitytarget));
    }

    lv_count = (lv_circumference * 2.0);
    lv_angle = (360.0 / lv_count);
    lv_count += (lv_count * ((1 + lv_encompass) / 2.0));
    while ((lv_count > 0.0)) {
        UnitSetPosition(lv_missile, PointWithOffsetPolar(lv_center, (lv_castdistance / 2.0), (AngleBetweenPoints(lv_center, lv_casterpoint) + (lv_angle * lv_i))), true);
        lv_i += 1;
        lv_count -= 1.0;
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_missile);
    return true;
}

trigger auto_gf_BladeStormLeft_Trigger = null;
unit auto_gf_BladeStormLeft_lp_caster;
point auto_gf_BladeStormLeft_lp_target;

void gf_BladeStormLeft (unit lp_caster, point lp_target) {
    auto_gf_BladeStormLeft_lp_caster = lp_caster;
    auto_gf_BladeStormLeft_lp_target = lp_target;

    if (auto_gf_BladeStormLeft_Trigger == null) {
        auto_gf_BladeStormLeft_Trigger = TriggerCreate("auto_gf_BladeStormLeft_TriggerFunc");
    }

    TriggerExecute(auto_gf_BladeStormLeft_Trigger, false, false);
}

bool auto_gf_BladeStormLeft_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_BladeStormLeft_lp_caster;
    point lp_target = auto_gf_BladeStormLeft_lp_target;

    // Variable Declarations
    unit lv_caster;
    point lv_casterpoint;
    point lv_abilitytarget;
    fixed lv_castdistance;
    fixed lv_circumference;
    point lv_center;
    fixed lv_count;
    fixed lv_angle;
    unit lv_missile;
    int lv_i;
    int lv_encompass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = lp_caster;
    lv_casterpoint = UnitGetPosition(lp_caster);
    lv_abilitytarget = lp_target;
    lv_castdistance = DistanceBetweenPoints(lv_casterpoint, lv_abilitytarget);
    lv_circumference = (lv_castdistance * 3.1415);
    lv_center = PointInterpolate(lv_casterpoint, lv_abilitytarget, 0.5);
    lv_encompass = TechTreeUpgradeCount(UnitGetOwner(lv_caster), "Encompass", c_techCountQueuedOrBetter);

    // Implementation
    libNtve_gf_SetBehaviorCount(lv_caster, "CastLeftSide", lv_caster, 0);
    UnitCreate(1, "BladeStormUnit", 0, UnitGetOwner(lv_caster), lv_casterpoint, 270.0);
    lv_missile = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(lv_missile, "BladeStorm", lv_caster, 1);
    if ((lv_castdistance < 2.5)) {
        lv_castdistance = 2.5;
        lv_circumference = (2.5 * 3.1415);
        lv_center = PointWithOffsetPolar(lv_casterpoint, 1.25, AngleBetweenPoints(lv_casterpoint, lv_abilitytarget));
    }

    lv_count = (lv_circumference * 2.0);
    lv_angle = (360.0 / lv_count);
    lv_count += (lv_count * ((1 + lv_encompass) / 2.0));
    while ((lv_count > 0.0)) {
        UnitSetPosition(lv_missile, PointWithOffsetPolar(lv_center, (lv_castdistance / 2.0), (AngleBetweenPoints(lv_center, lv_casterpoint) - (lv_angle * lv_i))), true);
        lv_i += 1;
        lv_count -= 1.0;
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_missile);
    return true;
}

trigger auto_gf_DamageOverTime_Trigger = null;
bool auto_gf_DamageOverTime_lp_psn;
bool auto_gf_DamageOverTime_lp_fire;
fixed auto_gf_DamageOverTime_lp_dmg;
fixed auto_gf_DamageOverTime_lp_ticktime;
fixed auto_gf_DamageOverTime_lp_tickdelay;
unit auto_gf_DamageOverTime_lp_target;
unit auto_gf_DamageOverTime_lp_source;

void gf_DamageOverTime (bool lp_psn, bool lp_fire, fixed lp_dmg, fixed lp_ticktime, fixed lp_tickdelay, unit lp_target, unit lp_source) {
    auto_gf_DamageOverTime_lp_psn = lp_psn;
    auto_gf_DamageOverTime_lp_fire = lp_fire;
    auto_gf_DamageOverTime_lp_dmg = lp_dmg;
    auto_gf_DamageOverTime_lp_ticktime = lp_ticktime;
    auto_gf_DamageOverTime_lp_tickdelay = lp_tickdelay;
    auto_gf_DamageOverTime_lp_target = lp_target;
    auto_gf_DamageOverTime_lp_source = lp_source;

    if (auto_gf_DamageOverTime_Trigger == null) {
        auto_gf_DamageOverTime_Trigger = TriggerCreate("auto_gf_DamageOverTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_DamageOverTime_Trigger, false, false);
}

bool auto_gf_DamageOverTime_TriggerFunc (bool testConds, bool runActions) {
    bool lp_psn = auto_gf_DamageOverTime_lp_psn;
    bool lp_fire = auto_gf_DamageOverTime_lp_fire;
    fixed lp_dmg = auto_gf_DamageOverTime_lp_dmg;
    fixed lp_ticktime = auto_gf_DamageOverTime_lp_ticktime;
    fixed lp_tickdelay = auto_gf_DamageOverTime_lp_tickdelay;
    unit lp_target = auto_gf_DamageOverTime_lp_target;
    unit lp_source = auto_gf_DamageOverTime_lp_source;

    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(lp_target) == true) && (UnitIsAlive(lp_source) == true) && (lp_fire == true) && (lv_time <= lp_ticktime)) {
        UnitDamage(lp_source, "FireDotDamage", lp_target, lp_dmg);
        lv_time += lp_tickdelay;
        Wait(lp_tickdelay, c_timeGame);
    }
    while ((UnitIsAlive(lp_target) == true) && (UnitIsAlive(lp_source) == true) && (lp_psn == true) && (lv_time <= lp_ticktime)) {
        UnitDamage(lp_source, "PsnDotDamage", lp_target, lp_dmg);
        lv_time += lp_tickdelay;
        Wait(lp_tickdelay, c_timeGame);
    }
    return true;
}

trigger auto_gf_SpireFireball_Trigger = null;
int auto_gf_SpireFireball_lp_owner;
unit auto_gf_SpireFireball_lp_caster;
point auto_gf_SpireFireball_lp_target;
point auto_gf_SpireFireball_lp_origin;
fixed auto_gf_SpireFireball_lp_ttl;
fixed auto_gf_SpireFireball_lp_speed;
fixed auto_gf_SpireFireball_lp_dmg;

void gf_SpireFireball (int lp_owner, unit lp_caster, point lp_target, point lp_origin, fixed lp_ttl, fixed lp_speed, fixed lp_dmg) {
    auto_gf_SpireFireball_lp_owner = lp_owner;
    auto_gf_SpireFireball_lp_caster = lp_caster;
    auto_gf_SpireFireball_lp_target = lp_target;
    auto_gf_SpireFireball_lp_origin = lp_origin;
    auto_gf_SpireFireball_lp_ttl = lp_ttl;
    auto_gf_SpireFireball_lp_speed = lp_speed;
    auto_gf_SpireFireball_lp_dmg = lp_dmg;

    if (auto_gf_SpireFireball_Trigger == null) {
        auto_gf_SpireFireball_Trigger = TriggerCreate("auto_gf_SpireFireball_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpireFireball_Trigger, false, false);
}

bool auto_gf_SpireFireball_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_SpireFireball_lp_owner;
    unit lp_caster = auto_gf_SpireFireball_lp_caster;
    point lp_target = auto_gf_SpireFireball_lp_target;
    point lp_origin = auto_gf_SpireFireball_lp_origin;
    fixed lp_ttl = auto_gf_SpireFireball_lp_ttl;
    fixed lp_speed = auto_gf_SpireFireball_lp_speed;
    fixed lp_dmg = auto_gf_SpireFireball_lp_dmg;

    // Variable Declarations
    point lv_impactpoint;
    unitgroup lv_targetgrp;
    int lv_i;
    actor lv_m;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_impactpoint = lp_target;
    lv_targetgrp = UnitGroupEmpty();

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_origin, lv_impactpoint, "Fireball2", lp_ttl, lp_speed, 1.0, UnitGroupEmpty());
    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lv_impactpoint, 1.0, false);
    libNtve_gf_CreateModelAtPoint("SiegeTankSiegedAttackImpact", lv_impactpoint);
    lv_m = libNtve_gf_ActorLastCreated();
    while ((UnitIsAlive(lp_caster) == true) && (lv_i < UnitGroupCount(lv_targetgrp, c_unitCountAll))) {
        lv_i += 1;
        UnitDamage(lp_caster, "FireballDamage", UnitGroupUnit(lv_targetgrp, lv_i), lp_dmg);
    }
    Wait(1.5, c_timeGame);
    libNtve_gf_KillModel(lv_m);
    return true;
}

trigger auto_gf_SpireFireball2_Trigger = null;
int auto_gf_SpireFireball2_lp_owner;
unit auto_gf_SpireFireball2_lp_caster;
point auto_gf_SpireFireball2_lp_target;
point auto_gf_SpireFireball2_lp_origin;
fixed auto_gf_SpireFireball2_lp_ttl;
fixed auto_gf_SpireFireball2_lp_speed;

void gf_SpireFireball2 (int lp_owner, unit lp_caster, point lp_target, point lp_origin, fixed lp_ttl, fixed lp_speed) {
    auto_gf_SpireFireball2_lp_owner = lp_owner;
    auto_gf_SpireFireball2_lp_caster = lp_caster;
    auto_gf_SpireFireball2_lp_target = lp_target;
    auto_gf_SpireFireball2_lp_origin = lp_origin;
    auto_gf_SpireFireball2_lp_ttl = lp_ttl;
    auto_gf_SpireFireball2_lp_speed = lp_speed;

    if (auto_gf_SpireFireball2_Trigger == null) {
        auto_gf_SpireFireball2_Trigger = TriggerCreate("auto_gf_SpireFireball2_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpireFireball2_Trigger, false, false);
}

bool auto_gf_SpireFireball2_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_SpireFireball2_lp_owner;
    unit lp_caster = auto_gf_SpireFireball2_lp_caster;
    point lp_target = auto_gf_SpireFireball2_lp_target;
    point lp_origin = auto_gf_SpireFireball2_lp_origin;
    fixed lp_ttl = auto_gf_SpireFireball2_lp_ttl;
    fixed lp_speed = auto_gf_SpireFireball2_lp_speed;

    // Variable Declarations
    point lv_impactpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_impactpoint = lp_target;

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_origin, lv_impactpoint, "Fireball2", lp_ttl, lp_speed, 1.0, UnitGroupEmpty());
    UnitCreateEffectPoint(lp_caster, "FireballImpactSearchSpire", lv_impactpoint);
    return true;
}

point gf_targetmissilespell (unit lp_caster, int lp_owner, bool lp_attackally, point lp_origin, point lp_target, string lp_animunit, fixed lp_timetolive, fixed lp_speed, fixed lp_detonationdistance, unitgroup lp_excludedgrp) {
    // Variable Declarations
    unit lv_missile;
    unitgroup lv_targetgrp;
    int lv_targetcount;
    int lv_i;
    fixed lv_ttl;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ttl = lp_timetolive;

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_animunit, c_unitCreateIgnorePlacement, lp_owner, lp_origin, lp_target);
    lv_missile = UnitLastCreated();
    while ((lv_ttl >= 0.0) && (UnitIsAlive(lv_missile) == true)) {
        lv_ttl -= 0.0625;
        UnitSetPosition(lv_missile, PointWithOffsetPolar(UnitGetPosition(lv_missile), lp_speed, AngleBetweenPoints(lp_origin, lp_target)), true);
        lv_targetgrp = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_missile), lp_detonationdistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        libNtve_gf_RemoveUnitGroupFromUnitGroup(lp_excludedgrp, lv_targetgrp);
        lv_targetcount = UnitGroupCount(lv_targetgrp, c_unitCountAll);
        lv_i = 0;
        while ((lv_i < lv_targetcount)) {
            lv_i += 1;
            if ((lp_caster != UnitGroupUnit(lv_targetgrp, lv_i)) && ((lp_attackally == true) || (PlayerGetAlliance(lp_owner, c_allianceIdPassive, UnitGetOwner(UnitGroupUnit(lv_targetgrp, lv_i))) == false))) {
                UnitKill(lv_missile);
                return UnitGetPosition(lv_missile);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_missile);
    return UnitGetPosition(lv_missile);
}

unit gf_targetmisslespelltarget (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally) {
    // Variable Declarations
    unitgroup lv_grp;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_grp = UnitGroup(null, c_playerAny, RegionCircle(lp_impactpoint, lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);

    // Implementation
    while ((lv_i < UnitGroupCount(lv_grp, c_unitCountAll))) {
        lv_i += 1;
        if (((lp_includeally == true) || (PlayerGetAlliance(lp_caster, c_allianceIdPassive, UnitGetOwner(UnitGroupUnit(lv_grp, lv_i))) == false))) {
            return UnitGroupUnit(lv_grp, lv_i);
        }

    }
    return null;
}

unitgroup gf_targetmisslespelltargets (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally) {
    // Variable Declarations
    unitgroup lv_grp;
    unitgroup lv_remove;
    int lv_i;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_grp = UnitGroup(null, c_playerAny, RegionCircle(lp_impactpoint, lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_remove = UnitGroupEmpty();
    lv_c = UnitGroupCount(lv_grp, c_unitCountAll);

    // Implementation
    while ((lv_i < lv_c)) {
        lv_i += 1;
        if (((lp_includeally == true) || (PlayerGetAlliance(lp_caster, c_allianceIdPassive, UnitGetOwner(UnitGroupUnit(lv_grp, lv_i))) == false))) {
        }
        else {
            UnitGroupAdd(lv_remove, UnitGroupUnit(lv_grp, lv_i));
        }
    }
    libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_remove, lv_grp);
    return lv_grp;
}

unitgroup gf_targetmisslespelltargets2 (int lp_caster, point lp_impactpoint, fixed lp_range, bool lp_includeally, unitgroup lp_excluded) {
    // Variable Declarations
    unitgroup lv_grp;
    unitgroup lv_remove;
    int lv_i;
    int lv_c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_grp = UnitGroup(null, c_playerAny, RegionCircle(lp_impactpoint, lp_range), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_remove = UnitGroupEmpty();
    lv_c = UnitGroupCount(lv_grp, c_unitCountAll);

    // Implementation
    while ((lv_i < lv_c)) {
        lv_i += 1;
        if (((lp_includeally == true) || (PlayerGetAlliance(lp_caster, c_allianceIdPassive, UnitGetOwner(UnitGroupUnit(lv_grp, lv_i))) == false))) {
        }
        else {
            UnitGroupAdd(lv_remove, UnitGroupUnit(lv_grp, lv_i));
        }
    }
    libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_remove, lv_grp);
    libNtve_gf_RemoveUnitGroupFromUnitGroup(lp_excluded, lv_grp);
    return lv_grp;
}

unit gf_targetunitmissilespell (unit lp_caster, point lp_origin, unit lp_target, bool lp_cancrash, fixed lp_ttl, fixed lp_impactsize, bool lp_targetally, string lp_missleused, fixed lp_speed, unitgroup lp_excludegrp, fixed lp_retargetarea) {
    // Variable Declarations
    unit lv_target;
    int lv_caster;
    fixed lv_timer;
    unit lv_missile;
    unitgroup lv_impactgrp;
    unit lv_ct;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = lp_target;
    lv_caster = UnitGetOwner(lp_caster);
    lv_impactgrp = UnitGroupEmpty();

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, lp_missleused, c_unitCreateIgnorePlacement, lv_caster, lp_origin, UnitGetPosition(lp_target));
    lv_missile = UnitLastCreated();
    while ((UnitIsAlive(lv_missile) == true)) {
        if ((UnitIsAlive(lv_target) != true)) {
            lv_impactgrp = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_missile), lp_retargetarea), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_target = null;
            while ((lv_target == null) && (UnitGroupCount(lv_impactgrp, c_unitCountAll) >= 1)) {
                lv_target = UnitGroupRandomUnit(lv_impactgrp, c_unitCountAll);
                if ((lv_target != lp_caster) && (UnitGetType(lv_target) != "Probe") && ((lp_targetally == true) || (PlayerGetAlliance(lv_caster, c_allianceIdPassive, UnitGetOwner(lv_target)) == false))) {
                }
                else {
                    UnitGroupRemove(lv_impactgrp, lv_target);
                    lv_target = null;
                }
            }
            if ((lv_target == null)) {
                UnitKill(lv_missile);
                return null;
            }

        }

        UnitSetPosition(lv_missile, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_missile), lp_speed, UnitGetPosition(lv_target)), true);
        libNtve_gf_MakeUnitFacePoint(lv_missile, UnitGetPosition(lp_target), 0.0);
        lv_impactgrp = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_missile), lp_impactsize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_impactgrp, lp_excludegrp);
        if ((lp_cancrash == true)) {
            while ((UnitGroupCount(lv_impactgrp, c_unitCountAll) >= 1)) {
                lv_ct = UnitGroupUnit(lv_impactgrp, 1);
                if ((lv_ct != lp_caster) && (UnitGetType(lv_ct) != "Probe") && ((lp_targetally == true) || (PlayerGetAlliance(lv_caster, c_allianceIdPassive, UnitGetOwner(lv_ct)) == false))) {
                    UnitKill(lv_missile);
                    return lv_ct;
                }

                UnitGroupRemove(lv_impactgrp, lv_ct);
            }
        }
        else {
            if ((UnitGroupHasUnit(lv_impactgrp, lp_target) == true)) {
                UnitKill(lv_missile);
                return lp_target;
            }

        }
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_missile);
    return null;
}

trigger auto_gf_Lightning2_Trigger = null;
point auto_gf_Lightning2_lp_origin;
point auto_gf_Lightning2_lp_target;
unit auto_gf_Lightning2_lp_caster;
int auto_gf_Lightning2_lp_owner;
unitgroup auto_gf_Lightning2_lp_excludedtargets;
fixed auto_gf_Lightning2_lp_ttl;

void gf_Lightning2 (point lp_origin, point lp_target, unit lp_caster, int lp_owner, unitgroup lp_excludedtargets, fixed lp_ttl) {
    auto_gf_Lightning2_lp_origin = lp_origin;
    auto_gf_Lightning2_lp_target = lp_target;
    auto_gf_Lightning2_lp_caster = lp_caster;
    auto_gf_Lightning2_lp_owner = lp_owner;
    auto_gf_Lightning2_lp_excludedtargets = lp_excludedtargets;
    auto_gf_Lightning2_lp_ttl = lp_ttl;

    if (auto_gf_Lightning2_Trigger == null) {
        auto_gf_Lightning2_Trigger = TriggerCreate("auto_gf_Lightning2_TriggerFunc");
    }

    TriggerExecute(auto_gf_Lightning2_Trigger, false, false);
}

bool auto_gf_Lightning2_TriggerFunc (bool testConds, bool runActions) {
    point lp_origin = auto_gf_Lightning2_lp_origin;
    point lp_target = auto_gf_Lightning2_lp_target;
    unit lp_caster = auto_gf_Lightning2_lp_caster;
    int lp_owner = auto_gf_Lightning2_lp_owner;
    unitgroup lp_excludedtargets = auto_gf_Lightning2_lp_excludedtargets;
    fixed lp_ttl = auto_gf_Lightning2_lp_ttl;

    // Variable Declarations
    unitgroup lv_targetgrp;
    point lv_impactpoint;
    unit lv_target;
    unitgroup lv_excludedgrp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetgrp = UnitGroupEmpty();
    lv_impactpoint = lp_target;
    lv_excludedgrp = lp_excludedtargets;

    // Implementation
    lv_impactpoint = gf_targetmissilespell(lp_caster, lp_owner, false, lp_origin, lv_impactpoint, "SpireAttackMissile", lp_ttl, 0.3, 1.0, lp_excludedtargets);
    lv_targetgrp = gf_targetmisslespelltargets(lp_owner, lv_impactpoint, 1.0, false);
    if ((UnitGroupCount(lv_targetgrp, c_unitCountAll) >= 1)) {
        lv_target = UnitGroupUnit(gf_targetmisslespelltargets(lp_owner, lv_impactpoint, 1.0, false), 1);
        UnitGroupAdd(lv_excludedgrp, lv_target);
        if ((UnitIsAlive(lp_caster) == true) && (libNtve_gf_UnitIsInvulnerable(lv_target) == false)) {
            UnitCreateEffectUnit(lp_caster, "ChampionLightningDamage", lv_target);
            if ((UnitHasBehavior2(lv_target, "Dodgeball") == true)) {
                UnitBehaviorRemove(lv_target, "Dodgeball", 1);
            }

        }

    }

    return true;
}

trigger auto_gf_Queen_Trigger = null;
unit auto_gf_Queen_lp_queen;
int auto_gf_Queen_lp_overlordcount;
int auto_gf_Queen_lp_zerglingcount;
fixed auto_gf_Queen_lp_radius;
fixed auto_gf_Queen_lp_turnspeed1;

void gf_Queen (unit lp_queen, int lp_overlordcount, int lp_zerglingcount, fixed lp_radius, fixed lp_turnspeed1) {
    auto_gf_Queen_lp_queen = lp_queen;
    auto_gf_Queen_lp_overlordcount = lp_overlordcount;
    auto_gf_Queen_lp_zerglingcount = lp_zerglingcount;
    auto_gf_Queen_lp_radius = lp_radius;
    auto_gf_Queen_lp_turnspeed1 = lp_turnspeed1;

    if (auto_gf_Queen_Trigger == null) {
        auto_gf_Queen_Trigger = TriggerCreate("auto_gf_Queen_TriggerFunc");
    }

    TriggerExecute(auto_gf_Queen_Trigger, false, false);
}

bool auto_gf_Queen_TriggerFunc (bool testConds, bool runActions) {
    unit lp_queen = auto_gf_Queen_lp_queen;
    int lp_overlordcount = auto_gf_Queen_lp_overlordcount;
    int lp_zerglingcount = auto_gf_Queen_lp_zerglingcount;
    fixed lp_radius = auto_gf_Queen_lp_radius;
    fixed lp_turnspeed1 = auto_gf_Queen_lp_turnspeed1;

    // Variable Declarations
    unit[11] lv_over;
    fixed lv_step;
    fixed[11] lv_hp;
    int lv_i;
    bool lv_r1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r1 = true;

    // Implementation
    while ((lv_i < lp_overlordcount)) {
        if ((gv_champion == 1)) {
            UnitCreate(1, "ChampionOverlord", c_unitCreateIgnorePlacement, 6, UnitGetPosition(lp_queen), 270.0);
        }
        else {
            UnitCreate(1, "Overlord", c_unitCreateIgnorePlacement, 6, UnitGetPosition(lp_queen), 270.0);
        }
        UnitSetHeight(UnitLastCreated(), 0.4, 0.0);
        UnitSetCustomValue(UnitLastCreated(), 0, IntToFixed(lp_zerglingcount));
        lv_over[lv_i] = UnitLastCreated();
        lv_i += 1;
    }
    while ((UnitIsAlive(lp_queen) == true) && (UnitBehaviorCount(lp_queen, "AirHeroTornadoLifted") == 0) && (UnitBehaviorCount(lp_queen, "AirHeroHurricaneLifted") == 0)) {
        lv_i = 0;
        lv_step += lp_turnspeed1;
        while ((lv_i < lp_overlordcount)) {
            if ((UnitIsAlive(lv_over[lv_i]) == true)) {
                UnitSetPosition(lv_over[lv_i], PointWithOffsetPolar(UnitGetPosition(lp_queen), lp_radius, (((360.0 / IntToFixed(lp_overlordcount)) * IntToFixed(lv_i)) + lv_step)), true);
            }

            lv_i += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < lp_overlordcount)) {
        UnitKill(lv_over[lv_i]);
        lv_i += 1;
    }
    return true;
}

trigger auto_gf_GreaterSpire_Trigger = null;
unit auto_gf_GreaterSpire_lp_spire;
fixed auto_gf_GreaterSpire_lp_lightnings;

void gf_GreaterSpire (unit lp_spire, fixed lp_lightnings) {
    auto_gf_GreaterSpire_lp_spire = lp_spire;
    auto_gf_GreaterSpire_lp_lightnings = lp_lightnings;

    if (auto_gf_GreaterSpire_Trigger == null) {
        auto_gf_GreaterSpire_Trigger = TriggerCreate("auto_gf_GreaterSpire_TriggerFunc");
    }

    TriggerExecute(auto_gf_GreaterSpire_Trigger, false, false);
}

bool auto_gf_GreaterSpire_TriggerFunc (bool testConds, bool runActions) {
    unit lp_spire = auto_gf_GreaterSpire_lp_spire;
    fixed lp_lightnings = auto_gf_GreaterSpire_lp_lightnings;

    // Automatic Variable Declarations
    // Implementation
    gf_GreaterSpire2(2, lp_spire, lp_lightnings, 3.5);
    return true;
}

trigger auto_gf_GreaterSpire2_Trigger = null;
int auto_gf_GreaterSpire2_lp_rewardamount;
unit auto_gf_GreaterSpire2_lp_spire;
fixed auto_gf_GreaterSpire2_lp_lightnings;
fixed auto_gf_GreaterSpire2_lp_ttl;

void gf_GreaterSpire2 (int lp_rewardamount, unit lp_spire, fixed lp_lightnings, fixed lp_ttl) {
    auto_gf_GreaterSpire2_lp_rewardamount = lp_rewardamount;
    auto_gf_GreaterSpire2_lp_spire = lp_spire;
    auto_gf_GreaterSpire2_lp_lightnings = lp_lightnings;
    auto_gf_GreaterSpire2_lp_ttl = lp_ttl;

    if (auto_gf_GreaterSpire2_Trigger == null) {
        auto_gf_GreaterSpire2_Trigger = TriggerCreate("auto_gf_GreaterSpire2_TriggerFunc");
    }

    TriggerExecute(auto_gf_GreaterSpire2_Trigger, false, false);
}

bool auto_gf_GreaterSpire2_TriggerFunc (bool testConds, bool runActions) {
    int lp_rewardamount = auto_gf_GreaterSpire2_lp_rewardamount;
    unit lp_spire = auto_gf_GreaterSpire2_lp_spire;
    fixed lp_lightnings = auto_gf_GreaterSpire2_lp_lightnings;
    fixed lp_ttl = auto_gf_GreaterSpire2_lp_ttl;

    // Variable Declarations
    fixed lv_j;
    int lv_k;
    fixed lv_i;
    fixed lv_hpstage;
    int lv_hpstagetimer;
    bool lv_hpstageactive;
    point lv_origin;
    int lv_lstage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hpstage = 80.0;
    lv_hpstagetimer = 40;
    lv_origin = UnitGetPosition(lp_spire);
    lv_lstage = gv_stage;

    // Implementation
    UnitBehaviorAdd(lp_spire, "GreaterSpireBonusLightningDamage", lp_spire, FixedToInt(gv_difficulty));
    while ((UnitIsAlive(lp_spire) == true)) {
        Wait(0.125, c_timeGame);
        if ((lv_lstage <= gv_stage) && (UnitGroupCount(UnitGroupAlliance(6, c_unitAllianceEnemy, RegionCircle(lv_origin, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_j = 0.0;
            while ((lv_j < lp_lightnings)) {
                gf_Lightning2(lv_origin, PointWithOffsetPolar(lv_origin, 5.0, lv_i+((360/lp_lightnings)*lv_j)), lp_spire, 6, UnitGroupEmpty(), lp_ttl);
                lv_j += 1.0;
            }
            lv_i = (lv_i+1)%360;
            if ((UnitIsAlive(lp_spire) == true) && (UnitGetPropertyFixed(lp_spire, c_unitPropLifePercent, c_unitPropCurrent) < lv_hpstage)) {
                lv_hpstageactive = true;
                lv_hpstage = lv_hpstage-25;
                lv_hpstagetimer = 40;
            }

            if ((lv_hpstageactive == true)) {
                if ((lv_hpstagetimer > 1)) {
                    lv_hpstagetimer -= 1;
                }
                else {
                    lv_hpstageactive = false;
                    while ((lv_hpstagetimer < 360)) {
                        gf_Lightning2(lv_origin, PointWithOffsetPolar(lv_origin, 5.0, IntToFixed(lv_hpstagetimer)), lp_spire, 6, UnitGroupEmpty(), 3.5);
                        lv_hpstagetimer += 6;
                    }
                }
            }

        }

    }
    while ((lv_k < lp_rewardamount)) {
        gf_GainReward(1);
        lv_k += 1;
    }
    return true;
}

void gf_noFinalSniping () {
    // Variable Declarations
    fixed lv_y;
    fixed lv_x;
    unitgroup lv_g;
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto32CE5276_g;
    int auto32CE5276_u;
    unit auto32CE5276_var;
    unitgroup autoE9280D72_g;
    int autoE9280D72_u;
    unit autoE9280D72_var;
    const int auto1EB8DA7B_n = 2;
    int auto1EB8DA7B_i;
    const int auto226D0532_n = 10;
    int auto226D0532_i;

    // Variable Initialization
    lv_g = UnitGroupEmpty();

    // Implementation
    lv_g = UnitGroup(null, c_playerAny, RegionFromId(32), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32CE5276_g = UnitGroupSearch(null, c_playerAny, Point(251.0, 193.5), 6.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto32CE5276_u = UnitGroupCount(auto32CE5276_g, c_unitCountAll);
    for (;; auto32CE5276_u -= 1) {
        auto32CE5276_var = UnitGroupUnitFromEnd(auto32CE5276_g, auto32CE5276_u);
        if (auto32CE5276_var == null) { break; }
        if ((UnitGetType(auto32CE5276_var) != "GasCanisterProtoss") && (UnitGetOwner(auto32CE5276_var) != 6)) {
            UnitGroupAdd(lv_g, auto32CE5276_var);
        }

    }
    autoE9280D72_g = UnitGroupSearch(null, c_playerAny, Point(242.5, 193.5), 2.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE9280D72_u = UnitGroupCount(autoE9280D72_g, c_unitCountAll);
    for (;; autoE9280D72_u -= 1) {
        autoE9280D72_var = UnitGroupUnitFromEnd(autoE9280D72_g, autoE9280D72_u);
        if (autoE9280D72_var == null) { break; }
        if ((UnitGetOwner(autoE9280D72_var) != 6)) {
            UnitGroupAdd(lv_g, autoE9280D72_var);
        }

    }
    while ((UnitGroupCount(lv_g, c_unitCountAll) >= 1)) {
        if ((UnitGetOwner(UnitGroupUnit(lv_g, 1)) != 6)) {
            UnitSetPosition(UnitGroupUnit(lv_g, 1), Point(240.0, 10.0), false);
            UnitGroupRemove(lv_g, UnitGroupUnit(lv_g, 1));
        }
        else {
            UnitGroupRemove(lv_g, UnitGroupUnit(lv_g, 1));
        }
    }
    if ((UnitGroupCount(UnitGroup(null, 6, RegionCircle(Point(212.0, 200.0), 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
        for (auto1EB8DA7B_i = 1; auto1EB8DA7B_i <= auto1EB8DA7B_n; auto1EB8DA7B_i += 1) {
            for (auto226D0532_i = 1; auto226D0532_i <= auto226D0532_n; auto226D0532_i += 1) {
                UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point((209.0 + lv_x), (201.0 + lv_y)), 270.0);
                UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
                libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
                lv_x += 1.0;
            }
            lv_y -= 1.0;
            lv_x = 0.0;
        }
    }

    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(235.0, 204.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(237.0, 204.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(239.0, 204.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(222.0, 208.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(228.0, 208.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "Youfailed", UnitLastCreated(), 1);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
}

void gf_challengemode () {
    // Variable Declarations
    unit lv_pylon;
    point lv_point;
    int lv_score;
    point lv_thorpoint;
    int lv_i;
    int lv_random;
    int lv_lastrnd;
    timer lv_timer;
    sound lv_sound;
    int lv_tt;
    unitgroup lv_cannons;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_point = Point(59.0, 47.0);
    lv_thorpoint = Point(148,23);
    lv_timer = TimerCreate();
    lv_tt = c_textTagNone;
    lv_cannons = UnitGroupEmpty();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateIgnorePlacement, 5, lv_point);
    lv_pylon = UnitLastCreated();
    gf_challengemodearmy(lv_pylon);
    if ((gv_difficulty < 3.0)) {
        UnitBehaviorAdd(lv_pylon, "EasyDefense", lv_pylon, 3-FixedToInt(gv_difficulty));
    }

    UnitKill(UnitFromId(17));
    UnitKill(UnitFromId(15));
    UnitKill(UnitFromId(14));
    UnitKill(UnitFromId(13));
    UnitKill(UnitFromId(16));
    UnitKill(UnitFromId(12));
    gv_stage = 7;
    gf_challengemoderebuild(lv_pylon);
    TextTagCreate(IntToText(gv_challengeStage), 60, UnitGetPosition(lv_pylon), 3.0, true, false, PlayerGroupAll());
    lv_tt = TextTagLastCreated();
    Wait(10.0, c_timeGame);
    while ((gv_challengeStage <= 40) && (UnitIsAlive(lv_pylon) == true)) {
        Wait(3.0, c_timeGame);
        TextTagSetText(lv_tt, IntToText(gv_challengeStage));
        if ((ModI(gv_challengeStage, 5) == 0) && (gv_challengeStage >= 10) && (gv_challengeStage < 40)) {
            if ((gv_challengeStage == 10)) {
                if ((gv_difficulty >= 4.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade2", 1);
                }

                gf_thorboss1(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

            if ((gv_challengeStage == 15)) {
                if ((gv_difficulty >= 2.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade", 1);
                }

                gf_thorboss2(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

            if ((gv_challengeStage == 20)) {
                if ((gv_difficulty >= 2.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade2", 1);
                }

                gf_thorboss3(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

            if ((gv_challengeStage == 25)) {
                if ((gv_difficulty >= 2.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade", 1);
                }

                gf_thorboss4(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

            if ((gv_challengeStage == 30)) {
                if ((gv_difficulty >= 2.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade2", 1);
                }

                gf_thorboss5(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

            if ((gv_challengeStage == 35)) {
                if ((gv_difficulty >= 2.0)) {
                    TechTreeUpgradeAddLevel(6, "difficultyupgrade", 1);
                }

                gf_thorboss6(lv_thorpoint);
                TimerStart(lv_timer, 300.0, false, c_timeGame);
                Wait(10.0, c_timeGame);
                while (!(((UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(lv_timer) < 1.0)))) {
                    Wait(1.0, c_timeGame);
                }
            }

        }
        else {
            lv_lastrnd = lv_random;
            while ((lv_lastrnd == lv_random)) {
                if ((gv_challengeStage == 1)) {
                    lv_random = 1;
                }
                else {
                    lv_random = RandomInt(0, 3);
                }
            }
            if ((lv_random == 0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/A46EAEB5") + IntToText(gv_challengeStage) + StringExternal("Param/Value/ED0E9955")));
                lv_score += gf_challengeOverseermadness(gv_challengeStage);
            }

            if ((lv_random == 1)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4F404AD9") + IntToText(gv_challengeStage) + StringExternal("Param/Value/A3DFB271")));
                gf_challengemodeassault(gv_challengeStage);
            }

            if ((lv_random == 2)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/1DA11331") + IntToText(gv_challengeStage) + StringExternal("Param/Value/5F16B4D1")));
                gf_challengemodeescort(lv_pylon, gv_challengeStage);
            }

            if ((lv_random == 3)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/8A13C076") + IntToText(gv_challengeStage) + StringExternal("Param/Value/796C72C2")));
                gf_challengemodetimequest(gv_challengeStage);
            }

        }
        gv_challengeStage += 1;
    }
    TextTagDestroy(lv_tt);
    if ((UnitIsAlive(lv_pylon) == true)) {
        if ((gv_zchallengemodetypewin[0] == false)) {
            gf_achievements0killaward(53);
        }

        if ((gv_zchallengemodetypewin[1] == false)) {
            gf_achievements0killaward(54);
        }

        if ((gv_zchallengemodetypewin[2] == false)) {
            gf_achievements0killaward(55);
        }

        if ((gv_zchallengemodetypewin[3] == false)) {
            gf_achievements0killaward(56);
        }

        if ((gv_zchallengemodetypewin[4] == false)) {
            gf_achievements0killaward(57);
        }

        if ((gv_zdeathcount[1] == 0) && (gv_zdeathcount[2] == 0) && (gv_zdeathcount[3] == 0) && (gv_zdeathcount[4] == 0)) {
            gf_achievements0killaward(58);
        }

        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                if ((UnitHasBehavior(gv_hero[lv_i-1], "Cooperative") == true)) {
                    while ((gf_achievementgetlevel(lv_i, 59) < FixedToInt(gv_difficulty))) {
                        gf_achievementnew(lv_i, 59);
                    }
                }

            }

        }
        gf_thorboss7(lv_thorpoint);
        gf_gainrewardbonusall(FixedToInt(100*gv_difficulty));
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnitType("Pylon", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7E4DD816"), (StringExternal("Param/Value/A46E556C") + gf_difficultytotext() + StringExternal("Param/Value/CD9DDA4B") + gf_gametime(gv_zgametime[3]) + StringToText("") + StringExternal("Param/Value/C0E27429") + StringExternal("Param/Value/5DA3E738") + IntToText(FixedToInt(gv_difficulty*500)) + StringExternal("Param/Value/1C45705C")), 6.0, c_transmissionDurationAdd, false);
        gf_banknewtime();
        lv_cannons = UnitGroup(null, 5, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        SoundPlay(SoundLink("ChallengescombinedExecutor00116", -1), PlayerGroupAll(), 100.0, 0.0);
        lv_sound = SoundLastPlayed();
        Wait(3.5, c_timeGame);
        SoundStop(lv_sound, false);
        Wait(300.0, c_timeGame);
        GameOver(1, c_gameOverVictory, true, true);
        GameOver(2, c_gameOverVictory, true, true);
        GameOver(3, c_gameOverVictory, true, true);
        GameOver(4, c_gameOverVictory, true, true);
    }

}

trigger auto_gf_challengemodearmy_Trigger = null;
unit auto_gf_challengemodearmy_lp_unit;

void gf_challengemodearmy (unit lp_unit) {
    auto_gf_challengemodearmy_lp_unit = lp_unit;

    if (auto_gf_challengemodearmy_Trigger == null) {
        auto_gf_challengemodearmy_Trigger = TriggerCreate("auto_gf_challengemodearmy_TriggerFunc");
    }

    TriggerExecute(auto_gf_challengemodearmy_Trigger, false, false);
}

bool auto_gf_challengemodearmy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_challengemodearmy_lp_unit;

    // Variable Declarations
    int lv_i;
    fixed lv_extratime;
    int lv_zealot;
    int lv_adept;
    int lv_stalker;
    int lv_sentry;
    int lv_hightemplar;
    int lv_immortal;
    int lv_archon;
    unitgroup lv_defenders;
    unitgroup lv_attackers;
    unitgroup lv_nextattackers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = 1;
    lv_extratime = 1.0;
    lv_zealot = 10;
    lv_adept = 14;
    lv_stalker = 15;
    lv_sentry = 20;
    lv_hightemplar = 24;
    lv_immortal = 55;
    lv_archon = 60;
    lv_defenders = UnitGroupEmpty();
    lv_attackers = UnitGroupEmpty();
    lv_nextattackers = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lp_unit) == true)) {
        lv_defenders = UnitGroup(null, UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
        lv_attackers = UnitGroup(null, UnitGetOwner(lp_unit), RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_nextattackers, lv_nextattackers);
        lv_i = 1;
        if ((TechTreeUpgradeCount(UnitGetOwner(lp_unit), "ForgeMineralUpgrade", c_techCountQueuedOrBetter) < gv_xplevel) && (TechTreeUpgradeCount(UnitGetOwner(lp_unit), "ForgeMineralUpgrade", c_techCountQueuedOrBetter) < 100)) {
            TechTreeUpgradeAddLevel(UnitGetOwner(lp_unit), "ForgeMineralUpgrade", 1);
            lv_extratime -= 0.01;
        }

        if (((UnitGroupCount(lv_defenders, c_unitCountAlive) + UnitGroupCount(lv_attackers, c_unitCountAlive)) < (30 + gv_challengeStage))) {
            if ((UnitHasBehavior2(lp_unit, "NoFunds") == false)) {
                lv_zealot -= 1;
                lv_adept -= 1;
                lv_stalker -= 1;
                lv_sentry -= 1;
                lv_hightemplar -= 1;
                lv_immortal -= 1;
                lv_archon -= 1;
            }

            if ((lv_zealot <= 0)) {
                lv_zealot = 10;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

            if ((lv_adept <= 0)) {
                lv_adept = 14;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 4), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

            if ((lv_stalker <= 0)) {
                lv_stalker = 15;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

            if ((lv_sentry <= 0)) {
                lv_sentry = 20;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 5), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

            if ((lv_immortal <= 0)) {
                lv_immortal = 55;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 3), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

            if ((lv_archon <= 0)) {
                lv_archon = 60;
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("WarpInReinforcements", 2), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_unit), 4.0))), c_orderQueueReplace);
            }

        }

        UnitGroupIssueOrder(lv_defenders, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_unit)), c_orderQueueReplace);
        if ((UnitGroupCount(lv_defenders, c_unitCountAlive) >= (20 + RoundI((gv_challengeStage / 2.0))))) {
            while ((lv_i <= UnitGroupCount(lv_defenders, c_unitCountAlive))) {
                UnitGroupAdd(lv_nextattackers, UnitGroupUnit(lv_defenders, lv_i));
                UnitBehaviorAdd(UnitGroupUnit(lv_defenders, lv_i), "UnitIsInActiveArmyTriggers", UnitGroupUnit(lv_defenders, lv_i), 1);
                lv_i += 3;
            }
            gf_challengemodearmyAI(lp_unit, lv_nextattackers);
        }

        Wait(((1.5 - (TechTreeUpgradeCount(UnitGetOwner(lp_unit), "Ann3Reward", c_techCountQueuedOrBetter) * 0.5)) + lv_extratime), c_timeGame);
    }
    return true;
}

trigger auto_gf_challengemodearmyAI_Trigger = null;
unit auto_gf_challengemodearmyAI_lp_unit;
unitgroup auto_gf_challengemodearmyAI_lp_army;

void gf_challengemodearmyAI (unit lp_unit, unitgroup lp_army) {
    auto_gf_challengemodearmyAI_lp_unit = lp_unit;
    auto_gf_challengemodearmyAI_lp_army = lp_army;

    if (auto_gf_challengemodearmyAI_Trigger == null) {
        auto_gf_challengemodearmyAI_Trigger = TriggerCreate("auto_gf_challengemodearmyAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_challengemodearmyAI_Trigger, false, false);
}

bool auto_gf_challengemodearmyAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_challengemodearmyAI_lp_unit;
    unitgroup lp_army = auto_gf_challengemodearmyAI_lp_army;

    // Variable Declarations
    unitgroup lv_army;
    unitgroup lv_enemystructures;
    point lv_target;
    unit lv_closestpylon;
    int lv_pathingcost;

    // Automatic Variable Declarations
    unitgroup auto11BB3BAC_g;
    int auto11BB3BAC_u;
    unit auto11BB3BAC_var;
    unitgroup autoB12C6AAD_g;
    int autoB12C6AAD_u;
    unit autoB12C6AAD_var;
    unitgroup auto19D31ED0_g;
    int auto19D31ED0_u;
    unit auto19D31ED0_var;

    // Variable Initialization
    lv_army = UnitGroupCopy(lp_army);
    lv_enemystructures = UnitGroupEmpty();
    lv_pathingcost = 10000;

    // Implementation
    while ((UnitGroupCount(lv_army, c_unitCountAlive) > 0)) {
        lv_enemystructures = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_pathingcost = 10000;
        lv_target = null;
        auto11BB3BAC_g = lv_enemystructures;
        auto11BB3BAC_u = UnitGroupCount(auto11BB3BAC_g, c_unitCountAll);
        for (;; auto11BB3BAC_u -= 1) {
            auto11BB3BAC_var = UnitGroupUnitFromEnd(auto11BB3BAC_g, auto11BB3BAC_u);
            if (auto11BB3BAC_var == null) { break; }
            if ((AIPathingCostMap(UnitGetPosition(UnitGroupUnit(lv_army, 1)), UnitGetPosition(auto11BB3BAC_var)) < lv_pathingcost) && (AIPathingCostMap(UnitGetPosition(UnitGroupUnit(lv_army, 1)), UnitGetPosition(auto11BB3BAC_var)) >= 0)) {
                lv_target = UnitGetPosition(auto11BB3BAC_var);
                lv_pathingcost = AIPathingCostMap(UnitGetPosition(UnitGroupUnit(lv_army, 1)), lv_target);
            }

        }
        if ((lv_target == null)) {
            lv_target = UnitGetPosition(lp_unit);
        }

        lv_pathingcost = 10000;
        autoB12C6AAD_g = gf_GetPowerFields();
        autoB12C6AAD_u = UnitGroupCount(autoB12C6AAD_g, c_unitCountAll);
        for (;; autoB12C6AAD_u -= 1) {
            autoB12C6AAD_var = UnitGroupUnitFromEnd(autoB12C6AAD_g, autoB12C6AAD_u);
            if (autoB12C6AAD_var == null) { break; }
            if ((AIPathingCostMap(UnitGetPosition(autoB12C6AAD_var), lv_target) < lv_pathingcost) && (AIPathingCostMap(UnitGetPosition(autoB12C6AAD_var), lv_target) >= 0)) {
                lv_pathingcost = AIPathingCostMap(UnitGetPosition(autoB12C6AAD_var), lv_target);
                lv_closestpylon = autoB12C6AAD_var;
            }

        }
        if ((AIPathingCostMap(UnitGetPosition(lv_closestpylon), lv_target) < 0)) {
            lv_closestpylon = gf_getpylonofstage();
        }

        auto19D31ED0_g = lv_army;
        auto19D31ED0_u = UnitGroupCount(auto19D31ED0_g, c_unitCountAll);
        for (;; auto19D31ED0_u -= 1) {
            auto19D31ED0_var = UnitGroupUnitFromEnd(auto19D31ED0_g, auto19D31ED0_u);
            if (auto19D31ED0_var == null) { break; }
            if (((AIPathingCostMap(UnitGetPosition(auto19D31ED0_var), lv_target) < 0) || (AIPathingCostMap(UnitGetPosition(auto19D31ED0_var), lv_target) > FixedToInt((AIPathingCostMap(UnitGetPosition(lv_closestpylon), lv_target) + 5.0))))) {
                UnitIssueOrder(auto19D31ED0_var, OrderTargetingPoint(AbilityCommand("Teleport", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_closestpylon), 3.0))), c_orderQueueReplace);
                Wait(0.1, c_timeGame);
            }

        }
        Wait(1.0, c_timeGame);
        UnitGroupIssueOrder(lv_army, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    return true;
}

void gf_challengemodetimequest (int lp_cstage) {
    // Variable Declarations
    int lv_tw;
    timer lv_timer;
    point[4] lv_p;
    bool[4] lv_usedspots;
    int lv_count;
    int lv_i;
    unitgroup lv_questunits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_timer = TimerCreate();
    lv_count = FixedToInt(gv_difficulty)+lp_cstage;
    lv_questunits = UnitGroupEmpty();

    // Implementation
    lv_count = MinI(lv_count, 4);
    lv_p[0]=Point(120,119);
    lv_p[1]=Point(137,22);
    lv_p[2]=Point(14,17);
    lv_p[3]=Point(44,111);
    TimerStart(lv_timer, 300, false, c_timeGame);
    TimerWindowCreate(lv_timer, StringExternal("Param/Value/C9B16855"), true, false);
    lv_tw = TimerWindowLastCreated();
    while ((lv_count > 0)) {
        while ((lv_usedspots[lv_i] == true)) {
            lv_i = RandomInt(0, 3);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EvolutionChamber", c_unitCreateIgnorePlacement, 6, lv_p[lv_i]);
        gf_challengetimequestsingle(UnitLastCreated());
        UnitGroupAdd(lv_questunits, UnitLastCreated());
        if ((lv_i == 0)) {
            gf_challengemodeescortassault(lv_i, ((lp_cstage+FixedToInt(gv_difficulty))/4)+1);
        }
        else {
            gf_challengemodeescortassault(lv_i+1, ((lp_cstage+FixedToInt(gv_difficulty))/4)+1);
        }
        lv_usedspots[lv_i] = true;
        lv_count -= 1;
    }
    while ((UnitGroupCount(lv_questunits, c_unitCountAlive) > 0) && (TimerGetRemaining(lv_timer) > 0.0)) {
        Wait(1.0, c_timeGame);
    }
    if ((TimerGetRemaining(lv_timer) > 270.0)) {
        gf_achievements0killaward(51);
    }

    if ((TimerGetRemaining(lv_timer) < 1.0)) {
        gv_zchallengemodetypewin[2] = true;
        gv_zchallengemodetypewin[4] = true;
    }

    TimerWindowDestroy(lv_tw);
}

trigger auto_gf_challengetimequestsingle_Trigger = null;
unit auto_gf_challengetimequestsingle_lp_unit;

void gf_challengetimequestsingle (unit lp_unit) {
    auto_gf_challengetimequestsingle_lp_unit = lp_unit;

    if (auto_gf_challengetimequestsingle_Trigger == null) {
        auto_gf_challengetimequestsingle_Trigger = TriggerCreate("auto_gf_challengetimequestsingle_TriggerFunc");
    }

    TriggerExecute(auto_gf_challengetimequestsingle_Trigger, false, false);
}

bool auto_gf_challengetimequestsingle_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_challengetimequestsingle_lp_unit;

    // Variable Declarations
    unit lv_u2;
    timer lv_timer;
    int lv_quest;
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();
    lv_quest = c_invalidObjectiveId;
    lv_ping = c_invalidPingId;

    // Implementation
    TimerStart(lv_timer, 300, false, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/9ACDAB8D"), StringExternal("Param/Value/EBC4EA1E"), c_objectiveStateActive, true);
    lv_quest = ObjectiveLastCreated();
    lv_u2 = lp_unit;
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(94.12, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u2);
    lv_ping = PingLastCreated();
    while ((UnitIsAlive(lv_u2) == true) && (TimerGetRemaining(lv_timer) > 1.0)) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping);
    if ((UnitIsAlive(lv_u2) == true)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/C62AE8EB"), StringExternal("Param/Value/574E72EC"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
        UnitKill(lv_u2);
        ObjectiveSetState(lv_quest, c_objectiveStateFailed);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
    }
    else {
        gf_gainxp(250.0);
        gf_GainReward(5);
        ObjectiveSetState(lv_quest, c_objectiveStateCompleted);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
    }
    return true;
}

void gf_challengemodeescort (unit lp_pylon, int lp_cstage) {
    // Variable Declarations
    point[6][5] lv_paths;
    unit lv_bob;
    int lv_random;
    int lv_checkpoint;
    int lv_ping;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_random = RandomInt(0, 3);
    lv_ping = c_invalidPingId;
    lv_timer = TimerCreate();

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "FireHero", c_unitCreateIgnorePlacement, 5, Point(59,47));
    lv_bob = UnitLastCreated();
    UnitBehaviorAdd(lv_bob, "NoCollision", lv_bob, 1);
    UnitSetPropertyFixed(lv_bob, c_unitPropMovementSpeed, 1.75);
    UnitSetPropertyFixed(lv_bob, c_unitPropShieldsMax, (500.0 + (500.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_bob, c_unitPropLifeMax, (500.0 + (500.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_bob, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_bob, c_unitPropShieldsPercent, 100.0);
    TimerStart(lv_timer, 15.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_bob);
    lv_ping = PingLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_bob, true, 6);
    lv_paths[0][0]=Point(77,113);
    lv_paths[1][0]=Point(119,116);
    lv_paths[2][0]=Point(123,66);
    lv_paths[3][0]=Point(59,47);
    lv_paths[0][1]=Point(112,26);
    lv_paths[1][1]=Point(106,11);
    lv_paths[2][1]=Point(64,27);
    lv_paths[3][1]=Point(59,47);
    lv_paths[0][2]=Point(20,32);
    lv_paths[1][2]=Point(47,12);
    lv_paths[2][2]=Point(59,47);
    lv_paths[3][2]=Point(59,47);
    lv_paths[0][3]=Point(8,103);
    lv_paths[1][3]=Point(39,105);
    lv_paths[2][3]=Point(59,47);
    lv_paths[3][3]=Point(59,47);
    DialogControlSetVisible(libNtve_gf_ScreenButton(34), PlayerGroupAll(), true);
    if ((lv_random > 0)) {
        gf_challengemodeescortassault(lv_random+1, lp_cstage/2);
    }
    else {
        gf_challengemodeescortassault(lv_random, lp_cstage/2);
    }
    while ((UnitIsAlive(lv_bob) == true) && (lv_checkpoint < 4)) {
        UnitIssueOrder(lv_bob, OrderTargetingPoint(AbilityCommand("move", 0), lv_paths[lv_checkpoint][lv_random]), c_orderQueueReplace);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_bob), lv_paths[lv_checkpoint][lv_random]) < 3.0)) {
            lv_checkpoint += 1;
        }

        if ((RandomInt(0, 15) <= FixedToInt(gv_difficulty)) && (TimerGetRemaining(lv_timer) < 1.0)) {
            gf_EscortAmbush(lv_bob);
            TimerStart(lv_timer, 5.0, false, c_timeGame);
        }

        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping);
    DialogControlSetVisible(libNtve_gf_ScreenButton(34), PlayerGroupAll(), false);
    if ((UnitIsAlive(lv_bob) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/AA69DC98"));
        UnitBehaviorAdd(lp_pylon, "EasyDefense", lp_pylon, 1);
        if ((UnitGetPropertyFixed(lv_bob, c_unitPropLifePercent, c_unitPropCurrent) == 100.0) && (UnitGetPropertyFixed(lv_bob, c_unitPropShieldsPercent, c_unitPropCurrent) == 100.0)) {
            gf_achievements0killaward(50);
        }

        UnitRemove(lv_bob);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FF289D06"));
        gv_zchallengemodetypewin[1] = true;
        gv_zchallengemodetypewin[4] = true;
        UnitBehaviorAdd(lp_pylon, "NoFunds", lp_pylon, 1);
    }
}

void gf_challengemodeassault (int lp_cstage) {
    // Variable Declarations
    int lv_counter;
    int lv_direction;
    int lv_timer;
    int lv_count;
    int[6] lv_limits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_counter = FixedToInt(gv_difficulty);
    lv_direction = RandomInt(0, 3);
    lv_timer = 300;

    // Implementation
    lv_limits[0]=11;
    lv_limits[1]=9;
    lv_limits[2]=8;
    lv_limits[3]=6;
    lv_limits[4]=11;
    lv_counter *= lp_cstage;
    while ((lv_counter > 0)) {
        if ((lv_limits[lv_direction] > lv_counter)) {
            lv_count = lv_counter;
            lv_counter = 0;
        }
        else {
            lv_count = lv_limits[lv_direction];
            lv_counter -= lv_limits[lv_direction];
        }
        if ((lv_direction == 0)) {
            gf_SpawningRandom(Point(98.0, 71.0), Point(140.0, 70.0), Point(68,102), Point(125,51), Point(60,108), Point(82,93), Point(99,49), Point(86,51), Point(76,76), Point(94,84), Point(59,90), Point(54,86), Point(107,50), null, null, null, null, RandomInt(1,2), RandomInt(1,2), RandomInt(2,3), RandomInt(2,3), RandomInt(1,2), 0, RandomInt(1,2), 10, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 1)) {
            gf_SpawningRandom(Point(96.0, 113.0), Point(80.0, 126.0), Point(87.0, 102.0), Point(98.0, 97.0), Point(133.0, 98.0), Point(113.0, 97.0), Point(112.0, 83.0), Point(133.0, 72.0), Point(137.0, 128.0), Point(137.0, 128.0), null, null, null, null, null, null, null, RandomInt(1, 3), RandomInt(0, 2), RandomInt(2, 3), RandomInt(2, 3), 1, RandomInt(0, 1), 6, 0, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 2)) {
            gf_SpawningRandom(Point(48,32), Point(9,43), Point(63,9), Point(43,24), Point(36,30), Point(18,31), Point(32,12), Point(30,23), null, null, null, null, null, null, null, null, null, 1, 1, 2, 2, 1, 0, RandomInt(0,1), 1, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 3)) {
            gf_SpawningRandom(Point(80,9), Point(108,3), Point(123,14), Point(101,38), Point(81,43), Point(112,44), null, null, null, null, null, null, null, null, null, null, null, 1, 0, 1, 2, 1, RandomInt(0,1), RandomInt(0,1), 1, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 4)) {
            gf_SpawningRandom(Point(28,82), Point(50,71), Point(16.5,107), Point(11,66), Point(21,102), Point(50,99), Point(27,56), Point(32,118), Point(12,93), Point(18,80), Point(19,61), null, null, null, null, null, null, 1, 1, 2, 2, RandomInt(1,2), 0, RandomInt(1,2), RandomInt(1,2), 4, 0, 0, 0, lv_count, 0);
        }

        lv_direction=(lv_direction+1)%5;
    }
    while ((lv_timer > 0) && (UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) > 0)) {
        lv_timer -= 1;
        Wait(1.0, c_timeGame);
    }
    if ((lv_timer > 120)) {
        gf_achievements0killaward(52);
    }

    if ((lv_timer < 1)) {
        gv_zchallengemodetypewin[3] = true;
        gv_zchallengemodetypewin[4] = true;
    }

}

trigger auto_gf_challengemodeescortassault_Trigger = null;
int auto_gf_challengemodeescortassault_lp_direction;
int auto_gf_challengemodeescortassault_lp_cstage;

void gf_challengemodeescortassault (int lp_direction, int lp_cstage) {
    auto_gf_challengemodeescortassault_lp_direction = lp_direction;
    auto_gf_challengemodeescortassault_lp_cstage = lp_cstage;

    if (auto_gf_challengemodeescortassault_Trigger == null) {
        auto_gf_challengemodeescortassault_Trigger = TriggerCreate("auto_gf_challengemodeescortassault_TriggerFunc");
    }

    TriggerExecute(auto_gf_challengemodeescortassault_Trigger, false, false);
}

bool auto_gf_challengemodeescortassault_TriggerFunc (bool testConds, bool runActions) {
    int lp_direction = auto_gf_challengemodeescortassault_lp_direction;
    int lp_cstage = auto_gf_challengemodeescortassault_lp_cstage;

    // Variable Declarations
    int lv_counter;
    int lv_direction;
    int lv_timer;
    int lv_count;
    int[6] lv_limits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_counter = FixedToInt(gv_difficulty);
    lv_direction = lp_direction;
    lv_timer = 300;

    // Implementation
    lv_limits[0]=11;
    lv_limits[1]=9;
    lv_limits[2]=8;
    lv_limits[3]=6;
    lv_limits[4]=11;
    lv_counter += lp_cstage;
    while ((lv_counter > 0)) {
        if ((lv_limits[lv_direction] > lv_counter)) {
            lv_count = lv_counter;
            lv_counter = 0;
        }
        else {
            lv_count = lv_limits[lv_direction];
            lv_counter -= lv_limits[lv_direction];
        }
        if ((lv_direction == 0)) {
            gf_SpawningRandom(Point(98.0, 71.0), Point(140.0, 70.0), Point(68,102), Point(125,51), Point(60,108), Point(82,93), Point(99,49), Point(86,51), Point(76,76), Point(94,84), Point(59,90), Point(54,86), Point(107,50), null, null, null, null, RandomInt(1,2), RandomInt(1,2), RandomInt(2,3), RandomInt(2,3), RandomInt(1,2), 0, RandomInt(1,2), 10, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 1)) {
            gf_SpawningRandom(Point(96.0, 113.0), Point(80.0, 126.0), Point(87.0, 102.0), Point(98.0, 97.0), Point(133.0, 98.0), Point(113.0, 97.0), Point(112.0, 83.0), Point(133.0, 72.0), Point(137.0, 128.0), Point(137.0, 128.0), null, null, null, null, null, null, null, RandomInt(1, 3), RandomInt(0, 2), RandomInt(2, 3), RandomInt(2, 3), 1, RandomInt(0, 1), 6, 0, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 3)) {
            gf_SpawningRandom(Point(48,32), Point(9,43), Point(63,9), Point(43,24), Point(36,30), Point(18,31), Point(32,12), Point(30,23), null, null, null, null, null, null, null, null, null, 1, 1, 2, 2, 1, 0, RandomInt(0,1), 1, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 2)) {
            gf_SpawningRandom(Point(80,9), Point(108,3), Point(123,14), Point(101,38), Point(81,43), Point(112,44), null, null, null, null, null, null, null, null, null, null, null, 1, 0, 1, 2, 1, RandomInt(0,1), RandomInt(0,1), 1, 0, 0, 0, 0, lv_count, 0);
        }

        if ((lv_direction == 4)) {
            gf_SpawningRandom(Point(28,82), Point(50,71), Point(16.5,107), Point(11,66), Point(21,102), Point(50,99), Point(27,56), Point(32,118), Point(12,93), Point(18,80), Point(19,61), null, null, null, null, null, null, 1, 1, 2, 2, RandomInt(1,2), 0, RandomInt(1,2), RandomInt(1,2), 4, 0, 0, 0, lv_count, 0);
        }

        lv_direction=(lv_direction+1)%5;
    }
    while ((lv_timer > 0) && (UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
        lv_timer -= 1;
        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_challengemoderebuild_Trigger = null;
unit auto_gf_challengemoderebuild_lp_pylon;

void gf_challengemoderebuild (unit lp_pylon) {
    auto_gf_challengemoderebuild_lp_pylon = lp_pylon;

    if (auto_gf_challengemoderebuild_Trigger == null) {
        auto_gf_challengemoderebuild_Trigger = TriggerCreate("auto_gf_challengemoderebuild_TriggerFunc");
    }

    TriggerExecute(auto_gf_challengemoderebuild_Trigger, false, false);
}

bool auto_gf_challengemoderebuild_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pylon = auto_gf_challengemoderebuild_lp_pylon;

    // Variable Declarations
    unit lv_pylon;
    int lv_i;
    unit lv_probe;
    point[4] lv_cannonspots;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pylon = lp_pylon;

    // Implementation
    lv_cannonspots[1]=Point(59,49);
    lv_cannonspots[2]=Point(61,45);
    lv_cannonspots[3]=Point(57,45);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", c_unitCreateIgnorePlacement, 5, Point(59.0, 47.0));
    lv_probe = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_probe, true);
    while ((UnitIsAlive(lv_pylon) == true)) {
        lv_i = 0;
        while ((UnitHasBehavior(lv_pylon, "NoFunds") == false) && (lv_i < 3)) {
            lv_i += 1;
            if ((UnitGroupCount(UnitGroup("PhotonCannon", 5, RegionCircle(lv_cannonspots[lv_i], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1)) {
                UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonspots[lv_i]), c_orderQueueAddToEnd);
            }

        }
        Wait(1.0, c_timeGame);
    }
    UnitKill(lv_probe);
    return true;
}

int gf_challengeOverseermadness (int lp_cstage) {
    // Variable Declarations
    int lv_position;
    int lv_count;
    int lv_timer;
    unitgroup lv_overseers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_count = FixedToInt(gv_difficulty);
    lv_timer = 300;
    lv_overseers = UnitGroupEmpty();

    // Implementation
    lv_count += lp_cstage/2;
    while ((lv_count > 0)) {
        lv_position = RandomInt(0, 3);
        lv_count -= 1;
        if ((lv_position == 0)) {
            gf_Overseer(Point(17,85), Point(11,96), Point(47,97), Point(32,40), Point(22,58), Point(40,80));
        }

        if ((lv_position == 1)) {
            gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
        }

        if ((lv_position == 2)) {
            gf_Overseer(Point(107,19), Point(118,34), Point(143,49), Point(92,20), Point(150,10), Point(96,39));
        }

        if ((lv_position == 3)) {
            gf_Overseer(Point(35,24), Point(25,30), Point(50,14), Point(68,12), Point(30,44), Point(56,30));
        }

    }
    lv_overseers = UnitGroup("Overseer", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while ((lv_timer > 0) && (UnitGroupCount(lv_overseers, c_unitCountAlive) > 0)) {
        lv_timer -= 1;
        Wait(1.0, c_timeGame);
    }
    if ((lv_timer > 240)) {
        gf_achievements0killaward(49);
    }

    if ((lv_timer < 1)) {
        gv_zchallengemodetypewin[0] = true;
        gv_zchallengemodetypewin[4] = true;
    }

    return 1;
}

trigger auto_gf_Overseer_Trigger = null;
point auto_gf_Overseer_lp_spawn;
point auto_gf_Overseer_lp_loc1;
point auto_gf_Overseer_lp_loc2;
point auto_gf_Overseer_lp_loc3;
point auto_gf_Overseer_lp_loc4;
point auto_gf_Overseer_lp_loc5;

void gf_Overseer (point lp_spawn, point lp_loc1, point lp_loc2, point lp_loc3, point lp_loc4, point lp_loc5) {
    auto_gf_Overseer_lp_spawn = lp_spawn;
    auto_gf_Overseer_lp_loc1 = lp_loc1;
    auto_gf_Overseer_lp_loc2 = lp_loc2;
    auto_gf_Overseer_lp_loc3 = lp_loc3;
    auto_gf_Overseer_lp_loc4 = lp_loc4;
    auto_gf_Overseer_lp_loc5 = lp_loc5;

    if (auto_gf_Overseer_Trigger == null) {
        auto_gf_Overseer_Trigger = TriggerCreate("auto_gf_Overseer_TriggerFunc");
    }

    TriggerExecute(auto_gf_Overseer_Trigger, false, false);
}

bool auto_gf_Overseer_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawn = auto_gf_Overseer_lp_spawn;
    point lp_loc1 = auto_gf_Overseer_lp_loc1;
    point lp_loc2 = auto_gf_Overseer_lp_loc2;
    point lp_loc3 = auto_gf_Overseer_lp_loc3;
    point lp_loc4 = auto_gf_Overseer_lp_loc4;
    point lp_loc5 = auto_gf_Overseer_lp_loc5;

    // Variable Declarations
    int lv_achievementtimer;
    unit lv_boss;
    fixed lv_damage;
    fixed lv_hp;
    unitgroup lv_group;
    bool lv_regenerating;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    int lv_rnd;
    point[6] lv_loc;
    point lv_target;
    int lv_rndmsg;

    // Automatic Variable Declarations
    int auto3BE90F42_val;

    // Variable Initialization
    lv_achievementtimer = 10;
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_rndmsg = RandomInt(0, 2);

    // Implementation
    lv_loc[0] = lp_loc1;
    lv_loc[1] = lp_loc2;
    lv_loc[2] = lp_loc3;
    lv_loc[3] = lp_loc4;
    lv_loc[4] = lp_loc5;
    lv_target = lv_loc[RandomInt(0, 4)];
    lv_hp = gv_stage*gv_difficulty*gv_difficulty*30.0+700.0;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Overseer", c_unitCreateIgnorePlacement, 6, lp_spawn);
    lv_boss = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_boss, c_unitPropLifeMax, lv_hp);
    UnitSetPropertyFixed(lv_boss, c_unitPropMovementSpeed, gv_difficulty*0.5);
    UnitSetPropertyFixed(lv_boss, c_unitPropLife, lv_hp);
    if ((gv_mode == 0)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1BDE50B1"), StringExternal("Param/Value/77B1146E"), 0.0, c_transmissionDurationAdd, false);
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        if ((lv_achievementtimer > 0)) {
            lv_achievementtimer -= 1;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_boss), lv_target) < 3.0)) {
            if ((UnitGroupCount(UnitGroup(null, 6, RegionCircle(lv_target, 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) < 1)) {
                if ((gv_stage < 4)) {
                    gf_SpawningRandom(lv_target, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), 1, 0, 0, 0, 1, 0);
                }
                else {
                    gf_SpawningRandom(lv_target, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 0, 0, RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), RandomInt(0,1), 1, 0, 0, 0, 1, 0);
                }
            }

            lv_target = lv_loc[RandomInt(0, 4)];
        }

        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping);
    if ((lv_achievementtimer > 0)) {
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                while ((gf_achievementgetlevel(lv_i, 6) < FixedToInt(gv_difficulty))) {
                    gf_achievementnew(lv_i, 6);
                }
            }

        }
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        if ((gv_mode == 0)) {
            auto3BE90F42_val = lv_rndmsg;
            if (auto3BE90F42_val == 0) {
                TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/ACA8E211"), StringExternal("Param/Value/30DEDE8A"), 0.0, c_transmissionDurationAdd, false);
            }
            else if (auto3BE90F42_val == 1) {
                TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A88B3D1E"), StringExternal("Param/Value/E0FE25E5"), 0.0, c_transmissionDurationAdd, false);
            }
            else if (auto3BE90F42_val == 2) {
                TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/C0D8DD33"), StringExternal("Param/Value/DAD95E2C"), 0.0, c_transmissionDurationAdd, false);
            }
            else {
            }
        }

        gv_zacmOverseers += 1;
        gf_achievementPossiblyGainedTeam(62, gv_zacmOverseers);
        gf_gainxp(150+(250*(gv_stage-1)));
    }
    else {
        UnitKill(lv_boss);
    }
    return true;
}

bool gf_targetspecial (unit lp_target) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_target) == "FireHero") || (UnitGetType(lp_target) == "LightningHero") || (UnitGetType(lp_target) == "PoisonHero") || (UnitGetType(lp_target) == "ShadowHero") || (UnitGetType(lp_target) == "WarpHero") || (UnitGetType(lp_target) == "ParticleHero") || (UnitGetType(lp_target) == "Firespewer") || (UnitGetType(lp_target) == "MobileNydusworm") || (UnitGetType(lp_target) == "Superlisk") || (UnitGetType(lp_target) == "WingedHorror") || (UnitGetType(lp_target) == "Overseer") || (UnitGetType(lp_target) == "Pylon") || (UnitGetType(lp_target) == "WaterHero") || (UnitGetType(lp_target) == "EarthHero") || (UnitGetType(lp_target) == "Phoenix") || (UnitGetType(lp_target) == "AlarakChampion") || (UnitGetType(lp_target) == "ArtanisVoid") || (UnitGetType(lp_target) == "Demolisher"))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_getPortrait (string lp_boss) {
    // Automatic Variable Declarations
    string autoB3F6723E_val;

    // Implementation
    autoB3F6723E_val = lp_boss;
    if (autoB3F6723E_val == "ZergLord") {
        return "Assets\\Textures\\leviathanportrait_static.dds";
    }
    else if (autoB3F6723E_val == "MindLord") {
        return "Assets\\Textures\\spotterportrait_static.dds";
    }
    else if (autoB3F6723E_val == "HorrorLord") {
        return "Assets\\Textures\\changelingportrait_static.dds";
    }
    else if (autoB3F6723E_val == "ExtinctionLord") {
        return "Assets\\Textures\\narudportraitex2_static.dds";
    }
    else if (autoB3F6723E_val == "StormLord") {
        return "Assets\\Textures\\tip_voidshard.dds";
    }
    else if (autoB3F6723E_val == "ChaosLord") {
        return "Assets\\Textures\\voidthrasherportrait_static.dds";
    }
    else if (autoB3F6723E_val == "ShadowLord") {
        return "Assets\\Textures\\lurker_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "FleshLord") {
        return "Assets\\Textures\\blightbringerportrait_static.dds";
    }
    else if (autoB3F6723E_val == "PrimalLord") {
        return "Assets\\Textures\\primalzergkingportrait_static.dds";
    }
    else if (autoB3F6723E_val == "TyrantLord") {
        return "Assets\\Textures\\tyrannozor_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "SporeLord") {
        return "Assets\\Textures\\guardian_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "SiegeLord") {
        return "Assets\\Textures\\ravasaur_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "FortressLord") {
        return "Assets\\Textures\\overlordportrait_static.dds";
    }
    else if (autoB3F6723E_val == "CorrosionLord") {
        return "Assets\\Textures\\devourerportrait_static.dds";
    }
    else if (autoB3F6723E_val == "SerpentLord") {
        return "Assets\\Textures\\viperportrait_static.dds";
    }
    else if (autoB3F6723E_val == "CorruptionLord") {
        return "Assets\\Textures\\corruptor_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "InfectionLord") {
        return "Assets\\Textures\\infestedcolonistportrait_static.dds";
    }
    else if (autoB3F6723E_val == "HiveLord") {
        return "Assets\\Textures\\queen_webby_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "MutationLord") {
        return "Assets\\Textures\\aberrationportrait_static.dds";
    }
    else if (autoB3F6723E_val == "DreadLord") {
        return "Assets\\Textures\\hunterlingportrait_static.dds";
    }
    else if (autoB3F6723E_val == "DoomLord") {
        return "Assets\\Textures\\hybrid_protossadvanced_experimented_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "OblivionLord") {
        return "Assets\\Textures\\hybridzergadvancedportrait_static.dds";
    }
    else if (autoB3F6723E_val == "VoidLord") {
        return "Assets\\Textures\\hybridprotossadvancedportrait_static.dds";
    }
    else if (autoB3F6723E_val == "CarnageLord") {
        return "Assets\\Textures\\hydralisk_premiumskin_noxious_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "ParasiteLord") {
        return "Assets\\Textures\\infestor_webby_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "DemonLord") {
        return "Assets\\Textures\\zergling_webby_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "DeathLord") {
        return "Assets\\Textures\\hybridzergportrait_static.dds";
    }
    else if (autoB3F6723E_val == "HordeLord") {
        return "Assets\\Textures\\broodlordportrait_static.dds";
    }
    else if (autoB3F6723E_val == "SkyLord") {
        return "Assets\\Textures\\mutaliskportrait_static.dds";
    }
    else if (autoB3F6723E_val == "BroodLord") {
        return "Assets\\Textures\\broodlord_premiumskin_aquatic_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "BeastLord") {
        return "Assets\\Textures\\ultralisk_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "RockLord") {
        return "Assets\\Textures\\barracks_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "EvolutionLord") {
        return "Assets\\Textures\\dehakaportrait_static.dds";
    }
    else if (autoB3F6723E_val == "SlimeLord") {
        return "Assets\\Textures\\roach_webby_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "PlagueLord") {
        return "Assets\\Textures\\defilerportrait_static.dds";
    }
    else if (autoB3F6723E_val == "OceanLord") {
        return "Assets\\Textures\\hybridnemesisportrait_static.dds";
    }
    else if (autoB3F6723E_val == "AcidLord") {
        return "Assets\\Textures\\banelingportrait_static.dds";
    }
    else if (autoB3F6723E_val == "ThunderLord") {
        return "Assets\\Textures\\hybridprotossportrait_static.dds";
    }
    else if (autoB3F6723E_val == "SwarmLord") {
        return "Assets\\Textures\\swarmhost_primal_collection_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "FireLord") {
        return "Assets\\Textures\\ravager_collectionskin_bone_portrait_static.dds";
    }
    else if (autoB3F6723E_val == "ThornLord") {
        return "Assets\\Textures\\dakrun_primal_collection_portrait_static.dds";
    }
    else {
        return null;
    }
}

string gf_getText (string lp_boss) {
    // Automatic Variable Declarations
    string auto8EF05D74_val;

    // Implementation
    auto8EF05D74_val = lp_boss;
    if (auto8EF05D74_val == "ZergLord") {
        return "The Zerg Lord has <c val=\"FFFF80\"><d ref=\"Unit,ZergLord,LifeArmor\"/></c> armor and damage reduction.";
    }
    else if (auto8EF05D74_val == "MindLord") {
        return "Boosts the movement speed of all lesser bosses on the map, and additionally spawns one boss every 30 seconds.";
    }
    else if (auto8EF05D74_val == "HorrorLord") {
        return "The Horror Lord masks its presence and uses 3 types of random attacks, while also creating illusions to distract you";
    }
    else if (auto8EF05D74_val == "ExtinctionLord") {
        return "Takes 90% reduced damage while a hero is not within 8 range of it.";
    }
    else if (auto8EF05D74_val == "StormLord") {
        return "Gives zerg units 40% damage reduction in a range of 8, gains 5% damage reduction and loses 2% damage for every zerg unit in the same radius.";
    }
    else if (auto8EF05D74_val == "ChaosLord") {
        return "Red Orbs will launch themselves at enemies in a range of 12 dealing damage on impact and creating 5 smaller orbs which will travel outward from the impact point.<n/><n/>Purple Orbs turn missiles that touch them into smaller purple orbs which target a random point dealing damage on impact.<n/><n/>Each Green Orb gives the Chaos Lord 20% damage reduction, and knocks back any units that get too close.";
    }
    else if (auto8EF05D74_val == "ShadowLord") {
        return "The Shadow Lord cannot be seen";
    }
    else if (auto8EF05D74_val == "FleshLord") {
        return "Rapidly discharges projectiles by either rolling or lobbing";
    }
    else if (auto8EF05D74_val == "PrimalLord") {
        return "Periodically eats nearby zerg units to heal itself.";
    }
    else if (auto8EF05D74_val == "TyrantLord") {
        return "The Tyrant Lord gains 1 armor for 3 seconds each time it receives damage.";
    }
    else if (auto8EF05D74_val == "SporeLord") {
        return "Attacks From the Spore Lord deal no damage but will cover the affected unit in volatile spores which will explode if it receives damage or another stack of spores is applied.";
    }
    else if (auto8EF05D74_val == "SiegeLord") {
        return "The Siege Lord has greatly increased weapon range, but less accuracy.";
    }
    else if (auto8EF05D74_val == "FortressLord") {
        return "Hugely increased armor, however it is decreased by 1 every time damage is received.";
    }
    else if (auto8EF05D74_val == "CorrosionLord") {
        return "The Corrosion Lord's attacks reduce the armor and shield armor of its target by 3 for 30 seconds, stacks infinitely";
    }
    else if (auto8EF05D74_val == "SerpentLord") {
        return "Has 25% life steal and pulls its target towards itself.";
    }
    else if (auto8EF05D74_val == "CorruptionLord") {
        return "The Corruption Lord's missiles will continue to launch themselves at enemies in range up to 3 times.";
    }
    else if (auto8EF05D74_val == "InfectionLord") {
        return "Infects all protoss units is a radius of 20. Infected units are slowed and take additional damage over time time from any damage effect.";
    }
    else if (auto8EF05D74_val == "HiveLord") {
        return "Overlords circle the Hive Lord dropping units when they receive damage.";
    }
    else if (auto8EF05D74_val == "MutationLord") {
        return "Mutates a random zerg in a large radius every second increasing health by 100% damage by 100% and attack speed by 50%";
    }
    else if (auto8EF05D74_val == "DreadLord") {
        return "Protoss units in a huge radius are filled with dread, causing them to take 25% more damage, deal 25% less damage, and move 25% slower.";
    }
    else if (auto8EF05D74_val == "DoomLord") {
        return "Sends a doom that cannot be stopped until The Doom Lord is destroyed.";
    }
    else if (auto8EF05D74_val == "OblivionLord") {
        return "The Oblivion Lord has an 80% chance to take a maximum of 10 damage.";
    }
    else if (auto8EF05D74_val == "VoidLord") {
        return "The Void Lord has 20% chance to gain 70% damage reduction for 1 second after receiving damage";
    }
    else if (auto8EF05D74_val == "CarnageLord") {
        return "The Carnage Lord gains 10% faster attack speed for 10 seconds each time it attacks.";
    }
    else if (auto8EF05D74_val == "ParasiteLord") {
        return "The Parasite Lord takes control of 1 nearby unit every 1.5 seconds.";
    }
    else if (auto8EF05D74_val == "DemonLord") {
        return "The Demon Lord gains improved attack speed, movement speed, health regeneration, and armor the closer he is to being dead.";
    }
    else if (auto8EF05D74_val == "DeathLord") {
        return "Any unit that dares attack the Death Lord becomes cursed.";
    }
    else if (auto8EF05D74_val == "HordeLord") {
        return "Spawns Broodlings when receiving damage.";
    }
    else if (auto8EF05D74_val == "SkyLord") {
        return "Each time the Sky Lord receives damage it gains increased attack speed for 5 seconds.";
    }
    else if (auto8EF05D74_val == "BroodLord") {
        return "Launches Broodlings as its basic attack, and in addition units killed by the Brood Lord will spawn 2 Broodlings.";
    }
    else if (auto8EF05D74_val == "BeastLord") {
        return "Improves attack and movement speed for all zerg units in a large area by 50%";
    }
    else if (auto8EF05D74_val == "RockLord") {
        return "The Rock Lord unit has 50% chance to take no damage.";
    }
    else if (auto8EF05D74_val == "EvolutionLord") {
        return "The Evolution Lord unit grows stronger with each kill.";
    }
    else if (auto8EF05D74_val == "SlimeLord") {
        return "Dealing damage to the Slime Lord will apply 1 stack of slime to the caster.";
    }
    else if (auto8EF05D74_val == "PlagueLord") {
        return "Each time a plagued unit dies the Plague Lord is healed for 1% heath.";
    }
    else if (auto8EF05D74_val == "OceanLord") {
        return "Heals 5000 health to all zerg units in a large radius every 15 seconds.";
    }
    else if (auto8EF05D74_val == "AcidLord") {
        return "The Acid Lord explodes when it dies.";
    }
    else if (auto8EF05D74_val == "ThunderLord") {
        return "The Thunder Lord deals greatly increased damage to Shields.";
    }
    else if (auto8EF05D74_val == "SwarmLord") {
        return "The Swarm Lord has a 25% chance to spawn a pair of minions for every unit in a radius of 5 every 2.5 seconds, and will incubate eggs on any unit that it attacks";
    }
    else if (auto8EF05D74_val == "FireLord") {
        return "The Fire Lord leaves behind a large fire when it dies.";
    }
    else if (auto8EF05D74_val == "ThornLord") {
        return "Each time the Thorn Lord takes damage, it launches a thorn to random location.";
    }
    else {
        return "";
    }
}

unit gf_getpylonofstage () {
    // Automatic Variable Declarations
    int auto0ED6884D_val;

    // Implementation
    auto0ED6884D_val = gv_stage;
    if (auto0ED6884D_val == 1) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(241.0, 10.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 2) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(241.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 3) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(183.0, 113.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 4) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(230.0, 187.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 5) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(173.0, 163.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 6) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(116.0, 135.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 7) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 8) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 9) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 10) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(44.0, 115.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 11) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(73.0, 196.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto0ED6884D_val == 12) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(73.0, 196.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(73.0, 196.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3AC6695F"));
    return null;
}

unit gf_getpylonofprevstage () {
    // Automatic Variable Declarations
    int auto1EA82982_val;

    // Implementation
    auto1EA82982_val = gv_stage;
    if (auto1EA82982_val == 1) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(241.0, 10.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 2) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(241.0, 10.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 3) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(241.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 4) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(183.0, 113.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 5) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(230.0, 187.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 6) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(173.0, 163.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 7) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(116.0, 135.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 8) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 9) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 10) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(66.0, 58.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 11) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(44.0, 115.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else if (auto1EA82982_val == 12) {
        return UnitGroupUnit(UnitGroup("Pylon", 5, RegionCircle(Point(44.0, 115.0), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    else {
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8DB168D8"));
    return null;
}

unit gf_getcurrentzergbase () {
    // Variable Declarations
    unit lv_zergbase;
    int lv_pathcost;

    // Automatic Variable Declarations
    unitgroup auto322295F7_g;
    int auto322295F7_u;
    unit auto322295F7_var;

    // Variable Initialization
    lv_pathcost = 10000;

    // Implementation
    auto322295F7_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto322295F7_u = UnitGroupCount(auto322295F7_g, c_unitCountAll);
    for (;; auto322295F7_u -= 1) {
        auto322295F7_var = UnitGroupUnitFromEnd(auto322295F7_g, auto322295F7_u);
        if (auto322295F7_var == null) { break; }
        if ((((UnitGetType(auto322295F7_var) == "Hatchery") || (UnitGetType(auto322295F7_var) == "Lair") || (UnitGetType(auto322295F7_var) == "Hive")) && (AIPathingCostMap(UnitGetPosition(gf_getpylonofstage()), UnitGetPosition(auto322295F7_var)) >= 0) && (AIPathingCostMap(UnitGetPosition(gf_getpylonofstage()), UnitGetPosition(auto322295F7_var)) < lv_pathcost))) {
            lv_pathcost = AIPathingCostMap(UnitGetPosition(gf_getpylonofstage()), UnitGetPosition(auto322295F7_var));
            lv_zergbase = auto322295F7_var;
        }

    }
    return lv_zergbase;
}

trigger auto_gf_RepeatBossStarttimed_Trigger = null;

void gf_RepeatBossStarttimed () {
    if (auto_gf_RepeatBossStarttimed_Trigger == null) {
        auto_gf_RepeatBossStarttimed_Trigger = TriggerCreate("auto_gf_RepeatBossStarttimed_TriggerFunc");
    }

    TriggerExecute(auto_gf_RepeatBossStarttimed_Trigger, false, false);
}

bool auto_gf_RepeatBossStarttimed_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((gv_stage == 11)) {
            gf_Stage11BossSpawns();
        }

        Wait((100.0 - (gv_difficulty * 5.0)), c_timeGame);
    }
    return true;
}

void gf_BossStart () {
    // Variable Declarations
    bool lv_bossSpawn;
    int lv_random;

    // Automatic Variable Declarations
    unitgroup auto7D38E6CD_g;
    int auto7D38E6CD_u;
    unit auto7D38E6CD_var;
    int auto96C9BB48_val;

    // Variable Initialization
    lv_bossSpawn = true;
    lv_random = RandomInt(1, (20 + (FixedToInt(gv_difficulty) * 4)));

    // Implementation
    if ((gv_zmaxstage < 4)) {
        lv_random = RandomInt(1, 24);
    }

    if ((gv_stage == 11)) {
        libNtve_gf_ShowHideBossBar(false, 1);
        gv_bossActive = true;
        libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CBC568E5"), StringExternal("Param/Value/8FF0903F"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord13(true);
    }
    else {
        auto7D38E6CD_g = gv_enemyStucturesOfStage[gv_stage];
        auto7D38E6CD_u = UnitGroupCount(auto7D38E6CD_g, c_unitCountAll);
        for (;; auto7D38E6CD_u -= 1) {
            auto7D38E6CD_var = UnitGroupUnitFromEnd(auto7D38E6CD_g, auto7D38E6CD_u);
            if (auto7D38E6CD_var == null) { break; }
            if ((UnitTypeTestAttribute(UnitGetType(auto7D38E6CD_var), c_unitAttributeHeroic) == true) && (UnitTypeTestAttribute(UnitGetType(auto7D38E6CD_var), c_unitAttributeStructure) == false)) {
                lv_bossSpawn = false;
            }

        }
        if ((lv_bossSpawn == true)) {
            gv_bossActive = true;
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            auto96C9BB48_val = lv_random;
            if (auto96C9BB48_val == 1) {
                gf_SpawnBoss("ThornLord", true);
            }
            else if (auto96C9BB48_val == 2) {
                gf_SpawnBoss("FireLord", true);
            }
            else if (auto96C9BB48_val == 3) {
                gf_SpawnBoss("BroodLord", true);
            }
            else if (auto96C9BB48_val == 4) {
                gf_SpawnBoss("SwarmLord", true);
            }
            else if (auto96C9BB48_val == 5) {
                gf_SpawnBoss("AcidLord", true);
            }
            else if (auto96C9BB48_val == 6) {
                gf_SpawnBoss("PlagueLord", true);
            }
            else if (auto96C9BB48_val == 7) {
                gf_SpawnBoss("SlimeLord", true);
            }
            else if (auto96C9BB48_val == 8) {
                gf_SpawnBoss("ThunderLord", true);
            }
            else if (auto96C9BB48_val == 9) {
                gf_SpawnBoss("RockLord", true);
            }
            else if (auto96C9BB48_val == 10) {
                gf_SpawnBoss("BeastLord", true);
            }
            else if (auto96C9BB48_val == 11) {
                gf_SpawnBoss("SkyLord", true);
            }
            else if (auto96C9BB48_val == 12) {
                gf_DemonLord(true);
            }
            else if (auto96C9BB48_val == 13) {
                gf_SpawnBoss("ParasiteLord", true);
            }
            else if (auto96C9BB48_val == 14) {
                gf_SpawnBoss("CarnageLord", true);
            }
            else if (auto96C9BB48_val == 15) {
                gf_SpawnBoss("MutationLord", true);
            }
            else if (auto96C9BB48_val == 16) {
                gf_DoomLord4(true);
            }
            else if (auto96C9BB48_val == 17) {
                gf_SpawnBoss("SporeLord", true);
            }
            else if (auto96C9BB48_val == 18) {
                gf_SpawnBoss("DreadLord", true);
            }
            else if (auto96C9BB48_val == 19) {
                gf_SpawnBoss("InfectionLord", true);
            }
            else if (auto96C9BB48_val == 20) {
                gf_SpawnBoss("EvolutionLord", true);
            }
            else if (auto96C9BB48_val == 21) {
                gf_SpawnBoss("CorruptionLord", true);
            }
            else if (auto96C9BB48_val == 22) {
                gf_SpawnBoss("HordeLord", true);
            }
            else if (auto96C9BB48_val == 23) {
                gf_SpawnBoss("CorrosionLord", true);
            }
            else if (auto96C9BB48_val == 24) {
                gf_SpawnBoss("PrimalLord", true);
            }
            else if (auto96C9BB48_val == 25) {
                gf_SpawnBoss("TyrantLord", true);
            }
            else if (auto96C9BB48_val == 26) {
                gf_SpawnBoss("SerpentLord", true);
            }
            else if (auto96C9BB48_val == 27) {
                gf_SpawnBoss("FleshLord", true);
            }
            else if (auto96C9BB48_val == 28) {
                gf_SpawnBoss("DeathLord", true);
            }
            else if (auto96C9BB48_val == 29) {
                gf_SpawnBoss("FortressLord", true);
            }
            else if (auto96C9BB48_val == 30) {
                gf_SpawnBoss("SiegeLord", true);
            }
            else if (auto96C9BB48_val == 31) {
                gf_SpawnBoss("OceanLord", true);
            }
            else if (auto96C9BB48_val == 32) {
                gf_DoomLord7(true);
            }
            else if (auto96C9BB48_val == 33) {
                gf_SpawnBoss("StormLord", true);
                SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 34) {
                gf_SpawnBoss("VoidLord", true);
                SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 35) {
                gf_SpawnBoss("OblivionLord", true);
                SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 36) {
                gf_DoomLord(true);
                SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 37) {
                gf_DoomLord9(true);
                SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 38) {
                gf_DoomLord8(true);
                SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 39) {
                gf_ExtinctionLord(true);
                SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if (auto96C9BB48_val == 40) {
                gf_DoomLord19(true);
                SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else {
                gf_SpawnBoss("ThornLord", true);
            }
        }

    }
}

trigger auto_gf_SpawnBoss_Trigger = null;
string auto_gf_SpawnBoss_lp_unit;
bool auto_gf_SpawnBoss_lp_bossBar;

void gf_SpawnBoss (string lp_unit, bool lp_bossBar) {
    auto_gf_SpawnBoss_lp_unit = lp_unit;
    auto_gf_SpawnBoss_lp_bossBar = lp_bossBar;

    if (auto_gf_SpawnBoss_Trigger == null) {
        auto_gf_SpawnBoss_Trigger = TriggerCreate("auto_gf_SpawnBoss_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnBoss_Trigger, false, false);
}

bool auto_gf_SpawnBoss_TriggerFunc (bool testConds, bool runActions) {
    string lp_unit = auto_gf_SpawnBoss_lp_unit;
    bool lp_bossBar = auto_gf_SpawnBoss_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    text lv_bossname;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;
    int lv_bossreward;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bossname = UnitTypeGetName(lp_unit);
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unit, c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    lv_bossreward = (((1 + UnitBehaviorCount(lv_boss, "NormalBoss")) + (UnitBehaviorCount(lv_boss, "HardBoss") * 2)) + ((UnitBehaviorCount(lv_boss, "InsaneBoss") * 3) + (UnitBehaviorCount(lv_boss, "LegendaryBoss") * 4)));
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, gf_getPortrait(lp_unit), lv_bossname, 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(lp_unit)), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/01511F11"), (lv_bossname + StringExternal("Param/Value/680060BD")), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(((lv_bossreward-1)*500)+(250*(gv_stage)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, lv_bossreward, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/720E4E2F"), (lv_bossname + StringExternal("Param/Value/82FFD9B4")), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

void gf_Stage11BossSpawns () {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoBB0F40B4_val;

    // Variable Initialization
    lv_random = RandomInt(1, (20 + (FixedToInt(gv_difficulty) * 4)));

    // Implementation
    autoBB0F40B4_val = lv_random;
    if (autoBB0F40B4_val == 1) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/983B2AD7"), StringExternal("Param/Value/52579C80"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ThornLord", false);
    }
    else if (autoBB0F40B4_val == 2) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DDDD2A4A"), StringExternal("Param/Value/8FD638C3"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("FireLord", false);
    }
    else if (autoBB0F40B4_val == 3) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D366FD61"), StringExternal("Param/Value/5067634C"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("BroodLord", false);
    }
    else if (autoBB0F40B4_val == 4) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7FEC00AD"), StringExternal("Param/Value/F75CA09C"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SwarmLord", false);
    }
    else if (autoBB0F40B4_val == 5) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/864F6406"), StringExternal("Param/Value/2E086315"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("AcidLord", false);
    }
    else if (autoBB0F40B4_val == 6) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/6F7CB044"), StringExternal("Param/Value/C155CE24"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("PlagueLord", false);
    }
    else if (autoBB0F40B4_val == 7) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1902E3DD"), StringExternal("Param/Value/527186E1"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SlimeLord", false);
    }
    else if (autoBB0F40B4_val == 8) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/206CE6C6"), StringExternal("Param/Value/7719E4F2"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ThunderLord", false);
    }
    else if (autoBB0F40B4_val == 9) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2D412CF8"), StringExternal("Param/Value/72A0645D"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("RockLord", false);
    }
    else if (autoBB0F40B4_val == 10) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/9B73E813"), StringExternal("Param/Value/6E2799FD"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("BeastLord", false);
    }
    else if (autoBB0F40B4_val == 11) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A6659BE8"), StringExternal("Param/Value/5C501B7A"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SkyLord", false);
    }
    else if (autoBB0F40B4_val == 12) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/FB8D1E1D"), StringExternal("Param/Value/BEAD5BDA"), 0.0, c_transmissionDurationAdd, false);
        gf_DemonLord(false);
    }
    else if (autoBB0F40B4_val == 13) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8BAC1174"), StringExternal("Param/Value/B409D04D"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ParasiteLord", false);
    }
    else if (autoBB0F40B4_val == 14) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/B5E4024D"), StringExternal("Param/Value/136F1A11"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CarnageLord", false);
    }
    else if (autoBB0F40B4_val == 15) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2A0D9DA4"), StringExternal("Param/Value/962106F6"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("MutationLord", false);
    }
    else if (autoBB0F40B4_val == 16) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/52933D7B"), StringExternal("Param/Value/5D04F05C"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord4(false);
    }
    else if (autoBB0F40B4_val == 17) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A30D8B1B"), StringExternal("Param/Value/A1E78CAB"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SporeLord", false);
    }
    else if (autoBB0F40B4_val == 18) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2D523D6E"), StringExternal("Param/Value/5C7717B4"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("DreadLord", false);
    }
    else if (autoBB0F40B4_val == 19) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/4C0EBB21"), StringExternal("Param/Value/1F3AC18E"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("InfectionLord", false);
    }
    else if (autoBB0F40B4_val == 20) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/367E931C"), StringExternal("Param/Value/BA069895"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("EvolutionLord", false);
    }
    else if (autoBB0F40B4_val == 21) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/71CE6EF0"), StringExternal("Param/Value/6C17C98D"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CorruptionLord", false);
    }
    else if (autoBB0F40B4_val == 22) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/FFEC81D3"), StringExternal("Param/Value/93877D3A"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("HordeLord", false);
    }
    else if (autoBB0F40B4_val == 23) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/41A55A8B"), StringExternal("Param/Value/3F248363"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CorrosionLord", false);
    }
    else if (autoBB0F40B4_val == 24) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2B447AA7"), StringExternal("Param/Value/8F18BDB2"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("PrimalLord", false);
    }
    else if (autoBB0F40B4_val == 25) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0F233041"), StringExternal("Param/Value/2439E0FD"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("TyrantLord", false);
    }
    else if (autoBB0F40B4_val == 26) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E412BFC6"), StringExternal("Param/Value/38CB99CF"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SerpentLord", false);
    }
    else if (autoBB0F40B4_val == 27) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0FEECD92"), StringExternal("Param/Value/9E23D3D9"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("FleshLord", false);
    }
    else if (autoBB0F40B4_val == 28) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/883E2F3B"), StringExternal("Param/Value/411A5505"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("DeathLord", false);
    }
    else if (autoBB0F40B4_val == 29) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/46759156"), StringExternal("Param/Value/B34ED5AA"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("FortressLord", false);
    }
    else if (autoBB0F40B4_val == 30) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/ABFD8621"), StringExternal("Param/Value/EE55634C"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SiegeLord", false);
    }
    else if (autoBB0F40B4_val == 31) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/BEF66F59"), StringExternal("Param/Value/9D4120AE"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("OceanLord", false);
    }
    else if (autoBB0F40B4_val == 32) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2C9C7EBB"), StringExternal("Param/Value/C0DB3922"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord7(false);
    }
    else if (autoBB0F40B4_val == 33) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/BF5A2FC7"), StringExternal("Param/Value/5DC52D8C"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("StormLord", false);
        SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 34) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A5854025"), StringExternal("Param/Value/BEC565B0"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("VoidLord", false);
        SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 35) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/05739FDA"), StringExternal("Param/Value/2B707DE2"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("OblivionLord", false);
        SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 36) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7FA34AFB"), StringExternal("Param/Value/100CF521"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord(false);
        SoundPlay(SoundLink("MegaBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 37) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/BA58F5AC"), StringExternal("Param/Value/957FEEAF"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord9(false);
        SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 38) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/39906CCE"), StringExternal("Param/Value/750747BE"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord8(false);
        SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 39) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E81BE771"), StringExternal("Param/Value/38C169C3"), 0.0, c_transmissionDurationAdd, false);
        gf_ExtinctionLord(false);
        SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoBB0F40B4_val == 40) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1C22D4F5"), StringExternal("Param/Value/8B6E4EE4"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord19(false);
        SoundPlay(SoundLink("SuperBossIncomingSound", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        gf_SpawnBoss("ThornLord", false);
    }
}

trigger auto_gf_DoomLord13_Trigger = null;
bool auto_gf_DoomLord13_lp_bossBar;

void gf_DoomLord13 (bool lp_bossBar) {
    auto_gf_DoomLord13_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord13_Trigger == null) {
        auto_gf_DoomLord13_Trigger = TriggerCreate("auto_gf_DoomLord13_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord13_Trigger, false, false);
}

bool auto_gf_DoomLord13_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord13_lp_bossBar;

    // Variable Declarations
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZergLord", c_unitCreateIgnorePlacement, 6, Point(218.0, 223.0));
    lv_boss = UnitLastCreated();
    libNtve_gf_ShareVisionofUnit(lv_boss, true, 1);
    libNtve_gf_ShareVisionofUnit(lv_boss, true, 2);
    libNtve_gf_ShareVisionofUnit(lv_boss, true, 3);
    libNtve_gf_ShareVisionofUnit(lv_boss, true, 4);
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 20)), (100 + (gv_champion * 20)), (100 + (gv_champion * 20)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "IsChampionMode", lv_boss, gv_champion);
    if ((gv_champion == 1)) {
        libNtve_gf_SetBehaviorCount(lv_boss, "IsChampionMode", lv_boss, 1);
    }

    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\leviathanportrait_static.dds", StringExternal("Param/Value/728CD2EF"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
        Wait(1, c_timeGame);
        UnitBehaviorAdd(UnitGroupUnit(UnitGroup("Hive", 6, RegionCircle(UnitGetPosition(lv_boss), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1), "Stage11HiveInvulnerable", lv_boss, 1);
    }
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/6409B4BD"), StringExternal("Param/Value/E571B064"), 0.0, c_transmissionDurationAdd, false);
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 5, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
    }
    return true;
}

trigger auto_gf_DoomLord19_Trigger = null;
bool auto_gf_DoomLord19_lp_bossBar;

void gf_DoomLord19 (bool lp_bossBar) {
    auto_gf_DoomLord19_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord19_Trigger == null) {
        auto_gf_DoomLord19_Trigger = TriggerCreate("auto_gf_DoomLord19_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord19_Trigger, false, false);
}

bool auto_gf_DoomLord19_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord19_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;
    int lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();
    lv_timer = 25;

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MindLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\spotterportrait_static.dds", StringExternal("Param/Value/FE10A07D"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        lv_timer += 1;
        if ((lv_timer >= 30)) {
            lv_timer = 0;
            gf_MindLordSpawns();
        }

        Wait(1, c_timeGame);
    }
    PingDestroy(lv_ping);
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7B40E047"), StringExternal("Param/Value/C46B37BF"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(2000+(500*(gv_stage-1)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 5, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5BC7302F"), StringExternal("Param/Value/923E9022"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

void gf_MindLordSpawns () {
    // Variable Declarations
    int lv_random;

    // Automatic Variable Declarations
    int autoD8D41DF6_val;

    // Variable Initialization
    lv_random = RandomInt(1, 28);

    // Implementation
    autoD8D41DF6_val = lv_random;
    if (autoD8D41DF6_val == 1) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/540E5420"), StringExternal("Param/Value/C1093AC8"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ThornLord", false);
    }
    else if (autoD8D41DF6_val == 2) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/25469DC3"), StringExternal("Param/Value/0A20B321"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("FireLord", false);
    }
    else if (autoD8D41DF6_val == 3) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/785B46D9"), StringExternal("Param/Value/3B54AB71"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("BroodLord", false);
    }
    else if (autoD8D41DF6_val == 4) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/502E91E6"), StringExternal("Param/Value/176FAD20"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SwarmLord", false);
    }
    else if (autoD8D41DF6_val == 5) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D4D08A36"), StringExternal("Param/Value/585969D4"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("AcidLord", false);
    }
    else if (autoD8D41DF6_val == 6) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/882D4AB9"), StringExternal("Param/Value/B86FA233"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("PlagueLord", false);
    }
    else if (autoD8D41DF6_val == 7) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5050B974"), StringExternal("Param/Value/0AF4937C"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SlimeLord", false);
    }
    else if (autoD8D41DF6_val == 8) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/87858898"), StringExternal("Param/Value/9F1E7F21"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ThunderLord", false);
    }
    else if (autoD8D41DF6_val == 9) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/789EAFA6"), StringExternal("Param/Value/05E1AAD1"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("RockLord", false);
    }
    else if (autoD8D41DF6_val == 10) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E377150F"), StringExternal("Param/Value/760645A6"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("BeastLord", false);
    }
    else if (autoD8D41DF6_val == 11) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/628642AB"), StringExternal("Param/Value/129C919B"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SkyLord", false);
    }
    else if (autoD8D41DF6_val == 12) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/45C7A602"), StringExternal("Param/Value/8EB60E75"), 0.0, c_transmissionDurationAdd, false);
        gf_DemonLord(false);
    }
    else if (autoD8D41DF6_val == 13) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F9B53E09"), StringExternal("Param/Value/D88137C1"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("ParasiteLord", false);
    }
    else if (autoD8D41DF6_val == 14) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D8FA54AB"), StringExternal("Param/Value/92E9CA23"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CarnageLord", false);
    }
    else if (autoD8D41DF6_val == 15) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0D45E3DD"), StringExternal("Param/Value/01D06C71"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("MutationLord", false);
    }
    else if (autoD8D41DF6_val == 16) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7253FCF2"), StringExternal("Param/Value/0726E60F"), 0.0, c_transmissionDurationAdd, false);
        gf_DoomLord4(false);
    }
    else if (autoD8D41DF6_val == 17) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/6A033038"), StringExternal("Param/Value/CCF88465"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SporeLord", false);
    }
    else if (autoD8D41DF6_val == 18) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/ACC15891"), StringExternal("Param/Value/9445CAA6"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("DreadLord", false);
    }
    else if (autoD8D41DF6_val == 19) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/99AFBE61"), StringExternal("Param/Value/C657F1FF"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("InfectionLord", false);
    }
    else if (autoD8D41DF6_val == 20) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/86BB62FA"), StringExternal("Param/Value/13390CCD"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("EvolutionLord", false);
    }
    else if (autoD8D41DF6_val == 21) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/044ED932"), StringExternal("Param/Value/D10EC744"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CorruptionLord", false);
    }
    else if (autoD8D41DF6_val == 22) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A61B6A4A"), StringExternal("Param/Value/2A3C3954"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("HordeLord", false);
    }
    else if (autoD8D41DF6_val == 23) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2B5A2B81"), StringExternal("Param/Value/E89B76D8"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("CorrosionLord", false);
    }
    else if (autoD8D41DF6_val == 24) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/551CF32E"), StringExternal("Param/Value/EA60AEFA"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("PrimalLord", false);
    }
    else if (autoD8D41DF6_val == 25) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/ED911D2F"), StringExternal("Param/Value/FD41BB56"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("TyrantLord", false);
    }
    else if (autoD8D41DF6_val == 26) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1CECE447"), StringExternal("Param/Value/86A55F6F"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("SerpentLord", false);
    }
    else if (autoD8D41DF6_val == 27) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/B3BD105E"), StringExternal("Param/Value/23EB794F"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("FleshLord", false);
    }
    else if (autoD8D41DF6_val == 28) {
        TransmissionSend(PlayerGroupActive(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/3549092E"), StringExternal("Param/Value/2D721A05"), 0.0, c_transmissionDurationAdd, false);
        gf_SpawnBoss("DeathLord", false);
    }
    else {
    }
}

trigger auto_gf_DoomLord9_Trigger = null;
bool auto_gf_DoomLord9_lp_bossBar;

void gf_DoomLord9 (bool lp_bossBar) {
    auto_gf_DoomLord9_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord9_Trigger == null) {
        auto_gf_DoomLord9_Trigger = TriggerCreate("auto_gf_DoomLord9_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord9_Trigger, false, false);
}

bool auto_gf_DoomLord9_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord9_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    const int auto3C3BC8CD_n = 2;
    int auto3C3BC8CD_i;
    const int autoCBD52E23_n = 3;
    int autoCBD52E23_i;

    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HorrorLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\changelingportrait_static.dds", StringExternal("Param/Value/24D7D97B"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    lv_ping = PingLastCreated();
    while ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_boss), 4.0))), c_orderQueueReplace);
        for (auto3C3BC8CD_i = 1; auto3C3BC8CD_i <= auto3C3BC8CD_n; auto3C3BC8CD_i += 1) {
            if ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
                Wait(1, c_timeGame);
            }

        }
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        for (autoCBD52E23_i = 1; autoCBD52E23_i <= autoCBD52E23_n; autoCBD52E23_i += 1) {
            if ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
                Wait(1, c_timeGame);
            }

        }
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/49C7792D"), StringExternal("Param/Value/5B25B7B5"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(2000+(500*(gv_stage-1)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 5, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/41B03027"), StringExternal("Param/Value/77E0D8F1"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_ExtinctionLord_Trigger = null;
bool auto_gf_ExtinctionLord_lp_bossBar;

void gf_ExtinctionLord (bool lp_bossBar) {
    auto_gf_ExtinctionLord_lp_bossBar = lp_bossBar;

    if (auto_gf_ExtinctionLord_Trigger == null) {
        auto_gf_ExtinctionLord_Trigger = TriggerCreate("auto_gf_ExtinctionLord_TriggerFunc");
    }

    TriggerExecute(auto_gf_ExtinctionLord_Trigger, false, false);
}

bool auto_gf_ExtinctionLord_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_ExtinctionLord_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ExtinctionLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    gf_ChaosOrbs(lv_boss, "ExtinctionOrb", 7, 6, 10.0, 2.25, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ExtinctionOrb", 6, 6, 8.0, -2.5, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ExtinctionOrb", 5, 6, 6.0, 2.75, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ExtinctionOrb", 4, 6, 4.0, -4.125, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ExtinctionOrb", 3, 6, 2.0, 5.5, 3.0, 100.0);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\narudportraitex2_static.dds", StringExternal("Param/Value/8F59279B"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/9D7645CD"), StringExternal("Param/Value/ACE3330C"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(2000+(500*(gv_stage-1)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 5, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/673DB7AD"), StringExternal("Param/Value/476E931E"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_DoomLord8_Trigger = null;
bool auto_gf_DoomLord8_lp_bossBar;

void gf_DoomLord8 (bool lp_bossBar) {
    auto_gf_DoomLord8_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord8_Trigger == null) {
        auto_gf_DoomLord8_Trigger = TriggerCreate("auto_gf_DoomLord8_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord8_Trigger, false, false);
}

bool auto_gf_DoomLord8_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord8_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ChaosLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    gf_ChaosOrbs(lv_boss, "ChaosOrbRed", 5, 6, 4.0, 2.75, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ChaosOrbPurple", 4, 6, 3.0, -2.5, 3.0, 100.0);
    gf_ChaosOrbs(lv_boss, "ChaosOrbGreen", 3, 6, 2.0, 2.0, 3.0, 100.0);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\voidthrasherportrait_static.dds", StringExternal("Param/Value/3EC68D11"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E004F634"), StringExternal("Param/Value/69980C5F"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(2000+(500*(gv_stage-1)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 5, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/ECA8A054"), StringExternal("Param/Value/AA1C0597"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_ChaosOrbs_Trigger = null;
unit auto_gf_ChaosOrbs_lp_hostUnit;
string auto_gf_ChaosOrbs_lp_createdUnitType;
int auto_gf_ChaosOrbs_lp_createdUnitCount;
int auto_gf_ChaosOrbs_lp_player;
fixed auto_gf_ChaosOrbs_lp_radius;
fixed auto_gf_ChaosOrbs_lp_turnspeed1;
fixed auto_gf_ChaosOrbs_lp_createdUnitHieght;
fixed auto_gf_ChaosOrbs_lp_createdUnitScale;

void gf_ChaosOrbs (unit lp_hostUnit, string lp_createdUnitType, int lp_createdUnitCount, int lp_player, fixed lp_radius, fixed lp_turnspeed1, fixed lp_createdUnitHieght, fixed lp_createdUnitScale) {
    auto_gf_ChaosOrbs_lp_hostUnit = lp_hostUnit;
    auto_gf_ChaosOrbs_lp_createdUnitType = lp_createdUnitType;
    auto_gf_ChaosOrbs_lp_createdUnitCount = lp_createdUnitCount;
    auto_gf_ChaosOrbs_lp_player = lp_player;
    auto_gf_ChaosOrbs_lp_radius = lp_radius;
    auto_gf_ChaosOrbs_lp_turnspeed1 = lp_turnspeed1;
    auto_gf_ChaosOrbs_lp_createdUnitHieght = lp_createdUnitHieght;
    auto_gf_ChaosOrbs_lp_createdUnitScale = lp_createdUnitScale;

    if (auto_gf_ChaosOrbs_Trigger == null) {
        auto_gf_ChaosOrbs_Trigger = TriggerCreate("auto_gf_ChaosOrbs_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChaosOrbs_Trigger, false, false);
}

bool auto_gf_ChaosOrbs_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hostUnit = auto_gf_ChaosOrbs_lp_hostUnit;
    string lp_createdUnitType = auto_gf_ChaosOrbs_lp_createdUnitType;
    int lp_createdUnitCount = auto_gf_ChaosOrbs_lp_createdUnitCount;
    int lp_player = auto_gf_ChaosOrbs_lp_player;
    fixed lp_radius = auto_gf_ChaosOrbs_lp_radius;
    fixed lp_turnspeed1 = auto_gf_ChaosOrbs_lp_turnspeed1;
    fixed lp_createdUnitHieght = auto_gf_ChaosOrbs_lp_createdUnitHieght;
    fixed lp_createdUnitScale = auto_gf_ChaosOrbs_lp_createdUnitScale;

    // Variable Declarations
    unit[11] lv_over;
    fixed lv_step;
    fixed[11] lv_hp;
    int lv_i;
    bool lv_r1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r1 = true;

    // Implementation
    while ((lv_i < lp_createdUnitCount)) {
        UnitCreate(1, lp_createdUnitType, c_unitCreateIgnorePlacement, lp_player, UnitGetPosition(lp_hostUnit), 270.0);
        libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
        UnitSetHeight(UnitLastCreated(), lp_createdUnitHieght, 0.0);
        UnitSetScale(UnitLastCreated(), lp_createdUnitScale, lp_createdUnitScale, lp_createdUnitScale);
        lv_over[lv_i] = UnitLastCreated();
        lv_i += 1;
    }
    while ((UnitIsAlive(lp_hostUnit) == true)) {
        lv_i = 0;
        lv_step += lp_turnspeed1;
        while ((lv_i < lp_createdUnitCount)) {
            if ((UnitIsAlive(lv_over[lv_i]) == true)) {
                UnitSetPosition(lv_over[lv_i], PointWithOffsetPolar(UnitGetPosition(lp_hostUnit), lp_radius, (((360.0 / IntToFixed(lp_createdUnitCount)) * IntToFixed(lv_i)) + lv_step)), true);
            }

            lv_i += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < lp_createdUnitCount)) {
        UnitKill(lv_over[lv_i]);
        lv_i += 1;
    }
    return true;
}

trigger auto_gf_DoomLord_Trigger = null;
bool auto_gf_DoomLord_lp_bossBar;

void gf_DoomLord (bool lp_bossBar) {
    auto_gf_DoomLord_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord_Trigger == null) {
        auto_gf_DoomLord_Trigger = TriggerCreate("auto_gf_DoomLord_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord_Trigger, false, false);
}

bool auto_gf_DoomLord_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unit lv_ImpendingDoom;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DoomLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ImpendingDoom", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 1);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 2);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 3);
    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, 4);
    lv_ImpendingDoom = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    UnitIssueOrder(lv_ImpendingDoom, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\hybrid_protossadvanced_experimented_portrait_static.dds", StringExternal("Param/Value/E9BACD06"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        UnitIssueOrder(lv_ImpendingDoom, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    UnitKill(lv_ImpendingDoom);
    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/216F30E4"), StringExternal("Param/Value/13DB64C3"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(1500+(250*(gv_stage)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 4, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F8732D78"), StringExternal("Param/Value/3C57A8B0"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_DoomLord7_Trigger = null;
bool auto_gf_DoomLord7_lp_bossBar;

void gf_DoomLord7 (bool lp_bossBar) {
    auto_gf_DoomLord7_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord7_Trigger == null) {
        auto_gf_DoomLord7_Trigger = TriggerCreate("auto_gf_DoomLord7_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord7_Trigger, false, false);
}

bool auto_gf_DoomLord7_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord7_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    const int autoBAD1F190_n = 2;
    int autoBAD1F190_i;
    const int autoC862DA77_n = 3;
    int autoC862DA77_i;

    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\lurker_primal_collection_portrait_static.dds", StringExternal("Param/Value/2645DB60"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    lv_ping = PingLastCreated();
    while ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_boss), 4.0))), c_orderQueueReplace);
        for (autoBAD1F190_i = 1; autoBAD1F190_i <= autoBAD1F190_n; autoBAD1F190_i += 1) {
            if ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
                Wait(1, c_timeGame);
            }

        }
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        for (autoC862DA77_i = 1; autoC862DA77_i <= autoC862DA77_n; autoC862DA77_i += 1) {
            if ((libNtve_gf_UnitIsHidden(lv_boss) == false) && (UnitIsAlive(lv_boss) == true)) {
                Wait(1, c_timeGame);
            }

        }
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/FB9C6816"), StringExternal("Param/Value/80F0D464"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(1000+(250*(gv_stage)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 3, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E07FE3B6"), StringExternal("Param/Value/CB2AC16A"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_DoomLord4_Trigger = null;
bool auto_gf_DoomLord4_lp_bossBar;

void gf_DoomLord4 (bool lp_bossBar) {
    auto_gf_DoomLord4_lp_bossBar = lp_bossBar;

    if (auto_gf_DoomLord4_Trigger == null) {
        auto_gf_DoomLord4_Trigger = TriggerCreate("auto_gf_DoomLord4_TriggerFunc");
    }

    TriggerExecute(auto_gf_DoomLord4_Trigger, false, false);
}

bool auto_gf_DoomLord4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DoomLord4_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    unit lv_boss;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HiveLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    gf_Queen(lv_boss, (3 + (gv_zmaxstage / 2)), 4, 2.5, 2.0);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\queen_webby_collection_portrait_static.dds", StringExternal("Param/Value/0FBE29D6"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        if ((gv_champion == 1)) {
            if (((UnitGroupCount(UnitGroup("ChampionOverlord", 6, RegionCircle(UnitGetPosition(lv_boss), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
                gf_Queen(lv_boss, 1, 4, 2.5, 2.0);
            }

        }
        else {
            if (((UnitGroupCount(UnitGroup("Overlord", 6, RegionCircle(UnitGetPosition(lv_boss), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
                gf_Queen(lv_boss, 1, 4, 2.5, 2.0);
            }

        }
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    gf_achievementherokills();
    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F6B0FCF3"), StringExternal("Param/Value/C524F160"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp((250*(gv_stage)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/20230F9B"), StringExternal("Param/Value/C8233F8C"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_DemonLord_Trigger = null;
bool auto_gf_DemonLord_lp_bossBar;

void gf_DemonLord (bool lp_bossBar) {
    auto_gf_DemonLord_lp_bossBar = lp_bossBar;

    if (auto_gf_DemonLord_Trigger == null) {
        auto_gf_DemonLord_Trigger = TriggerCreate("auto_gf_DemonLord_TriggerFunc");
    }

    TriggerExecute(auto_gf_DemonLord_Trigger, false, false);
}

bool auto_gf_DemonLord_TriggerFunc (bool testConds, bool runActions) {
    bool lp_bossBar = auto_gf_DemonLord_lp_bossBar;

    // Variable Declarations
    unit lv_nextboss;
    fixed lv_lifecurrent;
    fixed lv_stackcount;
    unit lv_boss;
    fixed lv_hp;
    unitgroup lv_group;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DemonLord", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    lv_boss = UnitLastCreated();
    libNtve_gf_SetBehaviorCount(UnitLastCreated(), "DifficultyBuff", UnitLastCreated(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    UnitSetScale(UnitLastCreated(), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)), (100 + (gv_champion * 30)));
    libNtve_gf_SetBehaviorCount(lv_boss, "Enrage", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "FireEnchanted", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "HasteAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "LightningEnchanted2", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "MightAuraChampion", lv_boss, gv_champion);
    libNtve_gf_SetBehaviorCount(lv_boss, "StoneSkin", lv_boss, gv_champion);
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    lv_hp = UnitGetPropertyFixed(lv_boss, c_unitPropLife, c_unitPropCurrent);
    if ((lp_bossBar == true)) {
        if ((gv_mode == 0)) {
            libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\zergling_webby_collection_portrait_static.dds", StringExternal("Param/Value/C82554CC"), 0, PlayerGroupAll());
            libNtve_gf_SetBossBarBoss(1, lv_boss, true);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_boss))), PlayerGroupAll());
            gv_currentBoss = lv_boss;
        }

    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true) && (libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        lv_lifecurrent = UnitGetPropertyFixed(lv_boss, c_unitPropLife, c_unitPropCurrent);
        lv_stackcount = 0.0;
        while ((lv_lifecurrent < lv_hp)) {
            lv_lifecurrent += (lv_hp / 15.0);
            lv_stackcount += 1.0;
        }
        libNtve_gf_SetBehaviorCount(lv_boss, "DemonRageStack", lv_boss, FixedToInt(lv_stackcount));
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        if ((gv_currentBoss == lv_boss)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(""), PlayerGroupAll());
            lv_nextboss = UnitGroupClosestToPoint(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHover) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), UnitGetPosition(gf_getpylonofstage()));
            if ((lv_nextboss != null)) {
                if ((gv_stage != 11)) {
                    gv_currentBoss = lv_nextboss;
                    libNtve_gf_DisplayBossBar(1, gf_getPortrait(UnitGetType(lv_nextboss)), UnitTypeGetName(UnitGetType(lv_nextboss)), 0, PlayerGroupAll());
                    libNtve_gf_SetBossBarBoss(1, lv_nextboss, true);
                    libNtve_gf_SetDialogItemTooltip(gv_bossTooltipDialogItem, StringToText(gf_getText(UnitGetType(lv_nextboss))), PlayerGroupAll());
                }

            }

        }

    }

    PingDestroy(lv_ping);
    if ((lp_bossBar == true)) {
        gv_bossActive = false;
    }

    if ((libNtve_gf_UnitIsHidden(lv_boss) == false)) {
        gf_achievementherokills();
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/AFAEB2B2"), StringExternal("Param/Value/50EF6F80"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp((250*(gv_stage)));
        lv_i = 0;
        while ((lv_i < 4)) {
            lv_i += 1;
            gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
        }
    }
    else {
        UnitKill(lv_boss);
        TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CD787551"), StringExternal("Param/Value/F1711832"), 0.0, c_transmissionDurationAdd, false);
        gf_BossStart();
    }
    return true;
}

trigger auto_gf_BossSuperlisk_Trigger = null;

void gf_BossSuperlisk () {
    if (auto_gf_BossSuperlisk_Trigger == null) {
        auto_gf_BossSuperlisk_Trigger = TriggerCreate("auto_gf_BossSuperlisk_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossSuperlisk_Trigger, false, false);
}

bool auto_gf_BossSuperlisk_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;
    fixed lv_damage;
    fixed lv_hp;
    unitgroup lv_group;
    bool lv_regenerating;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    if ((gv_champion == 1)) {
        lv_hp = gv_stage*gv_difficulty*gv_difficulty*100.0+3000.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Superlisk", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
        UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    }
    else {
        lv_hp = gv_stage*gv_difficulty*gv_difficulty*30.0+1500.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Superlisk", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    }
    lv_boss = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_boss, c_unitPropLifeMax, lv_hp);
    UnitSetPropertyFixed(lv_boss, c_unitPropLife, lv_hp);
    if ((gv_mode == 0)) {
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ui_charbaricons_zerg_all.dds", StringExternal("Param/Value/C4C552B6"), 0, PlayerGroupAll());
        libNtve_gf_SetBossBarBoss(1, lv_boss, true);
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    UnitBehaviorAdd(lv_boss, "ZergBossDmgBonusHidden", lv_boss, FixedToInt((gv_difficulty*gv_difficulty)+1));
    while ((UnitIsAlive(lv_boss) == true)) {
        UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        lv_group = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_group, c_unitCountAll) >= 1)) {
            lv_pt = UnitGroupRandomUnit(lv_group, c_unitCountAll);
            if ((lv_pt != lv_boss) && ((UnitGetOwner(lv_pt) <= 5))) {
                UnitCreateEffectUnit(lv_boss, "BossBanelingThrow", lv_pt);
                break;
            }

            UnitGroupRemove(lv_group, lv_pt);
        }
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        libNtve_gf_ShowHideBossBar(false, 1);
    }

    PingDestroy(lv_ping);
    gf_achievementherokills();
    gv_bossActive = false;
    TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/559C50D5"), StringExternal("Param/Value/E9EEF264"), 0.0, c_transmissionDurationAdd, false);
    gf_gainxp(150+(250*(gv_stage-1)));
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
    }
    return true;
}

trigger auto_gf_BossWingedHorror_Trigger = null;

void gf_BossWingedHorror () {
    if (auto_gf_BossWingedHorror_Trigger == null) {
        auto_gf_BossWingedHorror_Trigger = TriggerCreate("auto_gf_BossWingedHorror_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossWingedHorror_Trigger, false, false);
}

bool auto_gf_BossWingedHorror_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;
    fixed lv_damage;
    fixed lv_hp;
    unitgroup lv_group;
    bool lv_regenerating;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    if ((gv_champion == 1)) {
        lv_hp = gv_stage*gv_difficulty*gv_difficulty*100.0+2500.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WingedHorror", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
        UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    }
    else {
        lv_hp = gv_stage*gv_difficulty*gv_difficulty*25.0+1400.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WingedHorror", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    }
    lv_boss = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_boss, c_unitPropLifeMax, lv_hp);
    UnitSetPropertyFixed(lv_boss, c_unitPropLife, lv_hp);
    if ((gv_mode == 0)) {
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ui_charbaricons_zerg_all.dds", StringExternal("Param/Value/37C8F006"), 0, PlayerGroupAll());
        libNtve_gf_SetBossBarBoss(1, lv_boss, true);
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    UnitBehaviorAdd(lv_boss, "ZergBossDmgBonusHidden", lv_boss, FixedToInt((gv_difficulty*gv_difficulty)+1));
    while ((UnitIsAlive(lv_boss) == true)) {
        if ((lv_regenerating == false)) {
            if ((UnitHasBehavior(lv_boss, "RegenerationCDHidden") == false) && (UnitGetPropertyFixed(lv_boss, c_unitPropLife, c_unitPropCurrent) <= (UnitGetPropertyFixed(lv_boss, c_unitPropLifeMax, c_unitPropCurrent) / 3.0))) {
                lv_regenerating = true;
                UnitIssueOrder(lv_boss, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                gf_BossSkillFlyaway(lv_boss);
            }
            else {
                UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            }
        }
        else {
            if ((UnitHasBehavior(lv_boss, "Flying") == false) && (UnitHasBehavior(lv_boss, "Regeneration") == false)) {
                lv_regenerating = false;
            }

        }
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        libNtve_gf_ShowHideBossBar(false, 1);
    }

    PingDestroy(lv_ping);
    gf_achievementherokills();
    gv_bossActive = false;
    TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1DE9EBF3"), StringExternal("Param/Value/BBACEB26"), 0.0, c_transmissionDurationAdd, false);
    gf_gainxp(150+(250*(gv_stage-1)));
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
    }
    return true;
}

trigger auto_gf_BossSkillFlyaway_Trigger = null;
unit auto_gf_BossSkillFlyaway_lp_boss;

void gf_BossSkillFlyaway (unit lp_boss) {
    auto_gf_BossSkillFlyaway_lp_boss = lp_boss;

    if (auto_gf_BossSkillFlyaway_Trigger == null) {
        auto_gf_BossSkillFlyaway_Trigger = TriggerCreate("auto_gf_BossSkillFlyaway_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossSkillFlyaway_Trigger, false, false);
}

bool auto_gf_BossSkillFlyaway_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boss = auto_gf_BossSkillFlyaway_lp_boss;

    // Variable Declarations
    int lv_counter;
    point lv_escapepoint;
    fixed lv_traveldistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_boss) == true)) {
    }
    else {
        return true;
    }
    UnitBehaviorAdd(lp_boss, "Flying", lp_boss, 1);
    lv_escapepoint = gf_BossSpawnLocation();
    lv_traveldistance = (DistanceBetweenPoints(UnitGetPosition(lp_boss), gf_BossSpawnLocation()) * 0.0075);
    UnitSetHeight(lp_boss, 3.0, 1.5);
    while ((lv_counter < 24)) {
        lv_counter += 1;
        UnitSetPosition(lp_boss, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_boss), lv_traveldistance, lv_escapepoint), true);
        Wait(0.0625, c_timeGame);
    }
    UnitSetHeight(lp_boss, 0.0, 1.5);
    while ((lv_counter < 48)) {
        lv_counter += 1;
        UnitSetPosition(lp_boss, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_boss), lv_traveldistance, lv_escapepoint), true);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_gf_BossMobileNydus_Trigger = null;

void gf_BossMobileNydus () {
    if (auto_gf_BossMobileNydus_Trigger == null) {
        auto_gf_BossMobileNydus_Trigger = TriggerCreate("auto_gf_BossMobileNydus_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossMobileNydus_Trigger, false, false);
}

bool auto_gf_BossMobileNydus_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;
    fixed lv_damage;
    fixed lv_hp;
    unitgroup lv_group;
    bool lv_fired;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    fixed lv_delay;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    if ((gv_champion == 1)) {
        lv_hp = gv_stage*gv_difficulty*300.0+2500.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MobileNydusworm", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
        UnitSetScale(UnitLastCreated(), 250.0, 250.0, 200.0);
    }
    else {
        lv_hp = gv_stage*gv_difficulty*125.0+800.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MobileNydusworm", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    }
    lv_boss = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_boss, c_unitPropLifeMax, lv_hp);
    UnitSetPropertyFixed(lv_boss, c_unitPropLife, lv_hp);
    if ((gv_mode == 0)) {
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ui_charbaricons_zerg_all.dds", StringExternal("Param/Value/05A82FB5"), 0, PlayerGroupAll());
        libNtve_gf_SetBossBarBoss(1, lv_boss, true);
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true)) {
        lv_group = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_group, c_unitCountAll) >= 1) && (lv_fired == false)) {
            lv_pt = UnitGroupRandomUnit(lv_group, c_unitCountAll);
            if ((lv_pt != lv_boss) && (UnitGetType(lv_pt) != "Probe") && (UnitGetType(lv_pt) != "WarpGate") && (UnitGetType(lv_pt) != "Pylon") && ((UnitGetOwner(lv_pt) <= 5))) {
                lv_fired = true;
            }

            UnitGroupRemove(lv_group, lv_pt);
        }
        if ((lv_fired == false)) {
            UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_boss, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
        if ((lv_delay <= 0.0)) {
            gf_BossSkillMobileNydusSpawnChampion(lv_boss);
            lv_delay = 25-((gv_difficulty*2)+gv_stage);
        }
        else {
            lv_delay -= 1.0;
        }
        lv_fired = false;
        Wait(1, c_timeGame);
    }
    if ((gv_mode == 0)) {
        libNtve_gf_ShowHideBossBar(false, 1);
    }

    PingDestroy(lv_ping);
    gf_achievementherokills();
    gv_bossActive = false;
    TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/214E0B11"), StringExternal("Param/Value/EE6556A0"), 0.0, c_transmissionDurationAdd, false);
    gf_gainxp(150+(250*(gv_stage-1)));
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
    }
    return true;
}

void gf_BossSkillMobileNydusSpawnChampion (unit lp_boss) {
    // Variable Declarations
    point lv_point;
    int lv_ctype;
    string lv_utype;
    point lv_pylon;

    // Automatic Variable Declarations
    int auto32C9654D_val;
    int auto77A27270_val;
    int autoCAE2E164_val;

    // Variable Initialization
    lv_point = UnitGetPosition(lp_boss);
    lv_pylon = UnitGetPosition(gf_getpylonofstage());

    // Implementation
    if ((gv_stage <= 5)) {
        lv_ctype = RandomInt(0, 3);
    }
    else {
        lv_ctype = RandomInt(1, 6);
    }
    if ((gv_champion == 1)) {
        auto77A27270_val = lv_ctype;
        if (auto77A27270_val == 0) {
            lv_utype = "HotSSwarmling";
        }
        else if (auto77A27270_val == 1) {
            lv_utype = "RoachCorpser";
        }
        else if (auto77A27270_val == 2) {
            lv_utype = "HydraliskImpaler";
        }
        else if (auto77A27270_val == 3) {
            lv_utype = "HotSNoxious";
        }
        else if (auto77A27270_val == 4) {
            lv_utype = "HotSTorrasque";
        }
        else if (auto77A27270_val == 5) {
            lv_utype = "Infestor";
        }
        else {
            lv_utype = "SwarmHostSplitA";
        }
    }
    else {
        auto32C9654D_val = lv_ctype;
        if (auto32C9654D_val == 0) {
            lv_utype = "Zergling";
        }
        else if (auto32C9654D_val == 1) {
            lv_utype = "Roach";
        }
        else if (auto32C9654D_val == 2) {
            lv_utype = "Hydralisk";
        }
        else if (auto32C9654D_val == 3) {
            lv_utype = "Ultralisk";
        }
        else if (auto32C9654D_val == 4) {
            lv_utype = "Metalisk";
        }
        else if (auto32C9654D_val == 5) {
            lv_utype = "Infestor";
        }
        else {
            lv_utype = "Ultralisk2";
        }
    }
    UnitCreate(1, lv_utype, c_unitCreateIgnorePlacement, 6, lv_point, 270.0);
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), lv_pylon), c_orderQueueReplace);
    UnitBehaviorAdd(UnitLastCreated(), "Champion", UnitLastCreated(), FixedToInt(gv_difficulty)+1);
    UnitSetScale(UnitLastCreated(), 150.0, 150.0, 150.0);
    lv_ctype = RandomInt(0, 5);
    autoCAE2E164_val = lv_ctype;
    if (autoCAE2E164_val == 0) {
        UnitBehaviorAdd(UnitLastCreated(), "HasteAuraChampion", UnitLastCreated(), 1);
    }
    else if (autoCAE2E164_val == 1) {
        UnitBehaviorAdd(UnitLastCreated(), "MightAuraChampion", UnitLastCreated(), 1);
    }
    else if (autoCAE2E164_val == 2) {
        UnitBehaviorAdd(UnitLastCreated(), "LightningEnchanted2", UnitLastCreated(), 1);
        UnitSetTeamColorIndex(UnitLastCreated(), 2);
    }
    else if (autoCAE2E164_val == 3) {
        UnitBehaviorAdd(UnitLastCreated(), "StoneSkin", UnitLastCreated(), 1);
        UnitSetTeamColorIndex(UnitLastCreated(), 12);
    }
    else if (autoCAE2E164_val == 4) {
        UnitBehaviorAdd(UnitLastCreated(), "Enrage", UnitLastCreated(), 1);
        UnitSetTeamColorIndex(UnitLastCreated(), 15);
    }
    else {
        UnitBehaviorAdd(UnitLastCreated(), "FireEnchanted", UnitLastCreated(), 1);
        UnitSetTeamColorIndex(UnitLastCreated(), 1);
    }
}

trigger auto_gf_BossFirespewer_Trigger = null;

void gf_BossFirespewer () {
    if (auto_gf_BossFirespewer_Trigger == null) {
        auto_gf_BossFirespewer_Trigger = TriggerCreate("auto_gf_BossFirespewer_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossFirespewer_Trigger, false, false);
}

bool auto_gf_BossFirespewer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boss;
    fixed lv_damage;
    fixed lv_hp;
    unitgroup lv_group;
    bool lv_fired;
    unit lv_pt;
    int lv_ping;
    int lv_i;
    playergroup lv_pg;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = UnitGroupEmpty();
    lv_ping = c_invalidPingId;
    lv_i = 1;
    lv_pg = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(gv_zcleargroup, lv_pg);
    if ((gv_champion == 1)) {
        lv_hp = gv_stage*gv_difficulty*450.0+3000.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firespewer", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
        UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
    }
    else {
        lv_hp = gv_stage*gv_difficulty*75.0+900.0;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Firespewer", c_unitCreateIgnorePlacement, 6, gf_BossSpawnLocation());
    }
    lv_boss = UnitLastCreated();
    UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    UnitSetPropertyFixed(lv_boss, c_unitPropLifeMax, lv_hp);
    UnitSetPropertyFixed(lv_boss, c_unitPropLife, lv_hp);
    if ((gv_mode == 0)) {
        libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\ui_charbaricons_zerg_all.dds", StringExternal("Param/Value/8E5D914E"), 0, PlayerGroupAll());
        libNtve_gf_SetBossBarBoss(1, lv_boss, true);
    }

    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", Point(0.0, 0.0), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 9000.0, 270.0);
    lv_ping = PingLastCreated();
    PingSetUnit(lv_ping, lv_boss);
    while ((UnitIsAlive(lv_boss) == true)) {
        lv_group = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_boss), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        while ((UnitGroupCount(lv_group, c_unitCountAll) >= 1) && (lv_fired == false)) {
            lv_pt = UnitGroupRandomUnit(lv_group, c_unitCountAll);
            if ((lv_pt != lv_boss) && (UnitGetType(lv_pt) != "Probe") && (UnitGetType(lv_pt) != "WarpGate") && (UnitGetType(lv_pt) != "DeflectorDrone") && (UnitGetType(lv_pt) != "DestroyerDrone") && (UnitGetType(lv_pt) != "HealerDrone") && (UnitGetType(lv_pt) != "ShielderDrone") && ((UnitGetOwner(lv_pt) <= 5))) {
                lv_fired = true;
                gf_BossSkillFirespew(lv_boss, lv_pt);
            }

            UnitGroupRemove(lv_group, lv_pt);
        }
        if ((lv_fired == false)) {
            UnitIssueOrder(lv_boss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lv_boss, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }
        lv_fired = false;
        Wait(3-(gv_difficulty*0.5), c_timeGame);
    }
    libNtve_gf_ShowHideBossBar(false, 1);
    PingDestroy(lv_ping);
    gf_achievementherokills();
    gv_bossActive = false;
    TransmissionSend(lv_pg, TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/84E8B565"), StringExternal("Param/Value/C280396E"), 0.0, c_transmissionDurationAdd, false);
    gf_gainxp(150+(250*(gv_stage-1)));
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        gf_rewardgainpoints(lv_i, 1, FixedToInt(gv_difficulty));
    }
    return true;
}

trigger auto_gf_BossSkillFirespew_Trigger = null;
unit auto_gf_BossSkillFirespew_lp_caster;
unit auto_gf_BossSkillFirespew_lp_target;

void gf_BossSkillFirespew (unit lp_caster, unit lp_target) {
    auto_gf_BossSkillFirespew_lp_caster = lp_caster;
    auto_gf_BossSkillFirespew_lp_target = lp_target;

    if (auto_gf_BossSkillFirespew_Trigger == null) {
        auto_gf_BossSkillFirespew_Trigger = TriggerCreate("auto_gf_BossSkillFirespew_TriggerFunc");
    }

    TriggerExecute(auto_gf_BossSkillFirespew_Trigger, false, false);
}

bool auto_gf_BossSkillFirespew_TriggerFunc (bool testConds, bool runActions) {
    unit lp_caster = auto_gf_BossSkillFirespew_lp_caster;
    unit lp_target = auto_gf_BossSkillFirespew_lp_target;

    // Variable Declarations
    unit lv_realtarget;
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_caster) == true)) {
        lv_type = "RedFireball";
        lv_realtarget = gf_targetunitmissilespell(lp_caster, UnitGetPosition(lp_caster), lp_target, true, 6.0, 1.0, false, lv_type, 0.175, UnitGroupEmpty(), 6.0);
        if ((lv_realtarget != null) && (UnitIsAlive(lp_caster) == true)) {
            UnitCreateEffectUnit(lp_caster, "BossFirespewerSet", lv_realtarget);
        }

    }

    return true;
}

point gf_BossSpawnLocation () {
    // Automatic Variable Declarations
    int auto8D8F1F76_val;

    // Implementation
    if ((gv_mode == 0)) {
        auto8D8F1F76_val = gv_stage;
        if (auto8D8F1F76_val == 0) {
            return Point(236.0, 58.0);
        }
        else if (auto8D8F1F76_val == 1) {
            return Point(236.0, 58.0);
        }
        else if (auto8D8F1F76_val == 2) {
            return Point(190.0, 108.0);
        }
        else if (auto8D8F1F76_val == 3) {
            return Point(220.0, 193.0);
        }
        else if (auto8D8F1F76_val == 4) {
            return Point(168.0, 166.0);
        }
        else if (auto8D8F1F76_val == 5) {
            return Point(109.0, 145.0);
        }
        else if (auto8D8F1F76_val == 6) {
            return Point(61.0, 61.0);
        }
        else if (auto8D8F1F76_val == 7) {
            return Point(21.0, 24.0);
        }
        else if (auto8D8F1F76_val == 8) {
            return Point(153.0, 13.0);
        }
        else if (auto8D8F1F76_val == 9) {
            return Point(28.0, 103.0);
        }
        else if (auto8D8F1F76_val == 10) {
            return Point(71.0, 185.0);
        }
        else if (auto8D8F1F76_val == 11) {
            return Point(245.0, 223.0);
        }
        else {
            return Point(245.0, 223.0);
        }
    }
    else {
        if ((UnitGroupCount(UnitGroup("EvolutionChamber", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            return UnitGetPosition(UnitGroupRandomUnit(UnitGroup("EvolutionChamber", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
        else {
            return Point(120,120);
        }
    }
    return Point(190.0, 108.0);
}

trigger auto_gf_DisintegratorSpawn_Trigger = null;

void gf_DisintegratorSpawn () {
    if (auto_gf_DisintegratorSpawn_Trigger == null) {
        auto_gf_DisintegratorSpawn_Trigger = TriggerCreate("auto_gf_DisintegratorSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisintegratorSpawn_Trigger, false, false);
}

bool auto_gf_DisintegratorSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((UnitIsAlive(gv_currentBoss) == true) && (gv_stage == 11)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Disintegrator", 0, 5, Point(242.0, 13.0));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Teleport", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 3.0))), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            gf_DisintegratorAttack(UnitLastCreated());
        }

        Wait(30.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_DisintegratorAttack_Trigger = null;
unit auto_gf_DisintegratorAttack_lp_unit;

void gf_DisintegratorAttack (unit lp_unit) {
    auto_gf_DisintegratorAttack_lp_unit = lp_unit;

    if (auto_gf_DisintegratorAttack_Trigger == null) {
        auto_gf_DisintegratorAttack_Trigger = TriggerCreate("auto_gf_DisintegratorAttack_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisintegratorAttack_Trigger, false, false);
}

bool auto_gf_DisintegratorAttack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_DisintegratorAttack_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    while ((gv_stage == 11) && (UnitIsAlive(lp_unit) == true) && (UnitIsAlive(gv_currentBoss) == true)) {
        UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_currentBoss)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("Teleport", 0), Point(242.0, 13.0)), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    Wait(1.0, c_timeGame);
    UnitKill(lp_unit);
    return true;
}

trigger auto_gf_ProtossAttackAI_Trigger = null;
unitgroup auto_gf_ProtossAttackAI_lp_unitsRecievingOrder;

void gf_ProtossAttackAI (unitgroup lp_unitsRecievingOrder) {
    auto_gf_ProtossAttackAI_lp_unitsRecievingOrder = lp_unitsRecievingOrder;

    if (auto_gf_ProtossAttackAI_Trigger == null) {
        auto_gf_ProtossAttackAI_Trigger = TriggerCreate("auto_gf_ProtossAttackAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ProtossAttackAI_Trigger, false, false);
}

bool auto_gf_ProtossAttackAI_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_unitsRecievingOrder = auto_gf_ProtossAttackAI_lp_unitsRecievingOrder;

    // Variable Declarations
    unitgroup lv_army;
    int lv_overide;
    unitgroup lv_enemystructures;
    point lv_target;
    unit lv_closestpylon;
    int lv_pathdistance;
    int lv_furthestunitpathdistance;
    unit lv_furthestunit;

    // Automatic Variable Declarations
    unitgroup autoF5EB2564_g;
    int autoF5EB2564_u;
    unit autoF5EB2564_var;
    unitgroup auto94B34099_g;
    int auto94B34099_u;
    unit auto94B34099_var;
    unitgroup auto347378CE_g;
    int auto347378CE_u;
    unit auto347378CE_var;
    unitgroup autoEF0F9C71_g;
    int autoEF0F9C71_u;
    unit autoEF0F9C71_var;
    unitgroup autoE2060081_g;
    int autoE2060081_u;
    unit autoE2060081_var;

    // Variable Initialization
    lv_army = UnitGroupCopy(lp_unitsRecievingOrder);
    lv_enemystructures = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_pathdistance = 10000;

    // Implementation
    if ((gv_stage == 11)) {
        lv_overide = RandomInt(0, 10);
    }

    while ((libNtve_gf_UnitGroupIsDead(lv_army) == false)) {
        if ((UnitHasBehavior2(UnitGroupUnit(lv_army, 1), "IncapacitatedDemolisher") == false)) {
            lv_enemystructures = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_pathdistance = 10000;
            lv_furthestunitpathdistance = 0;
            autoF5EB2564_g = lv_army;
            autoF5EB2564_u = UnitGroupCount(autoF5EB2564_g, c_unitCountAll);
            for (;; autoF5EB2564_u -= 1) {
                autoF5EB2564_var = UnitGroupUnitFromEnd(autoF5EB2564_g, autoF5EB2564_u);
                if (autoF5EB2564_var == null) { break; }
                if ((AIPathingCostMap(UnitGetPosition(gf_getpylonofstage()), UnitGetPosition(autoF5EB2564_var)) > lv_furthestunitpathdistance)) {
                    lv_furthestunitpathdistance = AIPathingCostMap(UnitGetPosition(gf_getpylonofstage()), UnitGetPosition(autoF5EB2564_var));
                    lv_furthestunit = autoF5EB2564_var;
                }

            }
            if ((UnitGroupCount(lv_enemystructures, c_unitCountAlive) > 0)) {
                auto94B34099_g = lv_enemystructures;
                auto94B34099_u = UnitGroupCount(auto94B34099_g, c_unitCountAll);
                for (;; auto94B34099_u -= 1) {
                    auto94B34099_var = UnitGroupUnitFromEnd(auto94B34099_g, auto94B34099_u);
                    if (auto94B34099_var == null) { break; }
                    if ((AIPathingCostMap(UnitGetPosition(auto94B34099_var), UnitGetPosition(lv_furthestunit)) < lv_pathdistance) && (AIPathingCostMap(UnitGetPosition(auto94B34099_var), UnitGetPosition(lv_furthestunit)) >= 0)) {
                        lv_pathdistance = AIPathingCostMap(UnitGetPosition(auto94B34099_var), UnitGetPosition(lv_furthestunit));
                        lv_target = UnitGetPosition(auto94B34099_var);
                    }

                }
            }
            else {
                if ((gv_stage == 11)) {
                    lv_target = Point(232.0, 223.0);
                }
                else {
                    lv_target = UnitGetPosition(gf_getpylonofstage());
                }
            }
            if ((gv_stage == 11) && (lv_overide >= 5)) {
                lv_target = Point(232.0, 223.0);
            }

            lv_pathdistance = 10000;
            auto347378CE_g = gf_GetPowerFields();
            auto347378CE_u = UnitGroupCount(auto347378CE_g, c_unitCountAll);
            for (;; auto347378CE_u -= 1) {
                auto347378CE_var = UnitGroupUnitFromEnd(auto347378CE_g, auto347378CE_u);
                if (auto347378CE_var == null) { break; }
                if ((AIPathingCostMap(UnitGetPosition(auto347378CE_var), lv_target) < lv_pathdistance) && (AIPathingCostMap(UnitGetPosition(auto347378CE_var), lv_target) >= 0)) {
                    lv_pathdistance = AIPathingCostMap(UnitGetPosition(auto347378CE_var), lv_target);
                    lv_closestpylon = auto347378CE_var;
                }

            }
            if ((AIPathingCostMap(UnitGetPosition(lv_closestpylon), lv_target) < 0)) {
                lv_closestpylon = gf_getpylonofstage();
            }

            autoEF0F9C71_g = lv_army;
            autoEF0F9C71_u = UnitGroupCount(autoEF0F9C71_g, c_unitCountAll);
            for (;; autoEF0F9C71_u -= 1) {
                autoEF0F9C71_var = UnitGroupUnitFromEnd(autoEF0F9C71_g, autoEF0F9C71_u);
                if (autoEF0F9C71_var == null) { break; }
                if (((AIPathingCostMap(UnitGetPosition(autoEF0F9C71_var), lv_target) < 0) || (AIPathingCostMap(UnitGetPosition(autoEF0F9C71_var), lv_target) > FixedToInt((AIPathingCostMap(UnitGetPosition(lv_closestpylon), lv_target) + 5.0))))) {
                    UnitIssueOrder(autoEF0F9C71_var, OrderTargetingPoint(AbilityCommand("Teleport", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_closestpylon), 3.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeGame);
                }

            }
            Wait(0.75, c_timeGame);
            autoE2060081_g = lv_army;
            autoE2060081_u = UnitGroupCount(autoE2060081_g, c_unitCountAll);
            for (;; autoE2060081_u -= 1) {
                autoE2060081_var = UnitGroupUnitFromEnd(autoE2060081_g, autoE2060081_u);
                if (autoE2060081_var == null) { break; }
                UnitIssueOrder(autoE2060081_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
            }
            Wait(3.0, c_timeGame);
        }
        else {
            Wait(2.0, c_timeGame);
        }
    }
    return true;
}

unitgroup gf_GetPowerFields () {
    // Variable Declarations
    unitgroup lv_grp;

    // Automatic Variable Declarations
    unitgroup auto2BC6B485_g;
    int auto2BC6B485_u;
    unit auto2BC6B485_var;
    unitgroup auto4098C7AC_g;
    int auto4098C7AC_u;
    unit auto4098C7AC_var;

    // Variable Initialization
    lv_grp = UnitGroupEmpty();

    // Implementation
    auto2BC6B485_g = UnitGroup("Pylon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto2BC6B485_u = UnitGroupCount(auto2BC6B485_g, c_unitCountAll);
    for (;; auto2BC6B485_u -= 1) {
        auto2BC6B485_var = UnitGroupUnitFromEnd(auto2BC6B485_g, auto2BC6B485_u);
        if (auto2BC6B485_var == null) { break; }
        UnitGroupAdd(lv_grp, auto2BC6B485_var);
    }
    auto4098C7AC_g = UnitGroup("PowerFieldPylon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4098C7AC_u = UnitGroupCount(auto4098C7AC_g, c_unitCountAll);
    for (;; auto4098C7AC_u -= 1) {
        auto4098C7AC_var = UnitGroupUnitFromEnd(auto4098C7AC_g, auto4098C7AC_u);
        if (auto4098C7AC_var == null) { break; }
        UnitGroupAdd(lv_grp, auto4098C7AC_var);
    }
    return lv_grp;
}

void gf_banknewtime () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            if ((gv_mode == 1)) {
                TextTagCreate((StringExternal("Param/Value/1697207E") + StringExternal("Param/Value/810E6A64")), 65, PointWithOffset(CameraGetTarget(lv_i), 0.0, 4.0), 1.0, true, false, PlayerGroupSingle(lv_i));
            }
            else {
                TextTagCreate((StringExternal("Param/Value/E90CBAD2") + IntToText(gv_stage)), 65, PointWithOffset(CameraGetTarget(lv_i), 0.0, 4.0), 1.0, true, false, PlayerGroupSingle(lv_i));
            }
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
            TextTagCreate((StringExternal("Param/Value/C171D3A4") + gf_gametime(gv_zgametime[3]) + StringExternal("Param/Value/57B9A9E2")), 65, PointWithOffset(CameraGetTarget(lv_i), 0.0, 2.0), 1.0, true, false, PlayerGroupSingle(lv_i));
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 5.0);
        }

    }
}

void gf_winachievementcheck () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_k;
    fixed lv_m;
    int lv_d;
    bool lv_allsame;
    bool lv_alldifferent;
    int lv_killsum;
    int lv_heroesplayed;

    // Automatic Variable Declarations
    string autoC79705A0_val;

    // Variable Initialization
    lv_d = FixedToInt(gv_difficulty);
    lv_allsame = true;
    lv_alldifferent = true;

    // Implementation
    if ((gv_zspeedstage == true)) {
        gf_achievements0killaward(21);
    }

    if ((TechTreeUpgradeCount(6, "thorquestrewardmutagen", c_techCountQueuedOrBetter) == 0)) {
        gf_achievements0killaward(25);
    }

    if ((gv_upgradesAvailable == 110)) {
        gf_achievements0killaward(26);
    }

    if ((PlayerStatus(1) == c_playerStatusActive) && (PlayerStatus(2) == c_playerStatusActive) && (PlayerStatus(3) == c_playerStatusActive) && (PlayerStatus(4) == c_playerStatusActive)) {
        while ((lv_i < 4)) {
            lv_j = 0;
            lv_i += 1;
            while ((lv_j < 4)) {
                lv_j += 1;
                if ((UnitGetType(gv_hero[lv_i-1]) == UnitGetType(gv_hero[lv_j-1]))) {
                    if ((lv_i != lv_j)) {
                        lv_alldifferent = false;
                    }

                }
                else {
                    lv_allsame = false;
                }
            }
        }
    }
    else {
        lv_allsame = false;
        lv_alldifferent = false;
    }
    if ((lv_alldifferent == true)) {
        gf_achievements0killaward(32);
    }

    if ((lv_allsame == true)) {
        gf_achievements0killaward(31);
    }

    lv_j = 0;
    lv_i = MinI(gv_zstageslostinmax, 7);
    lv_i -= 2;
    while ((lv_j < 4)) {
        lv_j += 1;
        if ((PlayerStatus(lv_j) == c_playerStatusActive)) {
            while ((gf_achievementgetlevel(lv_j, 33) < lv_i)) {
                gf_achievementnew(lv_j, 33);
            }
        }

    }
    gf_achievementlowlevel(27);
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            lv_d = (gf_bankgetint(gv_zbanks[lv_i], "1", "completeruns") + gf_bankgetint(gv_zbanks[lv_i], "2", "completeruns") + gf_bankgetint(gv_zbanks[lv_i], "3", "completeruns") + gf_bankgetint(gv_zbanks[lv_i], "4", "completeruns") + gf_bankgetint(gv_zbanks[lv_i], "5", "completeruns"));
            while ((gf_achievementgetvalueofnextlevel(39, lv_i) <= lv_d)) {
                gf_achievementnew(lv_i, 39);
            }
            if ((UnitHasBehavior(gv_hero[lv_i-1], "Cooperative") == true)) {
                while ((gf_achievementgetlevel(lv_i, 59) < FixedToInt(gv_difficulty))) {
                    gf_achievementnew(lv_i, 59);
                }
            }

        }

    }
    lv_i = 0;
    while ((lv_i < 4)) {
        if ((gv_hero[lv_i] != null)) {
            lv_killsum = (lv_killsum + libNtve_gf_UnitGetPropertyKills(gv_hero[lv_i], c_unitPropCurrent));
        }

        lv_i += 1;
    }
    gf_achievementPossiblyGainedTeamLessThan(66, lv_killsum);
    lv_i = 0;
    while ((lv_i < 4) && (gv_difficulty > 2.0)) {
        lv_i += 1;
        lv_j = 0;
        lv_k = 0;
        lv_heroesplayed = 0;
        lv_heroesplayed = gf_bankgetint(gv_zbanks[lv_i], "e", "acm");
        if ((PlayerStatus(lv_i) == c_playerStatusActive) && (gv_hero[lv_i-1] != null)) {
            autoC79705A0_val = UnitGetType(gv_hero[lv_i-1]);
            if (autoC79705A0_val == "FireHero") {
                lv_heroesplayed |= 1<<0;
            }
            else if (autoC79705A0_val == "LightningHero") {
                lv_heroesplayed |= 1<<1;
            }
            else if (autoC79705A0_val == "PoisonHero") {
                lv_heroesplayed |= 1<<2;
            }
            else if (autoC79705A0_val == "ShadowHero") {
                lv_heroesplayed |= 1<<3;
            }
            else if (autoC79705A0_val == "WarpHero") {
                lv_heroesplayed |= 1<<4;
            }
            else if (autoC79705A0_val == "ParticleHero") {
                lv_heroesplayed |= 1<<5;
            }
            else if (autoC79705A0_val == "TwilightHero") {
                lv_heroesplayed |= 1<<6;
            }
            else if (autoC79705A0_val == "TimeHero") {
                lv_heroesplayed |= 1<<7;
            }
            else if (autoC79705A0_val == "WaterHero") {
                lv_heroesplayed |= 1<<8;
            }
            else if (autoC79705A0_val == "EarthHero") {
                lv_heroesplayed |= 1<<9;
            }
            else if (autoC79705A0_val == "Phoenix") {
                lv_heroesplayed |= 1<<10;
            }
            else if (autoC79705A0_val == "AlarakChampion") {
                lv_heroesplayed |= 1<<11;
            }
            else if (autoC79705A0_val == "ArtanisVoid") {
                lv_heroesplayed |= 1<<12;
            }
            else if (autoC79705A0_val == "NatureHero") {
                lv_heroesplayed |= 1<<13;
            }
            else if (autoC79705A0_val == "ElementalHero") {
                lv_heroesplayed |= 1<<14;
            }
            else if (autoC79705A0_val == "IllusionHero") {
                lv_heroesplayed |= 1<<15;
            }
            else if (autoC79705A0_val == "LuckHero") {
                lv_heroesplayed |= 1<<16;
            }
            else if (autoC79705A0_val == "ProbeHero") {
                lv_heroesplayed |= 1<<17;
            }
            else if (autoC79705A0_val == "BladeHero") {
                lv_heroesplayed |= 1<<18;
            }
            else if (autoC79705A0_val == "BeamHero") {
                lv_heroesplayed |= 1<<19;
            }
            else {
            }
        }

        while ((lv_j < 20)) {
            if (lv_heroesplayed & 1<<lv_j)
            {
                lv_k+=1;
            }
            lv_j += 1;
        }
        BankValueSetFromInt(gv_zbanks[lv_i], "acm", "e", lv_heroesplayed);
        BankSave(gv_zbanks[lv_i]);
        gf_achievementPossiblyGainedSolo(67, lv_k, lv_i);
    }
}

void gf_stage11finalcheckfortimeachievements () {
    // Variable Declarations
    int lv_i;
    fixed lv_k;
    int lv_d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_k = 5.0;
    lv_d = FixedToInt(gv_difficulty);

    // Implementation
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            lv_k = 5.0;
            while ((gf_achievementgetlevel(lv_i, lv_d) < 5) && (gf_achievementgetvalueofnextlevel(lv_d, lv_i) >= gv_zgametime[3])) {
                gf_achievementnew(lv_i, lv_d);
                lv_k -= 1.0;
            }
        }

    }
}

trigger auto_gf_stagetimer_Trigger = null;
fixed auto_gf_stagetimer_lp_time;

void gf_stagetimer (fixed lp_time) {
    auto_gf_stagetimer_lp_time = lp_time;

    if (auto_gf_stagetimer_Trigger == null) {
        auto_gf_stagetimer_Trigger = TriggerCreate("auto_gf_stagetimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_stagetimer_Trigger, false, false);
}

bool auto_gf_stagetimer_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_stagetimer_lp_time;

    // Variable Declarations
    timer lv_timer;
    int lv_tw;
    int lv_lstage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();
    lv_tw = c_timerWindowNone;
    lv_lstage = gv_stage;

    // Implementation
    TimerStart(lv_timer, lp_time, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/979A4942"), true, false);
    lv_tw = TimerWindowLastCreated();
    while (!(((TimerGetRemaining(lv_timer) <= 1.0) || (lv_lstage != gv_stage)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(lv_tw);
    return true;
}

text gf_gametime (int lp_seconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_seconds < 60)) {
        return (IntToText(lp_seconds) + StringExternal("Param/Value/5B34F59D"));
    }

    if ((lp_seconds < 3600)) {
        if (((lp_seconds%60 + 0.0) < 10.0)) {
            return (IntToText((lp_seconds)/60) + StringExternal("Param/Value/A3473929") + IntToText(lp_seconds%60) + StringExternal("Param/Value/C1CB9787"));
        }
        else {
            return (IntToText((lp_seconds)/60) + StringExternal("Param/Value/20855923") + IntToText(lp_seconds%60) + StringExternal("Param/Value/E5A59C8A"));
        }
    }

    return (IntToText(lp_seconds/3600) + StringExternal("Param/Value/D8532154") + IntToText((lp_seconds%3600)/60) + StringExternal("Param/Value/43AD4D80") + IntToText(lp_seconds%60) + StringExternal("Param/Value/6E618220"));
}

text gf_difficultytotext () {
    // Automatic Variable Declarations
    fixed autoECF71401_val;

    // Implementation
    autoECF71401_val = gv_difficulty;
    if (autoECF71401_val == 1.0) {
        return StringExternal("Param/Value/414F1956");
    }
    else if (autoECF71401_val == 2.0) {
        return StringExternal("Param/Value/3C04C5FC");
    }
    else if (autoECF71401_val == 3.0) {
        return StringExternal("Param/Value/55307AEE");
    }
    else if (autoECF71401_val == 4.0) {
        return StringExternal("Param/Value/11B146D7");
    }
    else if (autoECF71401_val == 5.0) {
        return StringExternal("Param/Value/C3D76DFC");
    }
    else {
        return StringExternal("Param/Value/AD02265C");
    }
}

text gf_difficultytotex2 (int lp_diff) {
    // Automatic Variable Declarations
    int auto95CD6A83_val;

    // Implementation
    auto95CD6A83_val = lp_diff;
    if (auto95CD6A83_val == 1) {
        return StringExternal("Param/Value/D4E50490");
    }
    else if (auto95CD6A83_val == 2) {
        return StringExternal("Param/Value/1C3C8814");
    }
    else if (auto95CD6A83_val == 3) {
        return StringExternal("Param/Value/D00886ED");
    }
    else if (auto95CD6A83_val == 4) {
        return StringExternal("Param/Value/D5E3393F");
    }
    else if (auto95CD6A83_val == 5) {
        return StringExternal("Param/Value/14844ED4");
    }
    else {
        return StringExternal("Param/Value/ADCCFA40");
    }
}

trigger auto_gf_zergbase1_Trigger = null;
unit auto_gf_zergbase1_lp_basebuilding;
point auto_gf_zergbase1_lp_attackpoint;

void gf_zergbase1 (unit lp_basebuilding, point lp_attackpoint) {
    auto_gf_zergbase1_lp_basebuilding = lp_basebuilding;
    auto_gf_zergbase1_lp_attackpoint = lp_attackpoint;

    if (auto_gf_zergbase1_Trigger == null) {
        auto_gf_zergbase1_Trigger = TriggerCreate("auto_gf_zergbase1_TriggerFunc");
    }

    TriggerExecute(auto_gf_zergbase1_Trigger, false, false);
}

bool auto_gf_zergbase1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_basebuilding = auto_gf_zergbase1_lp_basebuilding;
    point lp_attackpoint = auto_gf_zergbase1_lp_attackpoint;

    // Variable Declarations
    int lv_i;
    unit lv_base;
    unitgroup lv_army;
    unitgroup lv_larva;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_base = lp_basebuilding;
    lv_army = UnitGroupEmpty();
    lv_larva = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(lv_base) == true)) {
        lv_larva = UnitGroup("Larva", 6, RegionCircle(UnitGetPosition(lv_base), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_i = 0;
        if ((gv_champion == 1)) {
            while ((gv_champion == 1) && (lv_i < UnitGroupCount(lv_larva, c_unitCountAll))) {
                lv_i += 1;
                UnitIssueOrder(UnitGroupUnit(lv_larva, lv_i), Order(AbilityCommand("LarvaTrainSwarmling", 0)), c_orderQueueReplace);
            }
        }
        else {
            while ((lv_i < UnitGroupCount(lv_larva, c_unitCountAll))) {
                lv_i += 1;
                UnitIssueOrder(UnitGroupUnit(lv_larva, lv_i), Order(AbilityCommand("LarvaTrain", 1)), c_orderQueueReplace);
            }
        }
        if ((gv_champion == 1)) {
            lv_army = UnitGroup("HotSSwarmling", 6, RegionCircle(UnitGetPosition(lv_base), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            lv_army = UnitGroup("Zergling", 6, RegionCircle(UnitGetPosition(lv_base), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        if ((UnitGroupCount(lv_army, c_unitCountAll) >= 8)) {
            UnitGroupIssueOrder(lv_army, OrderTargetingPoint(AbilityCommand("attack", 0), lp_attackpoint), c_orderQueueAddToEnd);
        }

        Wait(3.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_tossbase1_Trigger = null;
unit auto_gf_tossbase1_lp_basebuilding;
unit auto_gf_tossbase1_lp_basebuilding2;
point auto_gf_tossbase1_lp_attackpoint;
unit auto_gf_tossbase1_lp_probe;

void gf_tossbase1 (unit lp_basebuilding, unit lp_basebuilding2, point lp_attackpoint, unit lp_probe) {
    auto_gf_tossbase1_lp_basebuilding = lp_basebuilding;
    auto_gf_tossbase1_lp_basebuilding2 = lp_basebuilding2;
    auto_gf_tossbase1_lp_attackpoint = lp_attackpoint;
    auto_gf_tossbase1_lp_probe = lp_probe;

    if (auto_gf_tossbase1_Trigger == null) {
        auto_gf_tossbase1_Trigger = TriggerCreate("auto_gf_tossbase1_TriggerFunc");
    }

    TriggerExecute(auto_gf_tossbase1_Trigger, false, false);
}

bool auto_gf_tossbase1_TriggerFunc (bool testConds, bool runActions) {
    unit lp_basebuilding = auto_gf_tossbase1_lp_basebuilding;
    unit lp_basebuilding2 = auto_gf_tossbase1_lp_basebuilding2;
    point lp_attackpoint = auto_gf_tossbase1_lp_attackpoint;
    unit lp_probe = auto_gf_tossbase1_lp_probe;

    // Variable Declarations
    int lv_j;
    unit lv_base;
    unit lv_base2;
    unitgroup lv_army;
    unitgroup lv_larva;
    unit lv_probe;
    unitgroup lv_cannons;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_base = lp_basebuilding;
    lv_base2 = lp_basebuilding2;
    lv_army = UnitGroupEmpty();
    lv_larva = UnitGroupEmpty();
    lv_probe = lp_probe;
    lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(240.0, 10.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    Wait(5.0, c_timeGame);
    lv_cannons = UnitGroup("PhotonCannon", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
        UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "Newbprotection", lp_basebuilding, 1);
        UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
    }
    while ((UnitGroupCount(UnitGroup("Hatchery", 6, RegionCircle(Point(240.0, 57.0), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && ((UnitIsAlive(lv_base) == true) || (UnitIsAlive(lv_base2) == true))) {
        if ((UnitIsAlive(lv_base) == true) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_base, 5, 1) == null)) {
            UnitIssueOrder(lv_base, Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueAddToEnd);
        }

        if ((UnitIsAlive(lv_base2) == true) && (libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(lv_base2, 5, 1) == null)) {
            UnitIssueOrder(lv_base2, Order(AbilityCommand("GatewayTrain", 0)), c_orderQueueAddToEnd);
        }

        lv_army = UnitGroup("Zealot", UnitGetOwner(lv_base), RegionCircle(UnitGetPosition(lv_base), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((lv_j == 0)) {
            UnitGroupIssueOrder(lv_army, OrderTargetingPoint(AbilityCommand("attack", 0), lp_attackpoint), c_orderQueueAddToEnd);
            lv_j = (lv_j+1)%2;
        }
        else {
            UnitGroupIssueOrder(lv_army, OrderTargetingPoint(AbilityCommand("attack", 0), lp_attackpoint), c_orderQueueAddToEnd);
            lv_j = (lv_j+1)%2;
        }
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_ReplaceUnit(lv_base, "WarpGate", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_gateway1 = libNtve_gf_LastReplacedUnit();
    UnitBehaviorAdd(gv_gateway1, "ArdentDefender", gv_gateway1, 1);
    libNtve_gf_MakeUnitInvulnerable(gv_gateway1, true);
    libNtve_gf_ReplaceUnit(lv_base2, "WarpGate", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
    gv_gateway2 = libNtve_gf_LastReplacedUnit();
    libNtve_gf_MakeUnitInvulnerable(gv_gateway2, true);
    UnitBehaviorAdd(gv_gateway2, "ArdentDefender", gv_gateway2, 1);
    gv_stage += 1;
    TriggerExecute(gt_activatebase2, true, false);
    return true;
}

void gf__2pathbase (unit lp_zbase1, unit lp_zbase2, point lp_protossspawnpoint, point lp_waypoint11, point lp_waypoint12, unit lp_pbase1, unit lp_pbase2, order lp_zattackertype1, order lp_zattackertype2, order lp_zattackertype3, order lp_zattackertype4, order lp_zattackertype5, int lp_zarmysize, int lp_parmysize, bool lp_isQuest) {
    // Variable Declarations
    unitgroup lv_zarmy;
    unitgroup lv_larva;
    int lv_ztype;
    order[11] lv_zattackers;
    int lv_i;
    bool lv_path;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_zarmy = UnitGroupEmpty();
    lv_larva = UnitGroupEmpty();

    // Implementation
    gf__2pathbaseQ(lp_zbase1, lp_zbase2, lp_protossspawnpoint, lp_waypoint11, lp_waypoint12, lp_pbase1, lp_pbase2, lp_zattackertype1, lp_zattackertype2, lp_zattackertype3, lp_zattackertype4, lp_zattackertype5, lp_zarmysize, lp_parmysize, 0, lp_isQuest);
}

trigger auto_gf__2pathbaseQ_Trigger = null;
unit auto_gf__2pathbaseQ_lp_zbase1;
unit auto_gf__2pathbaseQ_lp_zbase2;
point auto_gf__2pathbaseQ_lp_protossspawnpoint;
point auto_gf__2pathbaseQ_lp_waypoint11;
point auto_gf__2pathbaseQ_lp_waypoint12;
unit auto_gf__2pathbaseQ_lp_pbase1;
unit auto_gf__2pathbaseQ_lp_pbase2;
order auto_gf__2pathbaseQ_lp_zattackertype1;
order auto_gf__2pathbaseQ_lp_zattackertype2;
order auto_gf__2pathbaseQ_lp_zattackertype3;
order auto_gf__2pathbaseQ_lp_zattackertype4;
order auto_gf__2pathbaseQ_lp_zattackertype5;
int auto_gf__2pathbaseQ_lp_zarmysize;
int auto_gf__2pathbaseQ_lp_parmysize;
int auto_gf__2pathbaseQ_lp_queenDelay;
bool auto_gf__2pathbaseQ_lp_isQuest;

void gf__2pathbaseQ (unit lp_zbase1, unit lp_zbase2, point lp_protossspawnpoint, point lp_waypoint11, point lp_waypoint12, unit lp_pbase1, unit lp_pbase2, order lp_zattackertype1, order lp_zattackertype2, order lp_zattackertype3, order lp_zattackertype4, order lp_zattackertype5, int lp_zarmysize, int lp_parmysize, int lp_queenDelay, bool lp_isQuest) {
    auto_gf__2pathbaseQ_lp_zbase1 = lp_zbase1;
    auto_gf__2pathbaseQ_lp_zbase2 = lp_zbase2;
    auto_gf__2pathbaseQ_lp_protossspawnpoint = lp_protossspawnpoint;
    auto_gf__2pathbaseQ_lp_waypoint11 = lp_waypoint11;
    auto_gf__2pathbaseQ_lp_waypoint12 = lp_waypoint12;
    auto_gf__2pathbaseQ_lp_pbase1 = lp_pbase1;
    auto_gf__2pathbaseQ_lp_pbase2 = lp_pbase2;
    auto_gf__2pathbaseQ_lp_zattackertype1 = lp_zattackertype1;
    auto_gf__2pathbaseQ_lp_zattackertype2 = lp_zattackertype2;
    auto_gf__2pathbaseQ_lp_zattackertype3 = lp_zattackertype3;
    auto_gf__2pathbaseQ_lp_zattackertype4 = lp_zattackertype4;
    auto_gf__2pathbaseQ_lp_zattackertype5 = lp_zattackertype5;
    auto_gf__2pathbaseQ_lp_zarmysize = lp_zarmysize;
    auto_gf__2pathbaseQ_lp_parmysize = lp_parmysize;
    auto_gf__2pathbaseQ_lp_queenDelay = lp_queenDelay;
    auto_gf__2pathbaseQ_lp_isQuest = lp_isQuest;

    if (auto_gf__2pathbaseQ_Trigger == null) {
        auto_gf__2pathbaseQ_Trigger = TriggerCreate("auto_gf__2pathbaseQ_TriggerFunc");
    }

    TriggerExecute(auto_gf__2pathbaseQ_Trigger, false, false);
}

bool auto_gf__2pathbaseQ_TriggerFunc (bool testConds, bool runActions) {
    unit lp_zbase1 = auto_gf__2pathbaseQ_lp_zbase1;
    unit lp_zbase2 = auto_gf__2pathbaseQ_lp_zbase2;
    point lp_protossspawnpoint = auto_gf__2pathbaseQ_lp_protossspawnpoint;
    point lp_waypoint11 = auto_gf__2pathbaseQ_lp_waypoint11;
    point lp_waypoint12 = auto_gf__2pathbaseQ_lp_waypoint12;
    unit lp_pbase1 = auto_gf__2pathbaseQ_lp_pbase1;
    unit lp_pbase2 = auto_gf__2pathbaseQ_lp_pbase2;
    order lp_zattackertype1 = auto_gf__2pathbaseQ_lp_zattackertype1;
    order lp_zattackertype2 = auto_gf__2pathbaseQ_lp_zattackertype2;
    order lp_zattackertype3 = auto_gf__2pathbaseQ_lp_zattackertype3;
    order lp_zattackertype4 = auto_gf__2pathbaseQ_lp_zattackertype4;
    order lp_zattackertype5 = auto_gf__2pathbaseQ_lp_zattackertype5;
    int lp_zarmysize = auto_gf__2pathbaseQ_lp_zarmysize;
    int lp_parmysize = auto_gf__2pathbaseQ_lp_parmysize;
    int lp_queenDelay = auto_gf__2pathbaseQ_lp_queenDelay;
    bool lp_isQuest = auto_gf__2pathbaseQ_lp_isQuest;

    // Variable Declarations
    int lv_b;
    int lv_initstage;
    int lv_ppathtimer;
    bool lv_ppath;
    unitgroup lv_troopsontheirway;
    int lv_objective;
    unitgroup lv_zarmy;
    unitgroup lv_larva;
    int lv_ztype;
    int lv_qd;
    order[11] lv_zattackers;
    int lv_i;
    bool lv_path;
    int lv_ping1;
    int lv_ping2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_b = 1;
    lv_initstage = gv_stage;
    lv_ppathtimer = 25;
    lv_troopsontheirway = UnitGroupEmpty();
    lv_objective = c_invalidObjectiveId;
    lv_zarmy = UnitGroupEmpty();
    lv_larva = UnitGroupEmpty();
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;

    // Implementation
    if (((UnitGroupHasUnit(gv_zbuildinghasquest, lp_zbase1) == true) || (UnitGroupHasUnit(gv_zbuildinghasquest, lp_zbase2) == true))) {
        return true;
    }
    else {
        UnitGroupAdd(gv_zbuildinghasquest, lp_zbase1);
        UnitGroupAdd(gv_zbuildinghasquest, lp_zbase2);
    }
    if ((lp_isQuest == true)) {
        ObjectiveCreate((StringExternal("Param/Value/1261DFA2") + UnitTypeGetName(UnitGetType(lp_zbase1)) + StringExternal("Param/Value/97D48408")), StringExternal("Param/Value/4BEB782F"), c_objectiveStateActive, true);
        lv_objective = ObjectiveLastCreated();
        if ((lp_zbase1 != null)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(50.20, 50.20, 0.00, 0.00), 9000.0, 270.0);
            PingSetUnit(PingLastCreated(), lp_zbase1);
            lv_ping1 = PingLastCreated();
        }

        if ((lp_zbase2 != null) && (lp_zbase2 != lp_zbase1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(50.20, 50.20, 0.00, 0.00), 9000.0, 270.0);
            PingSetUnit(PingLastCreated(), lp_zbase2);
            lv_ping2 = PingLastCreated();
        }

    }
    else {
        ObjectiveCreate((StringExternal("Param/Value/65EDE840") + UnitTypeGetName(UnitGetType(lp_zbase1))), StringExternal("Param/Value/E1B9ED0F"), c_objectiveStateActive, false);
        lv_objective = ObjectiveLastCreated();
        if ((lp_zbase1 != null)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
            PingSetUnit(PingLastCreated(), lp_zbase1);
            lv_ping1 = PingLastCreated();
        }

        if ((lp_zbase2 != null) && (lp_zbase2 != lp_zbase1)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
            PingSetUnit(PingLastCreated(), lp_zbase2);
            lv_ping2 = PingLastCreated();
        }

    }
    lv_zattackers[0] = lp_zattackertype1;
    lv_zattackers[1] = lp_zattackertype2;
    lv_zattackers[2] = lp_zattackertype3;
    lv_zattackers[3] = lp_zattackertype4;
    lv_zattackers[4] = lp_zattackertype5;
    while (((UnitIsAlive(lp_zbase1) == true) || (UnitIsAlive(lp_zbase2) == true))) {
        if ((((gv_difficulty > 2.0) && (lv_initstage <= (gv_stage - 1))) || (lv_initstage <= gv_stage))) {
            if ((lp_queenDelay > 0)) {
                lv_qd += 1;
                if ((lv_qd > lp_queenDelay)) {
                    lv_qd = 0;
                    UnitCreate(1, "Queen", c_unitCreateIgnorePlacement, 6, UnitGetPosition(lp_zbase1), 270.0);
                    gf_Queen(UnitLastCreated(), 2, 4, 2.5, 2.0);
                }

            }

            lv_larva = UnitGroup("Larva", 6, RegionCircle(UnitGetPosition(lp_zbase1), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_i = 0;
            while ((lv_i < UnitGroupCount(lv_larva, c_unitCountAll))) {
                lv_i += 1;
                UnitIssueOrder(UnitGroupUnit(lv_larva, lv_i), lv_zattackers[lv_ztype], c_orderQueueReplace);
                lv_ztype += 1;
                if ((lv_zattackers[lv_ztype] == null)) {
                    lv_ztype = 0;
                }

            }
            lv_zarmy = UnitGroup(null, 6, RegionCircle(UnitGetPosition(lp_zbase1), 14.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_larva = UnitGroup("Egg", 6, RegionCircle(UnitGetPosition(lp_zbase1), 14.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_troopsontheirway, lv_zarmy);
            libNtve_gf_RemoveUnitGroupFromUnitGroup(lv_larva, lv_zarmy);
            if ((UnitGroupCount(lv_zarmy, c_unitCountAll) >= lp_zarmysize)) {
                libNtve_gf_AddUnitGroupToUnitGroup(lv_zarmy, lv_troopsontheirway);
                if (((lp_waypoint12 == null) || (lv_path == true))) {
                    UnitGroupIssueOrder(lv_zarmy, OrderTargetingPoint(AbilityCommand("attack", 0), lp_waypoint11), c_orderQueueAddToEnd);
                    UnitGroupIssueOrder(lv_zarmy, OrderTargetingPoint(AbilityCommand("attack", 0), lp_protossspawnpoint), c_orderQueueAddToEnd);
                    lv_path = false;
                }
                else {
                    UnitGroupIssueOrder(lv_zarmy, OrderTargetingPoint(AbilityCommand("attack", 0), lp_waypoint12), c_orderQueueAddToEnd);
                    UnitGroupIssueOrder(lv_zarmy, OrderTargetingPoint(AbilityCommand("attack", 0), lp_protossspawnpoint), c_orderQueueAddToEnd);
                    lv_path = true;
                }
            }
            else {
                UnitGroupIssueOrder(lv_zarmy, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_zbase1), 3.0, lp_waypoint11)), c_orderQueueAddToEnd);
            }
            if ((lp_parmysize > 0)) {
                if ((UnitGroupCount(gv_alliedUnitsOnMap, c_unitCountAlive) <= (24 + (gv_stage * 3)))) {
                    UnitIssueOrder(lp_pbase1, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), lp_protossspawnpoint), c_orderQueueReplace);
                    UnitIssueOrder(lp_pbase2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), lp_protossspawnpoint), c_orderQueueReplace);
                    UnitIssueOrder(lp_pbase1, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 1), lp_protossspawnpoint), c_orderQueueReplace);
                    UnitIssueOrder(lp_pbase2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 6), lp_protossspawnpoint), c_orderQueueReplace);
                }

            }

        }

        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping1);
    PingDestroy(lv_ping2);
    if ((lv_objective != c_invalidObjectiveId)) {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        Wait(5.0, c_timeGame);
        ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    }

    return true;
}

trigger auto_gf_Spire_Trigger = null;
point auto_gf_Spire_lp_loc1;
point auto_gf_Spire_lp_loc2;
fixed auto_gf_Spire_lp_angle1;
fixed auto_gf_Spire_lp_angle2;
fixed auto_gf_Spire_lp_maxangle1;
fixed auto_gf_Spire_lp_maxangle2;
fixed auto_gf_Spire_lp_firerate;
int auto_gf_Spire_lp_linkedtostage;

void gf_Spire (point lp_loc1, point lp_loc2, fixed lp_angle1, fixed lp_angle2, fixed lp_maxangle1, fixed lp_maxangle2, fixed lp_firerate, int lp_linkedtostage) {
    auto_gf_Spire_lp_loc1 = lp_loc1;
    auto_gf_Spire_lp_loc2 = lp_loc2;
    auto_gf_Spire_lp_angle1 = lp_angle1;
    auto_gf_Spire_lp_angle2 = lp_angle2;
    auto_gf_Spire_lp_maxangle1 = lp_maxangle1;
    auto_gf_Spire_lp_maxangle2 = lp_maxangle2;
    auto_gf_Spire_lp_firerate = lp_firerate;
    auto_gf_Spire_lp_linkedtostage = lp_linkedtostage;

    if (auto_gf_Spire_Trigger == null) {
        auto_gf_Spire_Trigger = TriggerCreate("auto_gf_Spire_TriggerFunc");
    }

    TriggerExecute(auto_gf_Spire_Trigger, false, false);
}

bool auto_gf_Spire_TriggerFunc (bool testConds, bool runActions) {
    point lp_loc1 = auto_gf_Spire_lp_loc1;
    point lp_loc2 = auto_gf_Spire_lp_loc2;
    fixed lp_angle1 = auto_gf_Spire_lp_angle1;
    fixed lp_angle2 = auto_gf_Spire_lp_angle2;
    fixed lp_maxangle1 = auto_gf_Spire_lp_maxangle1;
    fixed lp_maxangle2 = auto_gf_Spire_lp_maxangle2;
    fixed lp_firerate = auto_gf_Spire_lp_firerate;
    int lp_linkedtostage = auto_gf_Spire_lp_linkedtostage;

    // Variable Declarations
    int lv_quest;
    int lv_ping1;
    int lv_ping2;
    unit lv_z1;
    unit lv_z2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_quest = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;

    // Implementation
    ObjectiveCreate(StringExternal("Param/Value/BA92E143"), StringExternal("Param/Value/D8B46491"), c_objectiveStateActive, false);
    lv_quest = ObjectiveLastCreated();
    UnitCreate(1, "Spire", c_unitCreateIgnorePlacement, 6, lp_loc1, 270.0);
    lv_z1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_z1);
    lv_ping1 = PingLastCreated();
    UnitCreate(1, "Spire", c_unitCreateIgnorePlacement, 6, lp_loc2, 270.0);
    lv_z2 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_z2);
    lv_ping2 = PingLastCreated();
    UnitBehaviorAdd(lv_z2, "HardShell", lv_z2, 1);
    while ((UnitIsAlive(lv_z1) == true) && (UnitIsAlive(lv_z2) == true) && (gv_stage == lp_linkedtostage)) {
        gf_SpireFireball(6, lv_z1, PointWithOffsetPolar(lp_loc1, 4.0, lp_angle1+RandomFixed(0,lp_maxangle1)), lp_loc1, 8.0, 0.125, (20*gv_difficulty)+60);
        gf_SpireFireball(6, lv_z2, PointWithOffsetPolar(lp_loc2, 4.0, lp_angle2+RandomFixed(0,lp_maxangle2)), lp_loc2, 8.0, 0.125, (20*gv_difficulty)+60);
        Wait(lp_firerate, c_timeGame);
    }
    if ((UnitIsAlive(lv_z1) == true)) {
        UnitKill(lv_z1);
    }

    if ((UnitIsAlive(lv_z2) == true)) {
        UnitKill(lv_z2);
    }

    ObjectiveSetState(lv_quest, c_objectiveStateCompleted);
    PingDestroy(lv_ping1);
    PingDestroy(lv_ping2);
    gf_gainxp(500.0);
    Wait(5.0, c_timeGame);
    ObjectiveDestroy(lv_quest);
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: xpbarinit
//--------------------------------------------------------------------------------------------------
bool gt_xpbarinit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(433, 25, c_anchorBottom, 0, 250, true);
    gv_xpbardialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 433, 30, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_void_shared_progressbarframe.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 0, 15, c_anchorTopLeft, 16, 8, StringToText(""), "Assets\\Textures\\ui_void_shared_progressbarfill.dds", c_triggerImageTypeNormal, false, Color(28*100/255,167*100/255,234*100/255), c_triggerBlendModeNormal);
    gv_xpbaritem[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_xpbardialog, 400, 50, c_anchorTopLeft, 100, 6, StringExternal("Param/Value/D6BD272D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_xpbaritem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_xpbardialog, 60, 50, c_anchorTopLeft, 25, 6, StringExternal("Param/Value/EF7738FE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_xpbaritem[2] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_xpbarinit_Init () {
    gt_xpbarinit = TriggerCreate("gt_xpbarinit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XPbonusPeriodic
//--------------------------------------------------------------------------------------------------
bool gt_XPbonusPeriodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while(true)
    {
        if(gv_xPPeriodicBonus > 0)
        {
            gf_gainxp(gv_xPPeriodicBonus);
            gv_xPPeriodicBonusSum+=FixedToInt(gv_xPPeriodicBonus * gv_xpboost);
        }
        if(gv_difficulty > 2)
        {
            lv_i=0;
        
        
    while ((lv_i < 4)) {
        lv_i+=1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive) && (gf_achievementgetvalueofnextlevel(70, lv_i) <= gv_xPPeriodicBonusSum)) {
            gf_achievementnew(lv_i, 70);
        }

    }
    }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_XPbonusPeriodic_Init () {
    gt_XPbonusPeriodic = TriggerCreate("gt_XPbonusPeriodic_Func");
    TriggerAddEventTimeElapsed(gt_XPbonusPeriodic, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OptionalRampZbase2
//--------------------------------------------------------------------------------------------------
bool gt_OptionalRampZbase2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if (((gv_difficulty > 2.0) || (UnitGroupCount(UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) < 9))) {
        if ((gv_champion == 1)) {
            gf_SpawningBuilding(Point(201.0, 103.0), Point(201.0, 105.0), 2, 12, true, 250.0, "HydraliskDen", "HydraliskImpaler", StringExternal("Param/Value/A0876E98"), 1);
            gf_SpawningBuilding2(Point(172.0, 94.0), Point(172.0, 93.0), 2, 7, true, 250.0, "HydraliskDen", "HydraliskImpaler", StringExternal("Param/Value/9E1AD5CC"), 1, null, 0, null, true);
            gf_SpawningBuilding2(Point(226.0, 76.0), Point(226.0, 75.0), 1, 25, true, 250.0, "UltraliskCavern", "HotSNoxious", StringExternal("Param/Value/1D9C09A0"), 1, "HotSTorrasque", 1, StringExternal("Param/Value/E8627AF9"), true);
        }
        else {
            gf_SpawningBuilding(Point(201.0, 103.0), Point(201.0, 105.0), 2, 12, true, 250.0, "HydraliskDen", "Hydralisk", StringExternal("Param/Value/5A755C13"), 1);
            gf_SpawningBuilding2(Point(172.0, 94.0), Point(172.0, 93.0), 2, 7, true, 250.0, "HydraliskDen", "Hydralisk", StringExternal("Param/Value/15DCAA11"), 1, null, 0, null, true);
            gf_SpawningBuilding2(Point(226.0, 76.0), Point(226.0, 75.0), 1, 25, true, 250.0, "UltraliskCavern", "Ultralisk", StringExternal("Param/Value/AD19EB97"), 1, "Metalisk", 1, StringExternal("Param/Value/572E8F6E"), true);
        }
    }

    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(210.0, 103.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(207.0, 107.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(175.0, 88.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(221.0, 71.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(213.0, 80.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(205.0, 81.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(202.0, 72.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(193.0, 74.0), 90.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalRampZbase2_Init () {
    gt_OptionalRampZbase2 = TriggerCreate("gt_OptionalRampZbase2_Func");
    TriggerAddEventUnitRegion(gt_OptionalRampZbase2, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_OptionalRampZbase2, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_OptionalRampZbase2, null, RegionFromId(15), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SporeCrawler
//--------------------------------------------------------------------------------------------------
bool gt_SporeCrawler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((gv_zmaxstage > 2))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/75A18486"), StringExternal("Param/Value/50F414FA"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "SporeCrawler", 0, 6, Point(233.0, 139.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/6AF04DBB"), StringExternal("Param/Value/8B7D74CC"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true)) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    TechTreeUpgradeAddLevel(5, "Charge", 1);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2E673205"), StringExternal("Param/Value/8C6ECC51"), 0.0, c_transmissionDurationAdd, false);
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SporeCrawler_Init () {
    gt_SporeCrawler = TriggerCreate("gt_SporeCrawler_Func");
    TriggerAddEventUnitRegion(gt_SporeCrawler, null, RegionFromId(4), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Extrahatch
//--------------------------------------------------------------------------------------------------
bool gt_Extrahatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding2(Point(146.0, 124.0), Point(147.0, 124.0), 2, 12, true, 250.0, "RoachWarren", "RoachCorpser", null, 1, null, 0, null, false);
    }
    else {
        gf_SpawningBuilding2(Point(146.0, 124.0), Point(147.0, 124.0), 2, 12, true, 250.0, "RoachWarren", "Roach", null, 1, null, 0, null, false);
    }
    UnitCreate(1, "SpineCrawler", 0, 6, Point(159.0, 116.0), 90.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(158.0, 125.0), 90.0);
    UnitCreate(1, "SpineCrawler", 0, 6, Point(159.0, 110.0), 90.0);
    UnitCreate(1, "Hatchery", 0, 6, Point(154.0, 113.0), 90.0);
    lv_u1 = UnitLastCreated();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_u1, null, Point(245.0, 10.0), Point(233.0, 109.0), Point(186.0, 59.0), gv_gateway1, null, Order(AbilityCommand("LarvaTrainSwarmling", 0)), null, null, null, null, 12, 0, false);
    }
    else {
        gf__2pathbase(lv_u1, null, Point(245.0, 10.0), Point(233.0, 109.0), Point(186.0, 59.0), gv_gateway1, null, Order(AbilityCommand("LarvaTrain", 1)), null, null, null, null, 12, 0, false);
    }
    while ((UnitIsAlive(lv_u1) == true)) {
        Wait(1.0, c_timeGame);
    }
    gf_GainReward(1);
    gf_gainxp(250.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Extrahatch_Init () {
    gt_Extrahatch = TriggerCreate("gt_Extrahatch_Func");
    TriggerAddEventUnitRegion(gt_Extrahatch, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ExtraLair
//--------------------------------------------------------------------------------------------------
bool gt_ExtraLair_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "Lair", 0, 6, Point(224.0, 208.0), 90.0);
    lv_u1 = UnitLastCreated();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_u1, null, Point(245.0, 10.0), Point(233.0, 109.0), Point(186.0, 59.0), gv_gateway1, null, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), null, 16, 0, false);
    }
    else {
        gf__2pathbase(lv_u1, null, Point(245.0, 10.0), Point(233.0, 109.0), Point(186.0, 59.0), gv_gateway1, null, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), null, 16, 0, false);
    }
    while ((UnitIsAlive(lv_u1) == true)) {
        Wait(1.0, c_timeGame);
    }
    gf_GainReward(1);
    gf_gainxp(250.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExtraLair_Init () {
    gt_ExtraLair = TriggerCreate("gt_ExtraLair_Func");
    TriggerAddEventUnitRegion(gt_ExtraLair, null, RegionFromId(3), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: optionalGreaterSpire1
//--------------------------------------------------------------------------------------------------
bool gt_optionalGreaterSpire1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_u2;
    int lv_tw;
    timer lv_timer;
    int lv_quest;
    int lv_ping;
    int lv_counter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_timer = TimerCreate();
    lv_quest = c_invalidObjectiveId;
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/8FA3A92C"), StringExternal("Param/Value/EEBE97FF"), c_objectiveStateActive, false);
    lv_quest = ObjectiveLastCreated();
    TimerStart(lv_timer, 150.0+((4.0-gv_difficulty)*60.0), false, c_timeGame);
    TimerWindowCreate(lv_timer, StringExternal("Param/Value/65B41180"), true, false);
    lv_tw = TimerWindowLastCreated();
    UnitCreate(1, "GreaterSpire", c_unitCreateIgnorePlacement, 6, Point(95.0, 181.0), 270.0);
    UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
    gf_GreaterSpire2(0, UnitLastCreated(), 2.0, 2.5);
    lv_u = UnitLastCreated();
    UnitCreate(1, "EvolutionChamber", 0, 6, Point(101.0, 186.0), 270.0);
    lv_u2 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(94.12, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u2);
    lv_ping = PingLastCreated();
    while ((UnitIsAlive(lv_u2) == true) && (TimerGetRemaining(lv_timer) > 1.0)) {
        lv_counter += 1;
        Wait(1.0, c_timeGame);
    }
    UnitKill(lv_u);
    TimerWindowDestroy(lv_tw);
    PingDestroy(lv_ping);
    if ((UnitIsAlive(lv_u2) == true)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E694DD18"), StringExternal("Param/Value/4B51D0F4"), 0.0, c_transmissionDurationAdd, false);
        UnitBehaviorAdd(lv_u2, "TooLate", lv_u2, 1);
        TechTreeUpgradeAddLevel(6, "zerglingmovementspeed", 1);
        TechTreeUpgradeAddLevel(6, "zerglingattackspeed", 1);
        TechTreeUpgradeAddLevel(6, "CentrificalHooks", 1);
        ObjectiveSetState(lv_quest, c_objectiveStateFailed);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
    }
    else {
        gv_zevoquests += 1;
        if ((gv_zevoquests == 3)) {
            gf_achievements0killaward(18);
        }

        if ((lv_counter < 60)) {
            gf_evolutionspeedcomplete();
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0A9AC60A"), StringExternal("Param/Value/CA17D9F6"), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/4812422E"), StringExternal("Param/Value/ADE3C4B7"), 0.0, c_transmissionDurationAdd, false);
        }
        gf_gainxp(250.0);
        gf_GainReward(11);
        ObjectiveSetState(lv_quest, c_objectiveStateCompleted);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
        if ((gv_difficulty >= 3.0)) {
            Wait((6-gv_difficulty)*60, c_timeGame);
            TechTreeUpgradeAddLevel(6, "zerglingmovementspeed", 1);
            TechTreeUpgradeAddLevel(6, "zerglingattackspeed", 1);
            TechTreeUpgradeAddLevel(6, "CentrificalHooks", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_optionalGreaterSpire1_Init () {
    gt_optionalGreaterSpire1 = TriggerCreate("gt_optionalGreaterSpire1_Func");
    TriggerAddEventUnitRegion(gt_optionalGreaterSpire1, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_optionalGreaterSpire1, null, RegionFromId(31), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: evolutionquest2
//--------------------------------------------------------------------------------------------------
bool gt_evolutionquest2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_u2;
    int lv_tw;
    timer lv_timer;
    int lv_quest;
    int lv_ping;
    int lv_counter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_timer = TimerCreate();
    lv_quest = c_invalidObjectiveId;
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/BEC5AF5B"), StringExternal("Param/Value/CAD67AD1"), c_objectiveStateActive, false);
    lv_quest = ObjectiveLastCreated();
    TimerStart(lv_timer, 270.0+((4.0-gv_difficulty)*120.0), false, c_timeGame);
    TimerWindowCreate(lv_timer, StringExternal("Param/Value/E71A537B"), true, false);
    lv_tw = TimerWindowLastCreated();
    UnitCreate(1, "EvolutionChamber", 0, 6, Point(252.0, 196.0), 270.0);
    lv_u2 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(94.12, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u2);
    lv_ping = PingLastCreated();
    while ((UnitIsAlive(lv_u2) == true) && (TimerGetRemaining(lv_timer) > 1.0)) {
        lv_counter += 1;
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(lv_tw);
    PingDestroy(lv_ping);
    if ((UnitIsAlive(lv_u2) == true)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/4066DDBE"), StringExternal("Param/Value/E6547038"), 0.0, c_transmissionDurationAdd, false);
        UnitBehaviorAdd(lv_u2, "TooLate", lv_u2, 1);
        TechTreeUpgradeAddLevel(6, "hydraliskspeed", 1);
        TechTreeUpgradeAddLevel(6, "GlialReconstitution", 1);
        ObjectiveSetState(lv_quest, c_objectiveStateFailed);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
    }
    else {
        gv_zevoquests += 1;
        if ((gv_zevoquests == 3)) {
            gf_achievements0killaward(18);
        }

        if ((lv_counter < 60)) {
            gf_evolutionspeedcomplete();
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/57BF1601"), StringExternal("Param/Value/4A2A2ADE"), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/650D534A"), StringExternal("Param/Value/7020FE5F"), 0.0, c_transmissionDurationAdd, false);
        }
        gf_gainxp(250.0);
        gf_GainReward(1);
        ObjectiveSetState(lv_quest, c_objectiveStateCompleted);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
        if ((gv_difficulty >= 3.0)) {
            Wait((6-gv_difficulty)*60, c_timeGame);
            TechTreeUpgradeAddLevel(6, "hydraliskspeed", 1);
            TechTreeUpgradeAddLevel(6, "GlialReconstitution", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_evolutionquest2_Init () {
    gt_evolutionquest2 = TriggerCreate("gt_evolutionquest2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: evolutionquest3
//--------------------------------------------------------------------------------------------------
bool gt_evolutionquest3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_u2;
    int lv_tw;
    timer lv_timer;
    int lv_quest;
    int lv_ping;
    int lv_counter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tw = c_timerWindowNone;
    lv_timer = TimerCreate();
    lv_quest = c_invalidObjectiveId;
    lv_ping = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/31A5CFD4"), StringExternal("Param/Value/7CDDA30A"), c_objectiveStateActive, false);
    lv_quest = ObjectiveLastCreated();
    TimerStart(lv_timer, 270.0+((4.0-gv_difficulty)*120.0), false, c_timeGame);
    TimerWindowCreate(lv_timer, StringExternal("Param/Value/9A5D1CAF"), true, false);
    lv_tw = TimerWindowLastCreated();
    UnitCreate(1, "EvolutionChamber", 0, 6, Point(187.0, 11.0), 270.0);
    lv_u2 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(94.12, 0.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u2);
    lv_ping = PingLastCreated();
    while ((UnitIsAlive(lv_u2) == true) && (TimerGetRemaining(lv_timer) > 1.0)) {
        lv_counter += 1;
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(lv_tw);
    PingDestroy(lv_ping);
    if ((UnitIsAlive(lv_u2) == true)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/8CB09BA4"), StringExternal("Param/Value/E4C350E9"), 0.0, c_transmissionDurationAdd, false);
        UnitBehaviorAdd(lv_u2, "TooLate", lv_u2, 1);
        TechTreeUpgradeAddLevel(6, "ChitinousPlating", 1);
        ObjectiveSetState(lv_quest, c_objectiveStateFailed);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
    }
    else {
        gv_zevoquests += 1;
        if ((gv_zevoquests == 3)) {
            gf_achievements0killaward(18);
        }

        if ((lv_counter < 60)) {
            gf_evolutionspeedcomplete();
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/A2710B1A"), StringExternal("Param/Value/766BD9C2"), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/504F1AF4"), StringExternal("Param/Value/C2F5BBB5"), 0.0, c_transmissionDurationAdd, false);
        }
        gf_gainxp(250.0);
        gf_GainReward(11);
        ObjectiveSetState(lv_quest, c_objectiveStateCompleted);
        Wait(10.0, c_timeGame);
        ObjectiveSetState(lv_quest, c_objectiveStateHidden);
        if ((gv_difficulty >= 3.0)) {
            Wait((6-gv_difficulty)*60, c_timeGame);
            TechTreeUpgradeAddLevel(6, "ChitinousPlating", 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_evolutionquest3_Init () {
    gt_evolutionquest3 = TriggerCreate("gt_evolutionquest3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zbase5+1
//--------------------------------------------------------------------------------------------------
bool gt_zbase51_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_stage == 6)) {
        gf_SpawningRandom(Point(98.0, 71.0), Point(140.0, 70.0), Point(68,102), Point(125,51), Point(60,108), Point(82,93), Point(99,49), Point(86,51), Point(76,76), Point(94,84), Point(59,90), Point(54,86), Point(107,50), null, null, null, null, RandomInt(1,2), RandomInt(1,2), RandomInt(2,3), RandomInt(2,3), RandomInt(1,2), 0, RandomInt(1,2), 10, 0, 0, 0, 0, 11, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zbase51_Init () {
    gt_zbase51 = TriggerCreate("gt_zbase51_Func");
    TriggerAddEventUnitRegion(gt_zbase51, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_zbase51, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ultrabros
//--------------------------------------------------------------------------------------------------
bool gt_Ultrabros_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_ping1;
    int lv_ping2;
    int lv_objective;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;
    lv_objective = c_invalidObjectiveId;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/441A1B21"), StringExternal("Param/Value/0EB60932"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    if ((gv_champion == 1)) {
        UnitCreate(1, "HotSNoxious", c_unitCreateIgnorePlacement, 6, Point(215.0, 37.0), 90.0);
    }
    else {
        UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, 6, Point(215.0, 37.0), 90.0);
    }
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    if ((gv_champion == 1)) {
        UnitCreate(1, "HotSNoxious", c_unitCreateIgnorePlacement, 6, Point(205.0, 90.0), 0.0);
    }
    else {
        UnitCreate(1, "Ultralisk", c_unitCreateIgnorePlacement, 6, Point(205.0, 90.0), 0.0);
    }
    lv_u2 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u2);
    lv_ping2 = PingLastCreated();
    while ((UnitIsAlive(lv_u1) == true) && (UnitIsAlive(lv_u2) == true)) {
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_u1) == true)) {
        UnitBehaviorAdd(lv_u1, "Enrage", lv_u1, 1);
        UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        PingDestroy(lv_ping2);
    }
    else {
        UnitBehaviorAdd(lv_u2, "Enrage", lv_u2, 1);
        UnitIssueOrder(lv_u2, OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        PingDestroy(lv_ping1);
    }
    while (((UnitIsAlive(lv_u1) == true) || (UnitIsAlive(lv_u2) == true))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_ping2);
    PingDestroy(lv_ping1);
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    if ((TechTreeUpgradeCount(5, "ProtossGroundArmorsLevel1", c_techCountCompleteOnly) == 1)) {
        TechTreeUpgradeAddLevel(5, "ProtossGroundArmorsLevel2", 1);
    }
    else {
        TechTreeUpgradeAddLevel(5, "ProtossGroundArmorsLevel1", 1);
    }
    TechTreeUpgradeAddLevel(5, "ProtossShieldsLevel1", 1);
    TechTreeUpgradeAddLevel(5, "ProtossGroundWeaponsLevel1", 1);
    gf_gainxp(250.0);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Ultrabros_Init () {
    gt_Ultrabros = TriggerCreate("gt_Ultrabros_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AnnihilatorRandomMissile
//--------------------------------------------------------------------------------------------------
bool gt_AnnihilatorRandomMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_annihilator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_annihilator = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(lv_annihilator, "WarbotBLM", PointWithOffsetPolar(UnitGetPosition(lv_annihilator), 11.0, libNtve_gf_RandomAngle()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnihilatorRandomMissile_Init () {
    gt_AnnihilatorRandomMissile = TriggerCreate("gt_AnnihilatorRandomMissile_Func");
    TriggerAddEventPlayerEffectUsed(gt_AnnihilatorRandomMissile, 6, "AnnihilatorSearchRandomDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: zbase11
//--------------------------------------------------------------------------------------------------
bool gt_zbase11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stage < 12))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding(Point(163.0, 208.0), Point(163.0, 206.0), 1, 28, true, 250.0, "MetaliskCavern", "HotSTorrasque", StringExternal("Param/Value/15BC4656"), 1);
        gf_SpawningBuilding(Point(174.0, 212.0), Point(176.0, 212.0), 1, 28, true, 250.0, "NydusNetwork", "SwarmQueen2", StringExternal("Param/Value/7283142B"), 1);
        gf_SpawningBuilding(Point(136.0, 206.0), Point(136.0, 205.0), 2, 10, true, 250.0, "HydraliskDen", "HydraliskImpaler", StringExternal("Param/Value/5CC9429B"), 1);
        gf_SpawningBuilding(Point(152.0, 193.0), Point(152.0, 194.0), 2, 12, true, 250.0, "RoachWarren", "RoachCorpser", StringExternal("Param/Value/7E32DD11"), 1);
        gf_SpawningBuilding(Point(121.0, 183.0), Point(121.0, 183.0), 2, 12, true, 250.0, "RoachWarren", "RoachCorpser", StringExternal("Param/Value/AF7EA54F"), 1);
    }
    else {
        gf_SpawningBuilding(Point(163.0, 208.0), Point(163.0, 206.0), 1, 28, true, 250.0, "MetaliskCavern", "Metalisk", StringExternal("Param/Value/219AFF27"), 1);
        gf_SpawningBuilding(Point(174.0, 212.0), Point(176.0, 212.0), 1, 28, true, 250.0, "NydusNetwork", "Queen", StringExternal("Param/Value/94CE210E"), 1);
        gf_SpawningBuilding(Point(136.0, 206.0), Point(136.0, 205.0), 2, 10, true, 250.0, "HydraliskDen", "Hydralisk", StringExternal("Param/Value/5DC54F7A"), 1);
        gf_SpawningBuilding(Point(152.0, 193.0), Point(152.0, 194.0), 2, 12, true, 250.0, "RoachWarren", "Roach", StringExternal("Param/Value/6FA630A8"), 1);
        gf_SpawningBuilding(Point(121.0, 183.0), Point(121.0, 183.0), 2, 12, true, 250.0, "RoachWarren", "Roach", StringExternal("Param/Value/33350108"), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zbase11_Init () {
    gt_zbase11 = TriggerCreate("gt_zbase11_Func");
    TriggerAddEventUnitRegion(gt_zbase11, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: zbase11 2
//--------------------------------------------------------------------------------------------------
bool gt_zbase112_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 6))) {
            return false;
        }

        if (!((gv_stage < 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding(Point(124.0, 240.0), Point(124.0, 240.0), 1, 28, true, 250.0, "MetaliskCavern", "HotSTorrasque", StringExternal("Param/Value/6D22A877"), 1);
        gf_SpawningBuilding(Point(140.0, 251.0), Point(140.0, 251.0), 1, 28, true, 250.0, "NydusNetwork", "SwarmQueen2", StringExternal("Param/Value/0A68B7E5"), 1);
        gf_SpawningBuilding(Point(150.0, 234.0), Point(150.0, 234.0), 2, 10, true, 250.0, "HydraliskDen", "HydraliskImpaler", StringExternal("Param/Value/E375D6AE"), 1);
        gf_SpawningBuilding(Point(168.0, 250.0), Point(168.0, 250.0), 2, 12, true, 250.0, "RoachWarren", "RoachCorpser", StringExternal("Param/Value/4D1981B6"), 1);
        gf_SpawningBuilding(Point(155.0, 249.0), Point(155.0, 249.0), 2, 12, true, 250.0, "RoachWarren", "RoachCorpser", StringExternal("Param/Value/ECF0840A"), 1);
    }
    else {
        gf_SpawningBuilding(Point(124.0, 240.0), Point(124.0, 240.0), 1, 28, true, 250.0, "MetaliskCavern", "Metalisk", StringExternal("Param/Value/67A33C27"), 1);
        gf_SpawningBuilding(Point(140.0, 251.0), Point(140.0, 251.0), 1, 28, true, 250.0, "NydusNetwork", "Queen", StringExternal("Param/Value/6D4ACBAD"), 1);
        gf_SpawningBuilding(Point(150.0, 234.0), Point(150.0, 234.0), 2, 10, true, 250.0, "HydraliskDen", "Hydralisk", StringExternal("Param/Value/AC70F8EA"), 1);
        gf_SpawningBuilding(Point(168.0, 250.0), Point(168.0, 250.0), 2, 12, true, 250.0, "RoachWarren", "Roach", StringExternal("Param/Value/3534D169"), 1);
        gf_SpawningBuilding(Point(155.0, 249.0), Point(155.0, 249.0), 2, 12, true, 250.0, "RoachWarren", "Roach", StringExternal("Param/Value/7B5FB3FD"), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_zbase112_Init () {
    gt_zbase112 = TriggerCreate("gt_zbase112_Func");
    TriggerAddEventUnitRegion(gt_zbase112, null, RegionFromId(30), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EnragedMetalisk
//--------------------------------------------------------------------------------------------------
bool gt_EnragedMetalisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_ping1;
    int lv_ping2;
    int lv_objective;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping1 = c_invalidPingId;
    lv_ping2 = c_invalidPingId;
    lv_objective = c_invalidObjectiveId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_champion == 1)) {
        ObjectiveCreate(StringExternal("Param/Value/832802A9"), StringExternal("Param/Value/6E760386"), c_objectiveStateActive, false);
    }
    else {
        ObjectiveCreate(StringExternal("Param/Value/C1EEFB82"), StringExternal("Param/Value/65A495C2"), c_objectiveStateActive, false);
    }
    lv_objective = ObjectiveLastCreated();
    if ((gv_champion == 1)) {
        UnitCreate(1, "HotSTorrasque", c_unitCreateIgnorePlacement, 6, Point(173.0, 47.0), 90.0);
    }
    else {
        UnitCreate(1, "Metalisk", c_unitCreateIgnorePlacement, 6, Point(173.0, 47.0), 90.0);
    }
    lv_u1 = UnitLastCreated();
    UnitBehaviorAdd(lv_u1, "Enrage", lv_u1, 1);
    UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    if ((gv_champion == 1)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D0423A6E"), StringExternal("Param/Value/A17C1A25"), 0.0, c_transmissionDurationAdd, false);
    }
    else {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7535A43A"), StringExternal("Param/Value/582CB223"), 0.0, c_transmissionDurationAdd, false);
    }
    while ((UnitIsAlive(lv_u1) == true)) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    TechTreeUpgradeAddLevel(5, "ZealotHpRegen", 1);
    if ((gv_champion == 1)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0A1E2147"), StringExternal("Param/Value/EA9D914F"), 0.0, c_transmissionDurationAdd, false);
    }
    else {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/3C3A9531"), StringExternal("Param/Value/C224DE90"), 0.0, c_transmissionDurationAdd, false);
    }
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnragedMetalisk_Init () {
    gt_EnragedMetalisk = TriggerCreate("gt_EnragedMetalisk_Func");
    TriggerAddEventUnitRegion(gt_EnragedMetalisk, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen
//--------------------------------------------------------------------------------------------------
bool gt_Queen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = 11;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_champion == 1)) {
        ObjectiveCreate(StringExternal("Param/Value/3612D620"), StringExternal("Param/Value/F970B759"), c_objectiveStateActive, false);
    }
    else {
        ObjectiveCreate(StringExternal("Param/Value/478D296C"), StringExternal("Param/Value/C88B7EEC"), c_objectiveStateActive, false);
    }
    lv_objective = ObjectiveLastCreated();
    if ((gv_champion == 1)) {
        UnitCreate(1, "SwarmQueen2", c_unitCreateIgnorePlacement, 6, Point(150.0, 85.0), 90.0);
    }
    else {
        UnitCreate(1, "Queen", c_unitCreateIgnorePlacement, 6, Point(150.0, 85.0), 90.0);
    }
    lv_u1 = UnitLastCreated();
    gf_Queen(lv_u1, 2, 6, 2.5, 1.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    if ((gv_champion == 1)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/C995A799"), StringExternal("Param/Value/58530E27"), 0.0, c_transmissionDurationAdd, false);
    }
    else {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/CB585315"), StringExternal("Param/Value/3B5B7C6A"), 0.0, c_transmissionDurationAdd, false);
    }
    while ((UnitIsAlive(lv_u1) == true)) {
        lv_k += 1;
        if ((lv_k > 2)) {
            lv_k = 0;
            if ((gv_champion == 1)) {
                UnitCreate(1, "HotSSwarmling", c_unitCreateIgnorePlacement, 6, UnitGetPosition(lv_u1), 90.0);
            }
            else {
                UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, 6, UnitGetPosition(lv_u1), 90.0);
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        }

        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    if ((gv_champion == 1)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0C5EF486"), StringExternal("Param/Value/F1448689"), 0.0, c_transmissionDurationAdd, false);
    }
    else {
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DEB803B7"), StringExternal("Param/Value/E63CFBB6"), 0.0, c_transmissionDurationAdd, false);
    }
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    gf_GainReward(1);
    Wait(1.0, c_timeGame);
    Wait(9.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Queen_Init () {
    gt_Queen = TriggerCreate("gt_Queen_Func");
    TriggerAddEventUnitRegion(gt_Queen, null, RegionFromId(9), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscortRecruit
//--------------------------------------------------------------------------------------------------
bool gt_EscortRecruit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    bool lv_running;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/61BADC32"), StringExternal("Param/Value/FA69C16A"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "FireHero", c_unitCreateIgnorePlacement, 5, Point(213.0, 96.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetPropertyFixed(lv_u1, c_unitPropMovementSpeed, 1.75);
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, (200.0 + (200.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, (200.0 + (200.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShieldsMax, (200.0 + (200.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShields, (200.0 + (200.0 * gv_difficulty)));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1B3029F0"), StringExternal("Param/Value/BBA8D5A9"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true) && (libNtve_gf_UnitInRegion(lv_u1, RegionFromId(14)) == false)) {
        if (((UnitGroupCount(UnitGroup(null, 1, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 2, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 3, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 4, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1)) && (lv_running == false)) {
            lv_running = true;
            libNtve_gf_MakeUnitInvulnerable(lv_u1, false);
            UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(240.0, 10.0)), c_orderQueueReplace);
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/60BA12C4"), StringExternal("Param/Value/020F1EBB"), 0.0, c_transmissionDurationAdd, false);
        }
        else {
            if ((lv_running == true)) {
                UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(240.0, 10.0)), c_orderQueueReplace);
            }

        }
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        gf_GainReward(11);
        gv_zrescuequests += 1;
        if ((gv_zrescuequests == 3)) {
            gf_achievements0killaward(17);
        }

        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2631BDB5"), StringExternal("Param/Value/F53BE2FA"), 0.0, c_transmissionDurationAdd, false);
        gf_gainxp(250.0);
        UnitRemove(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/10847BE8"), StringExternal("Param/Value/75EA16A3"), 0.0, c_transmissionDurationAdd, false);
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortRecruit_Init () {
    gt_EscortRecruit = TriggerCreate("gt_EscortRecruit_Func");
    TriggerAddEventUnitRegion(gt_EscortRecruit, null, RegionFromId(10), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscortRecruit 2
//--------------------------------------------------------------------------------------------------
bool gt_EscortRecruit2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    bool lv_running;
    fixed lv_ambushcounter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }

        if (!((gv_mode < 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/B4B2712D"), StringExternal("Param/Value/A1EC374D"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "FireHero", c_unitCreateIgnorePlacement, 5, Point(110.0, 49.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetPropertyFixed(lv_u1, c_unitPropMovementSpeed, 1.75);
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, (300.0 + (300.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, (300.0 + (300.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShieldsMax, (300.0 + (300.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShields, (300.0 + (300.0 * gv_difficulty)));
    libNtve_gf_ShareVisionofUnit(lv_u1, true, 6);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/08942AF7"), StringExternal("Param/Value/D97B7402"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_u1), Point(116.0, 138.0)) > 5.0)) {
        if (((UnitGroupCount(UnitGroup(null, 1, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 2, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 3, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 4, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1)) && (lv_running == false)) {
            lv_running = true;
            libNtve_gf_MakeUnitInvulnerable(lv_u1, false);
            UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(116.0, 138.0)), c_orderQueueReplace);
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/4D56A6F2"), StringExternal("Param/Value/A617C2F0"), 0.0, c_transmissionDurationAdd, false);
            lv_ambushcounter = (5.0 + RandomFixed(8.0, (50.0 - (gv_difficulty * 7.0))));
        }
        else {
            if ((lv_running == true)) {
                UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(116.0, 138.0)), c_orderQueueReplace);
                if ((lv_ambushcounter <= 1.0)) {
                    lv_ambushcounter = (5.0 + RandomFixed(16-gv_difficulty, (50.0 - (gv_difficulty * 7.0))));
                    gf_EscortAmbush(lv_u1);
                }
                else {
                    lv_ambushcounter -= 1.0;
                }
            }
            else {
                UnitIssueOrder(lv_u1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/FF461587"), StringExternal("Param/Value/E27D782B"), 0.0, c_transmissionDurationAdd, false);
        gv_zrescuequests += 1;
        if ((gv_zrescuequests == 3)) {
            gf_achievements0killaward(17);
        }

        gf_GainReward(11);
        gf_gainxp(1500.0);
        if (((UnitCount(null, 6, RegionFromId(39), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) - (UnitCount("SpineCrawler", 6, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) + UnitCount("SporeCrawler", 6, RegionFromId(39), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0))) >= 20) && (gv_stage >= 6)) {
            gf_achievementPossiblyGainedTeam(71, FixedToInt(gv_difficulty));
        }

        UnitRemove(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/DB135DDA"), StringExternal("Param/Value/9AE8E06D"), 0.0, c_transmissionDurationAdd, false);
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortRecruit2_Init () {
    gt_EscortRecruit2 = TriggerCreate("gt_EscortRecruit2_Func");
    TriggerAddEventUnitRegion(gt_EscortRecruit2, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EscortRecruit2, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EscortRecruit 3
//--------------------------------------------------------------------------------------------------
bool gt_EscortRecruit3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    bool lv_running;
    fixed lv_ambushcounter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/3724CED4"), StringExternal("Param/Value/386F3FB9"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "FireHero", c_unitCreateIgnorePlacement, 5, Point(83.0, 214.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitSetPropertyFixed(lv_u1, c_unitPropMovementSpeed, 1.75);
    UnitSetPropertyFixed(lv_u1, c_unitPropLifeMax, (500.0 + (500.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropLife, (500.0 + (500.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShieldsMax, (500.0 + (500.0 * gv_difficulty)));
    UnitSetPropertyFixed(lv_u1, c_unitPropShields, (500.0 + (500.0 * gv_difficulty)));
    libNtve_gf_ShareVisionofUnit(lv_u1, true, 6);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7DE85BD7"), StringExternal("Param/Value/612F1DA5"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_u1), Point(44.0, 122.0)) > 5.0)) {
        if (((UnitGroupCount(UnitGroup(null, 1, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 2, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 3, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup(null, 4, RegionFromId(35), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) >= 1)) && (lv_running == false)) {
            lv_running = true;
            libNtve_gf_MakeUnitInvulnerable(lv_u1, false);
            UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(44.0, 122.0)), c_orderQueueReplace);
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/83D85F17"), StringExternal("Param/Value/61F65826"), 0.0, c_transmissionDurationAdd, false);
            lv_ambushcounter = (5.0 + RandomFixed(8.0, (50.0 - (gv_difficulty * 7.0))));
        }
        else {
            if ((lv_running == true)) {
                UnitIssueOrder(lv_u1, OrderTargetingPoint(AbilityCommand("move", 0), Point(44.0, 122.0)), c_orderQueueReplace);
                if ((lv_ambushcounter <= 1.0)) {
                    lv_ambushcounter = (5.0 + RandomFixed(16-gv_difficulty, (50.0 - (gv_difficulty * 7.0))));
                    gf_EscortAmbush(lv_u1);
                }
                else {
                    lv_ambushcounter -= 1.0;
                }
            }
            else {
                UnitIssueOrder(lv_u1, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitSetPropertyFixed(lv_u1, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(lv_u1, c_unitPropShieldsPercent, 100.0);
            }
        }
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_u1) == true)) {
        ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5263579A"), StringExternal("Param/Value/39198FB5"), 0.0, c_transmissionDurationAdd, false);
        gv_zrescuequests += 1;
        if ((gv_zrescuequests == 3)) {
            gf_achievements0killaward(17);
        }

        gf_GainReward(11);
        gf_gainxp(5000.0);
        UnitRemove(lv_u1);
    }
    else {
        ObjectiveSetState(lv_objective, c_objectiveStateFailed);
        TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/007311D0"), StringExternal("Param/Value/A2A1668F"), 0.0, c_transmissionDurationAdd, false);
    }
    PingDestroy(lv_ping1);
    Wait(10.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortRecruit3_Init () {
    gt_EscortRecruit3 = TriggerCreate("gt_EscortRecruit3_Func");
    TriggerAddEventUnitRegion(gt_EscortRecruit3, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SpawningPool
//--------------------------------------------------------------------------------------------------
bool gt_SpawningPool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = 11;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(251.0, 119.0), 90.0);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding2(Point(240.0, 129.0), Point(240.0, 128.0), 8, 12, true, 250.0, "SpawningPool", "HotSSwarmling", StringExternal("Param/Value/8A84EA10"), 1, null, 0, null, true);
    }
    else {
        gf_SpawningBuilding2(Point(240.0, 129.0), Point(240.0, 128.0), 8, 12, true, 250.0, "SpawningPool", "Zergling", StringExternal("Param/Value/E470CA6A"), 1, null, 0, null, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawningPool_Init () {
    gt_SpawningPool = TriggerCreate("gt_SpawningPool_Func");
    TriggerAddEventUnitRegion(gt_SpawningPool, null, RegionFromId(12), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: optionalpool5
//--------------------------------------------------------------------------------------------------
bool gt_optionalpool5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = 11;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(163.0, 78.0), 90.0);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding(Point(156.0, 98.0), Point(156.0, 97.0), 3, 8, true, 250.0, "SpawningPool", "HotSSwarmling", StringExternal("Param/Value/B8E409BC"), 5);
    }
    else {
        gf_SpawningBuilding(Point(156.0, 98.0), Point(156.0, 97.0), 7, 8, true, 250.0, "SpawningPool", "Zergling", StringExternal("Param/Value/5C335A7D"), 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_optionalpool5_Init () {
    gt_optionalpool5 = TriggerCreate("gt_optionalpool5_Func");
    TriggerAddEventUnitRegion(gt_optionalpool5, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoonLordBeacon
//--------------------------------------------------------------------------------------------------
bool gt_MoonLordBeacon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "TemplarArchive", c_unitCreateIgnorePlacement, 5, Point(215.0, 125.0), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D82A909F"), StringExternal("Param/Value/0DC6C4CB"), 0.0, c_transmissionDurationAdd, false);
    gf_hiddenbuildingfound();
    gv_xPPeriodicBonus = (gv_xPPeriodicBonus + 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonLordBeacon_Init () {
    gt_MoonLordBeacon = TriggerCreate("gt_MoonLordBeacon_Func");
    TriggerAddEventUnitRegion(gt_MoonLordBeacon, null, RegionFromId(22), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoonLordBeacon 3
//--------------------------------------------------------------------------------------------------
bool gt_MoonLordBeacon3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "TemplarArchive", c_unitCreateIgnorePlacement, 5, Point(200.0, 29.0), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/BECC794A"), StringExternal("Param/Value/B82662DC"), 0.0, c_transmissionDurationAdd, false);
    gf_hiddenbuildingfound();
    gv_xPPeriodicBonus = (gv_xPPeriodicBonus + 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonLordBeacon3_Init () {
    gt_MoonLordBeacon3 = TriggerCreate("gt_MoonLordBeacon3_Func");
    TriggerAddEventUnitRegion(gt_MoonLordBeacon3, null, RegionFromId(34), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoonLordBeacon2
//--------------------------------------------------------------------------------------------------
bool gt_MoonLordBeacon2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "DarkShrine", c_unitCreateIgnorePlacement, 5, Point(78.0, 241.0), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/20F31A02"), StringExternal("Param/Value/234C3BAA"), 0.0, c_transmissionDurationAdd, false);
    gf_hiddenbuildingfound();
    gv_xPPeriodicBonus = (gv_xPPeriodicBonus + 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonLordBeacon2_Init () {
    gt_MoonLordBeacon2 = TriggerCreate("gt_MoonLordBeacon2_Func");
    TriggerAddEventUnitRegion(gt_MoonLordBeacon2, null, RegionFromId(16), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoonLordBeacon4
//--------------------------------------------------------------------------------------------------
bool gt_MoonLordBeacon4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "DarkShrine", c_unitCreateIgnorePlacement, 5, Point(149.0, 134.0), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/53B69C17"), StringExternal("Param/Value/2DD49043"), 0.0, c_transmissionDurationAdd, false);
    gf_hiddenbuildingfound();
    gv_xPPeriodicBonus = (gv_xPPeriodicBonus + 30.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoonLordBeacon4_Init () {
    gt_MoonLordBeacon4 = TriggerCreate("gt_MoonLordBeacon4_Func");
    TriggerAddEventUnitRegion(gt_MoonLordBeacon4, null, RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: optionalpool4
//--------------------------------------------------------------------------------------------------
bool gt_optionalpool4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    int lv_k;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_k = 11;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(207.0, 39.0), 90.0);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding(Point(196.0, 40.0), Point(196.0, 39.0), 2, 10, true, 250.0, "SpawningPool", "HotSSwarmling", StringExternal("Param/Value/5BFDC7EB"), 1);
    }
    else {
        gf_SpawningBuilding(Point(196.0, 40.0), Point(196.0, 39.0), 4, 10, true, 250.0, "SpawningPool", "Zergling", StringExternal("Param/Value/E71E58D9"), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_optionalpool4_Init () {
    gt_optionalpool4 = TriggerCreate("gt_optionalpool4_Func");
    TriggerAddEventUnitRegion(gt_optionalpool4, null, RegionFromId(19), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NydusWorm
//--------------------------------------------------------------------------------------------------
bool gt_NydusWorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;
    unitgroup lv_towers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;
    lv_towers = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/3B8F941E"), StringExternal("Param/Value/70DDDAF5"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "NydusCanal", c_unitCreateIgnorePlacement, 6, Point(192.0, 202.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(188.0, 187.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(188.0, 185.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(188.0, 183.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(188.0, 181.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(188.0, 179.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(198.0, 179.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(198.0, 181.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(198.0, 183.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(198.0, 185.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(198.0, 187.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "HardShell", UnitLastCreated(), 1);
    UnitGroupAdd(lv_towers, UnitLastCreated());
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1458CD61"), StringExternal("Param/Value/094D8A06"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true)) {
        if ((gv_champion == 1)) {
            UnitCreate(1, "HotSSwarmling", c_unitCreateIgnorePlacement, 6, Point(192.0, 202.0), 270.0);
        }
        else {
            UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, 6, Point(192.0, 202.0), 270.0);
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    gf_hiddenbuildingfound();
    UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(192.0, 202.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "PylonWeaponDisable", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "UnitIsInActiveArmyTriggers", UnitLastCreated(), 1);
    lv_u1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_u1, true);
    UnitCreate(1, "WarpGate", c_unitCreateIgnorePlacement, 5, Point(192.0, 202.0), 90.0);
    lv_u2 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_u2, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1272789B"), StringExternal("Param/Value/E7D5055B"), 0.0, c_transmissionDurationAdd, false);
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    while ((UnitGroupCount(lv_towers, c_unitCountAll) > 0)) {
        UnitKill(UnitGroupUnit(lv_towers, 1));
        UnitGroupRemove(lv_towers, UnitGroupUnit(lv_towers, 1));
    }
    Wait(5.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    while ((UnitIsAlive(lv_u1) == true) && (UnitIsAlive(lv_u2) == true)) {
        if ((gv_stage < 12) && (UnitGroupCount(gv_alliedUnitsOnMap, c_unitCountAlive) <= (20 + (gv_stage * 4)))) {
            if ((UnitGroupCount(UnitGroup("ProtossAlliesImmortal", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) < (3 + (gv_stage / 4)))) {
                UnitIssueOrder(lv_u2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 8), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            }

            if ((UnitGroupCount(UnitGroup("Archon", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) < (3 + (gv_stage / 4)))) {
                UnitIssueOrder(lv_u2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 7), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            }

        }

        Wait(3.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWorm_Init () {
    gt_NydusWorm = TriggerCreate("gt_NydusWorm_Func");
    TriggerAddEventUnitRegion(gt_NydusWorm, null, RegionFromId(6), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NydusWorm 2
//--------------------------------------------------------------------------------------------------
bool gt_NydusWorm2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u1;
    unit lv_u2;
    int lv_objective;
    int lv_ping1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = c_invalidObjectiveId;
    lv_ping1 = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveCreate(StringExternal("Param/Value/172A49D3"), StringExternal("Param/Value/7C3B200B"), c_objectiveStateActive, false);
    lv_objective = ObjectiveLastCreated();
    UnitCreate(1, "NydusCanal", c_unitCreateIgnorePlacement, 6, Point(251.0, 133.0), 90.0);
    lv_u1 = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", libNtve_gf_PointFromXYZ(0.0, 0.0, 0.0), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 9000.0, 270.0);
    PingSetUnit(PingLastCreated(), lv_u1);
    lv_ping1 = PingLastCreated();
    if ((gv_champion == 1)) {
        UnitCreate(2, "HotSNoxious", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
    }
    else {
        UnitCreate(2, "Ultralisk", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
    }
    UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1F27839B"), StringExternal("Param/Value/0F32ED9B"), 0.0, c_transmissionDurationAdd, false);
    while ((UnitIsAlive(lv_u1) == true)) {
        if ((gv_champion == 1)) {
            UnitCreate(1, "RoachCorpser", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
            UnitCreate(1, "HotSSplitterlingBig", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        }
        else {
            UnitCreate(1, "Roach", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
            UnitCreate(1, "Baneling", c_unitCreateIgnorePlacement, 6, Point(250.0, 135.0), 270.0);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), Point(240.0, 10.0)), c_orderQueueReplace);
        }
        Wait(2.0, c_timeGame);
    }
    ObjectiveSetState(lv_objective, c_objectiveStateCompleted);
    gf_hiddenbuildingfound();
    UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(251.0, 133.0), 90.0);
    UnitBehaviorAdd(UnitLastCreated(), "PylonWeaponDisable", UnitLastCreated(), 1);
    UnitBehaviorAdd(UnitLastCreated(), "UnitIsInActiveArmyTriggers", UnitLastCreated(), 1);
    lv_u1 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_u1, true);
    UnitCreate(1, "WarpGate", c_unitCreateIgnorePlacement, 5, Point(251.0, 133.0), 90.0);
    lv_u2 = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_u2, true);
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5DC00127"), StringExternal("Param/Value/CFD3561F"), 0.0, c_transmissionDurationAdd, false);
    PingDestroy(lv_ping1);
    gf_gainxp(250.0);
    Wait(5.0, c_timeGame);
    ObjectiveShow(lv_objective, PlayerGroupAll(), false);
    while ((UnitIsAlive(lv_u1) == true) && (UnitIsAlive(lv_u2) == true)) {
        if ((gv_stage < 12) && (UnitGroupCount(gv_alliedUnitsOnMap, c_unitCountAlive) <= (20 + (gv_stage * 4)))) {
            UnitIssueOrder(lv_u2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 3), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            if ((UnitGroupCount(UnitGroup("Sentry", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) < (2 + (gv_stage / 2)))) {
                UnitIssueOrder(lv_u2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 5), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            }

        }

        Wait(3.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NydusWorm2_Init () {
    gt_NydusWorm2 = TriggerCreate("gt_NydusWorm2_Func");
    TriggerAddEventUnitRegion(gt_NydusWorm2, null, RegionFromId(17), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init
//--------------------------------------------------------------------------------------------------
bool gt_init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    playergroup auto93667EC8_g;
    int auto93667EC8_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnit", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackUnitAlly_Prot", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTown", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly", false);
    UISetAlertTypeVisible(PlayerGroupAll(), "AttackTownAlly_Prot", false);
    gf_initalliances();
    gf_initdifficultyplayercount();
    gf_initbanks();
    gf_initaddgametime();
    auto93667EC8_g = PlayerGroupAll();
    auto93667EC8_var = -1;
    while (true) {
        auto93667EC8_var = PlayerGroupNextPlayer(auto93667EC8_g, auto93667EC8_var);
        if (auto93667EC8_var < 0) { break; }
        PlayerOptionOverride(auto93667EC8_var, "simplecommandcard", "0");
    }
    TriggerExecute(gt_xpbarinit, true, false);
    gf_initTalentDialogs();
    gf_talentfreeupdater();
    gv_zrecordtimes[1] = 300;
    gv_zrecordtimes[2] = 360;
    gv_zrecordtimes[3] = 840;
    gv_zrecordtimes[4] = 1260;
    gv_zrecordtimes[5] = 1980;
    gv_xpboost = (1.0 + ((gv_rewardUsed[1][9] + gv_rewardUsed[2][9] + gv_rewardUsed[3][9] + gv_rewardUsed[4][9]) * 0.02));
    gf_initAchievementdialog();
    gf_initselectmode();
    DialogCreate(125, 125, c_anchorTop, -200, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_bossTooltipDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 75, 75, c_anchorTopLeft, 25, 25, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_bossTooltipDialogItem = DialogControlLastCreated();
    DialogSetVisible(gv_bossTooltipDialog, PlayerGroupAll(), true);
    if ((gv_mode == 1)) {
        gf_initupgradedialog();
        gf_initteleportdialog();
        gf_rewarddialoginit();
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive) && (gv_rewardaccumulated[lv_i] < 1)) {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, StringExternal("Param/Value/765E66C1"));
                gf_rewardgainpoints(lv_i, 20, 5);
                gf_introfornewb(lv_i);
            }
            else {
                if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                    gf_showstatwindow(lv_i);
                }

            }
        }
        gf_inittips();
        gf_heropickdialogANDtalentsANDupgradesbuttons();
        gf_upgradebuttonflasher();
        gf_initdisplaytalentsetcasMinerals();
        gf_inittips();
        gf_challengemode();
    }
    else {
        gf_initupgradedialog();
        gf_initteleportdialog();
        gf_rewarddialoginit();
        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive) && (gv_rewardaccumulated[lv_i] < 1)) {
                UIDisplayMessage(PlayerGroupSingle(lv_i), c_messageAreaSubtitle, StringExternal("Param/Value/79CD0A63"));
                gf_rewardgainpoints(lv_i, 20, 5);
                gf_introfornewb(lv_i);
            }
            else {
                if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                    gf_showstatwindow(lv_i);
                }

            }
        }
        gf_inittips();
        gf_buildbase1();
        gf_buildzergbase1();
        gf_heropickdialogANDtalentsANDupgradesbuttons();
        gf_upgradebuttonflasher();
        gf_initdisplaytalentsetcasMinerals();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_Init () {
    gt_init = TriggerCreate("gt_init_Func");
    TriggerAddEventTimeElapsed(gt_init, 0.01, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: initselectmodebuttonpress
//--------------------------------------------------------------------------------------------------
bool gt_initselectmodebuttonpress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_votepower;
    int lv_votepower2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_votepower = FixedToInt((400.0 / gv_playercount));
    lv_votepower2 = FixedToInt((400.0 / gv_playercount));

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_rewardButtons[1]) || (EventDialogControl() == gv_rewardButtons[2]) || (EventDialogControl() == gv_rewardButtons[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }

    if ((gv_zdeathcount[lv_player] != 0)) {
        if ((gv_zdeathcount[lv_player] == -1) && (EventDialogControl() == gv_rewardButtons[2])) {
            gv_mode += lv_votepower;
            gv_mode += lv_votepower;
            gv_zdeathcount[lv_player] = 1;
        }
        else {
            if ((gv_zdeathcount[lv_player] == 1) && (EventDialogControl() == gv_rewardButtons[1])) {
                gv_mode -= lv_votepower;
                gv_mode -= lv_votepower;
                gv_zdeathcount[lv_player] = -1;
            }
            else {
                if ((gv_zdeathcount[lv_player] == -1) && (EventDialogControl() == gv_rewardButtons[4])) {
                    gv_mode -= lv_votepower;
                    gv_mode2 -= lv_votepower2;
                    gv_zdeathcount[lv_player] = -10;
                }
                else {
                    if ((gv_zdeathcount[lv_player] == 1) && (EventDialogControl() == gv_rewardButtons[4])) {
                        gv_mode += lv_votepower;
                        gv_mode2 -= lv_votepower2;
                        gv_zdeathcount[lv_player] = -10;
                    }
                    else {
                        if ((gv_zdeathcount[lv_player] == -10) && (EventDialogControl() == gv_rewardButtons[1])) {
                            gv_mode -= lv_votepower;
                            gv_mode2 += lv_votepower2;
                            gv_zdeathcount[lv_player] = -1;
                        }
                        else {
                            if ((gv_zdeathcount[lv_player] == -10) && (EventDialogControl() == gv_rewardButtons[2])) {
                                gv_mode += lv_votepower;
                                gv_mode2 += lv_votepower2;
                                gv_zdeathcount[lv_player] = 1;
                            }

                        }
                    }
                }
            }
        }
    }
    else {
        if (((EventDialogControl() == gv_rewardButtons[1]))) {
            gv_mode -= lv_votepower;
            gv_zdeathcount[lv_player] = -1;
        }
        else {
            if ((EventDialogControl() == gv_rewardButtons[4])) {
                gv_mode2 -= lv_votepower2;
                gv_zdeathcount[lv_player] = -10;
            }
            else {
                gv_mode += lv_votepower;
                gv_zdeathcount[lv_player] = 1;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initselectmodebuttonpress_Init () {
    gt_initselectmodebuttonpress = TriggerCreate("gt_initselectmodebuttonpress_Func");
    TriggerAddEventDialogControl(gt_initselectmodebuttonpress, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init1
//--------------------------------------------------------------------------------------------------
bool gt_init1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init1_Init () {
    gt_init1 = TriggerCreate("gt_init1_Func");
    TriggerAddEventMapInit(gt_init1);
}

//--------------------------------------------------------------------------------------------------
// Trigger: pickhero
//--------------------------------------------------------------------------------------------------
bool gt_pickhero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawnpoint = Point(59.0, 47.0);

    // Conditions
    if (testConds) {
        if (!((gv_hero[(EventPlayer() - 1)] == null))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_zheropickdialogbuttons[0]) || (EventDialogControl() == gv_zheropickdialogbuttons[1]) || (EventDialogControl() == gv_zheropickdialogbuttons[2]) || (EventDialogControl() == gv_zheropickdialogbuttons[3]) || (EventDialogControl() == gv_zheropickdialogbuttons[4]) || (EventDialogControl() == gv_zheropickdialogbuttons[5]) || (EventDialogControl() == gv_zheropickdialogbuttons[6]) || (EventDialogControl() == gv_zheropickdialogbuttons[7]) || (EventDialogControl() == gv_zheropickdialogbuttons[8]) || (EventDialogControl() == gv_zheropickdialogbuttons[9]) || (EventDialogControl() == gv_zheropickdialogbuttons[10]) || (EventDialogControl() == gv_zheropickdialogbuttons[11]) || (EventDialogControl() == gv_zheropickdialogbuttons[12]) || (EventDialogControl() == gv_zheropickdialogbuttons[13]) || (EventDialogControl() == gv_zheropickdialogbuttons[14]) || (EventDialogControl() == gv_zheropickdialogbuttons[15]) || (EventDialogControl() == gv_zheropickdialogbuttons[16]) || (EventDialogControl() == gv_zheropickdialogbuttons[17]) || (EventDialogControl() == gv_zheropickdialogbuttons[18]) || (EventDialogControl() == gv_zheropickdialogbuttons[19])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mode == 0)) {
        lv_spawnpoint = Point(239.0, 8.0);
    }

    DialogSetVisible(DialogControlGetDialog(EventDialogControl()), PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_zheropickdialogbuttons[0])) {
        UnitCreate(1, "FireHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "firehero", "statscounter", 1);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[1])) {
        UnitCreate(1, "LightningHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
        UnitSetCustomValue(UnitLastCreated(), 0, 4.0);
        UnitSetCustomValue(UnitLastCreated(), 5, 2.0);
        UnitSetCustomValue(UnitLastCreated(), 10, 1.8);
        UnitSetCustomValue(UnitLastCreated(), 11, 0.5);
        UnitSetCustomValue(UnitLastCreated(), 20, 3.0);
        UnitSetCustomValue(UnitLastCreated(), 21, 10.0);
        gf_StaticArmor(UnitLastCreated());
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "lightninghero", "statscounter", 1);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[2])) {
        UnitCreate(1, "PoisonHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
        UnitSetCustomValue(UnitLastCreated(), 0, 1.5);
        UnitSetCustomValue(UnitLastCreated(), 1, 3.0);
        UnitSetCustomValue(UnitLastCreated(), 2, 10.0);
        UnitSetCustomValue(UnitLastCreated(), 5, 0.5);
        UnitSetCustomValue(UnitLastCreated(), 6, 2.0);
        UnitSetCustomValue(UnitLastCreated(), 10, 1.0);
        UnitSetCustomValue(UnitLastCreated(), 11, 1.0);
        UnitSetCustomValue(UnitLastCreated(), 12, 1.0);
        UnitSetCustomValue(UnitLastCreated(), 15, 1.0);
        UnitSetCustomValue(UnitLastCreated(), 20, 3.0);
        gf_poisonarmorstacks(UnitLastCreated());
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "poisonhero", "statscounter", 1);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[3])) {
        UnitCreate(1, "ShadowHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
        gf_Shadowwallofdarkness(UnitLastCreated());
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "shadowhero", "statscounter", 1);
        HelpPanelAddTip(PlayerGroupSingle(EventPlayer()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/74BBCB54"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/73885120"), StringExternal("Param/Value/ABFDD773"), "Assets\\WallOfDarknessEx3.dds");
        if ((gf_bankgetint(gv_zbanks[EventPlayer()], "shadowenergy", "tip") == 1)) {
            TipAlertPanelClear(PlayerGroupSingle(EventPlayer()));
        }
        else {
            gf_bankaddtoint(gv_zbanks[EventPlayer()], "shadowenergy", "tip", 1);
        }
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[4])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "warphero", "statscounter", 1);
        UnitCreate(1, "WarpHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[5])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "particlehero", "statscounter", 1);
        UnitCreate(1, "ParticleHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[6])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "twilighthero", "statscounter", 1);
        UnitCreate(1, "TwilightHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[7])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "timehero", "statscounter", 1);
        UnitCreate(1, "TimeHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[8])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "waterhero", "statscounter", 1);
        UnitCreate(1, "WaterHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[9])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "earthhero", "statscounter", 1);
        UnitCreate(1, "EarthHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[10])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "airhero", "statscounter", 1);
        UnitCreate(1, "AirHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[11])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "gravityhero", "statscounter", 1);
        UnitCreate(1, "GravityHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[12])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "gatewayhero", "statscounter", 1);
        UnitCreate(1, "GatewayHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[13])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "naturehero", "statscounter", 1);
        UnitCreate(1, "NatureHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[14])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "elementalhero", "statscounter", 1);
        UnitCreate(1, "ElementalHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[15])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "illusionhero", "statscounter", 1);
        UnitCreate(1, "IllusionHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[16])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "luckhero", "statscounter", 1);
        UnitCreate(1, "LuckHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
        gf_LuckOrbs(UnitLastCreated(), "OrbOfLuck", 4, EventPlayer(), 1.25, 3.0, 1.25);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[17])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "probehero", "statscounter", 1);
        UnitCreate(1, "ProbeHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[18])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "bladehero", "statscounter", 1);
        UnitCreate(1, "BladeHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    if ((EventDialogControl() == gv_zheropickdialogbuttons[19])) {
        gf_bankaddtoint(gv_zbanks[EventPlayer()], "beamhero", "statscounter", 1);
        UnitCreate(1, "BeamHero", 0, EventPlayer(), lv_spawnpoint, 270.0);
    }

    UnitBehaviorAdd(UnitLastCreated(), "CoopInitdelay", UnitLastCreated(), 1);
    if ((gv_mode == 0)) {
        gf_TeleportHideShow(UnitLastCreated());
    }

    UnitBehaviorAdd(UnitLastCreated(), "RestlessPassive", UnitLastCreated(), 1);
    if ((gv_difficulty < 2.0)) {
        UnitBehaviorAdd(UnitLastCreated(), "Easy", UnitLastCreated(), 1);
    }

    if ((gv_difficulty == 2.0)) {
        UnitBehaviorAdd(UnitLastCreated(), "Normal", UnitLastCreated(), 1);
    }

    if ((gv_difficulty == 3.0)) {
        UnitBehaviorAdd(UnitLastCreated(), "Hard", UnitLastCreated(), 1);
    }

    if ((gv_difficulty == 4.0)) {
        UnitBehaviorAdd(UnitLastCreated(), "Insane", UnitLastCreated(), 1);
    }

    if ((gv_difficulty == 5.0)) {
        UnitBehaviorAdd(UnitLastCreated(), "Legendary", UnitLastCreated(), 1);
    }

    gv_hero[(EventPlayer() - 1)] = UnitLastCreated();
    UnitControlGroupAddUnit(EventPlayer(), 1, gv_hero[(EventPlayer() - 1)]);
    gf_disguiseunit(UnitLastCreated(), EventPlayer());
    gf_rewardaddall(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pickhero_Init () {
    gt_pickhero = TriggerCreate("gt_pickhero_Func");
    TriggerAddEventDialogControl(gt_pickhero, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeleportDialogOpen
//--------------------------------------------------------------------------------------------------
bool gt_TeleportDialogOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ScreenButton(34) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mode == 1)) {
        if ((UnitGroupCount(UnitGroup("FireHero", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            UnitSetPosition(gv_hero[(EventPlayer() - 1)], UnitGetPosition(UnitGroupUnit(UnitGroup("FireHero", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1)), false);
        }

    }
    else {
        if ((DialogIsVisible(gv_teleportdialog, EventPlayer()) == true)) {
            DialogSetVisible(gv_teleportdialog, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gf_DialogHideAll(EventPlayer());
            DialogSetVisible(gv_teleportdialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleportDialogOpen_Init () {
    gt_TeleportDialogOpen = TriggerCreate("gt_TeleportDialogOpen_Func");
    TriggerAddEventDialogControl(gt_TeleportDialogOpen, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TeleportDialogButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_TeleportDialogButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_teleportdialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[0])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(243.0, 7.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[1])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(246.0, 56.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[2])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(185.0, 110.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[3])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(236.0, 190.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[4])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(177.0, 161.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[5])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(116.0, 141.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[6])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(68.0, 62.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[7])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(44.0, 107.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    if ((EventDialogControl() == gv_teleportdialogbuttons[8])) {
        UnitSetPosition(gv_hero[(EventPlayer() - 1)], Point(64.0, 194.0), false);
        CameraPan(EventPlayer(), UnitGetPosition(gv_hero[(EventPlayer() - 1)]), 0.0, -1, 10, false);
    }

    DialogSetVisible(gv_teleportdialog, PlayerGroupSingle(EventPlayer()), false);
    UnitBehaviorRemove(gv_hero[(EventPlayer() - 1)], "TimeHeroTimerift", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeleportDialogButtonPressed_Init () {
    gt_TeleportDialogButtonPressed = TriggerCreate("gt_TeleportDialogButtonPressed_Func");
    TriggerAddEventDialogControl(gt_TeleportDialogButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementMassacreCount
//--------------------------------------------------------------------------------------------------
bool gt_AchievementMassacreCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_pn;
    int lv_massacre;
    int lv_massacrexp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_pn = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_massacre = (gv_killsThisGame[EventPlayer()] - gv_zkillsincelastdeath[(lv_pn + 12)]);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerStatus(lv_pn) == c_playerStatusActive) && (lv_massacre >= 50)) {
        if ((lv_massacre >= 3245)) {
            lv_massacrexp = 50000;
        }
        else {
            lv_massacrexp = (PowI(IntToFixed(lv_massacre), 1.25)+500)*2;
        }
        TextTagCreate((StringExternal("Param/Value/4597945C") + IntToText(lv_massacre) + StringExternal("Param/Value/3ED85744") + IntToText(lv_massacrexp) + StringExternal("Param/Value/FC30C40A")), 44, CameraGetTarget(lv_pn), 1.0, true, false, PlayerGroupSingle(lv_pn));
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        gf_gainxp(IntToFixed(lv_massacrexp));
        gf_ChronoWave(lv_pn, lv_massacre);
        if ((PlayerStatus(lv_pn) == c_playerStatusActive) && (gv_difficulty >= 3.0)) {
            while ((gf_achievementgetvalueofnextlevel(45, lv_pn) <= lv_massacre)) {
                gf_achievementnew(lv_pn, 45);
            }
            if ((lv_massacre > gf_bankgetint(gv_zbanks[lv_pn], "m", "acm"))) {
                BankValueSetFromInt(gv_zbanks[lv_pn], "acm", "m", lv_massacre);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementMassacreCount_Init () {
    gt_AchievementMassacreCount = TriggerCreate("gt_AchievementMassacreCount_Func");
    TriggerAddEventPlayerEffectUsed(gt_AchievementMassacreCount, 1, "MassacreHelperRunOut");
    TriggerAddEventPlayerEffectUsed(gt_AchievementMassacreCount, 2, "MassacreHelperRunOut");
    TriggerAddEventPlayerEffectUsed(gt_AchievementMassacreCount, 3, "MassacreHelperRunOut");
    TriggerAddEventPlayerEffectUsed(gt_AchievementMassacreCount, 4, "MassacreHelperRunOut");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementChampionkill
//--------------------------------------------------------------------------------------------------
bool gt_AchievementChampionkill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zacmchampionkillcounter += 1;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            if ((gv_zacmchampionkillcounter >= gf_achievementgetvalueofnextlevel(48, lv_i))) {
                gf_achievementnew(lv_i, 48);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementChampionkill_Init () {
    gt_AchievementChampionkill = TriggerCreate("gt_AchievementChampionkill_Func");
    TriggerAddEventPlayerEffectUsed(gt_AchievementChampionkill, 6, "ChampionDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementDialogOpen
//--------------------------------------------------------------------------------------------------
bool gt_AchievementDialogOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ScreenButton(32) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_zachievementDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_zachievementDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gf_DialogHideAll(EventPlayer());
        gv_zachievementtarget[EventPlayer()] = EventPlayer();
        gf_achievementopen(EventPlayer(), EventPlayer());
        DialogSetVisible(gv_zachievementDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementDialogOpen_Init () {
    gt_AchievementDialogOpen = TriggerCreate("gt_AchievementDialogOpen_Func");
    TriggerAddEventDialogControl(gt_AchievementDialogOpen, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: achievementviewnext
//--------------------------------------------------------------------------------------------------
bool gt_achievementviewnext_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_zachievementDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zachievementtarget[EventPlayer()] += 1;
    while ((PlayerStatus(gv_zachievementtarget[EventPlayer()]) != c_playerStatusActive)) {
        gv_zachievementtarget[EventPlayer()] += 1;
        if ((gv_zachievementtarget[EventPlayer()] > 4)) {
            gv_zachievementtarget[EventPlayer()] = 1;
        }

    }
    gf_achievementopen(EventPlayer(), gv_zachievementtarget[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_achievementviewnext_Init () {
    gt_achievementviewnext = TriggerCreate("gt_achievementviewnext_Func");
    TriggerAddEventDialogControl(gt_achievementviewnext, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementRestlessEnd
//--------------------------------------------------------------------------------------------------
bool gt_AchievementRestlessEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zacmrestless[(lv_pn - 1)] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementRestlessEnd_Init () {
    gt_AchievementRestlessEnd = TriggerCreate("gt_AchievementRestlessEnd_Func");
    TriggerAddEventPlayerEffectUsed(gt_AchievementRestlessEnd, c_playerAny, "RestlessExpire");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementTreasure
//--------------------------------------------------------------------------------------------------
bool gt_AchievementTreasure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_zacmTreasures = (gv_zacmTreasures + 1);
    gf_gainrewardbonusall(10);
    if ((gv_zacmTreasures == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(1, "GasPickupTextDummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(2, "GasPickupTextDummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(3, "GasPickupTextDummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(4, "GasPickupTextDummy", 1);
        gf_achievementPossiblyGainedTeam(72, FixedToInt(gv_difficulty));
        gf_gainrewardbonusall(10);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0BBFDE25"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BACE3218"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementTreasure_Init () {
    gt_AchievementTreasure = TriggerCreate("gt_AchievementTreasure_Func");
    TriggerAddEventPlayerEffectUsed(gt_AchievementTreasure, c_playerAny, "VoidPickupGas100Set");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AchievementRestlessStart
//--------------------------------------------------------------------------------------------------
bool gt_AchievementRestlessStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pn = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_zacmrestless[(lv_pn - 1)] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AchievementRestlessStart_Init () {
    gt_AchievementRestlessStart = TriggerCreate("gt_AchievementRestlessStart_Func");
    TriggerAddEventPlayerEffectUsed(gt_AchievementRestlessStart, c_playerAny, "RestlessApply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: achievementRestless
//--------------------------------------------------------------------------------------------------
bool gt_achievementRestless_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true){
        lv_i=0;
        while(lv_i<4){
        
            
    if ((gv_zacmrestless[lv_i] > 0)) {
        gv_zacmrestless[lv_i] += 1;
    }

    gf_achievementPossiblyGainedSolo(64, gv_zacmrestless[lv_i], lv_i+1);
        lv_i+=1;
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_achievementRestless_Init () {
    gt_achievementRestless = TriggerCreate("gt_achievementRestless_Func");
    TriggerAddEventTimeElapsed(gt_achievementRestless, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradeDialogOpen
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeDialogOpen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ScreenButton(35) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_upgradedialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_upgradedialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gf_DialogHideAll(EventPlayer());
        DialogSetVisible(gv_upgradedialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetTitle(gv_upgradedialog, (StringExternal("Param/Value/1832D43F") + IntToText(gv_upgradesAvailable)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeDialogOpen_Init () {
    gt_UpgradeDialogOpen = TriggerCreate("gt_UpgradeDialogOpen_Func");
    TriggerAddEventDialogControl(gt_UpgradeDialogOpen, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradeDialogButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeDialogButtonPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_upgradesAvailable >= 1))) {
            return false;
        }

        if (!((DialogControlGetDialog(EventDialogControl()) == gv_upgradedialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[0][0]) && (TechTreeUpgradeCount(5, "StructureAttackSpeed", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "StructureAttackSpeed", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "StructureAttackSpeed", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/A9C63A25") + IntToText((TechTreeUpgradeCount(5, "StructureAttackSpeed", c_techCountQueuedOrBetter) * 3)) + StringToText("") + StringExternal("Param/Value/C5A16332")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/69D79F8C") + IntToText((TechTreeUpgradeCount(5, "StructureAttackSpeed", c_techCountQueuedOrBetter) * 3)) + StringExternal("Param/Value/8ABC54CF")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[1][0]) && (TechTreeUpgradeCount(5, "StructureShieldArmor", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "StructureShieldArmor", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "StructureShieldArmor", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), StringExternal("Param/Value/9DB08B5E"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/39AC7510") + IntToText(TechTreeUpgradeCount(5, "StructureShieldArmor", c_techCountQueuedOrBetter)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[2][0]) && (TechTreeUpgradeCount(5, "StructureArmor", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "StructureArmor", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "StructureArmor", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), StringExternal("Param/Value/E5F09039"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/B7AAC0A1") + IntToText(TechTreeUpgradeCount(5, "StructureArmor", c_techCountQueuedOrBetter)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[3][0]) && (TechTreeUpgradeCount(5, "StructureShieldRegeneration", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(5, "StructureShieldRegeneration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "StructureShieldRegeneration", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/4E81C3DC") + IntToText((TechTreeUpgradeCount(5, "StructureShieldRegeneration", c_techCountQueuedOrBetter) * 2)) + StringToText("") + StringExternal("Param/Value/C4EFA0D1")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/EBDFE929") + IntToText((TechTreeUpgradeCount(5, "StructureShieldRegeneration", c_techCountQueuedOrBetter) * 2)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((TechTreeUpgradeCount(5, "StructureHealthRegeneration", c_techCountQueuedOrBetter) < 5) && (EventDialogControl() == gv_upgradedialogbuttons[4][0])) {
        TechTreeUpgradeAddLevel(5, "StructureHealthRegeneration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "StructureHealthRegeneration", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/5FBD4553") + IntToText(TechTreeUpgradeCount(5, "StructureHealthRegeneration", c_techCountQueuedOrBetter)) + StringToText("") + StringExternal("Param/Value/7035CEDA")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/FD8366E3") + IntToText(TechTreeUpgradeCount(5, "StructureHealthRegeneration", c_techCountQueuedOrBetter)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((TechTreeUpgradeCount(5, "OverchargeDuration", c_techCountQueuedOrBetter) < 10) && (EventDialogControl() == gv_upgradedialogbuttons[5][0])) {
        TechTreeUpgradeAddLevel(5, "OverchargeDuration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "OverchargeDuration", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/0CA70124") + IntToText((TechTreeUpgradeCount(5, "OverchargeDuration", c_techCountQueuedOrBetter) * 2)) + StringToText("") + StringExternal("Param/Value/88ED77E7")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/00991C78") + IntToText((TechTreeUpgradeCount(5, "OverchargeDuration", c_techCountQueuedOrBetter) * 2)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[6][0]) && (TechTreeUpgradeCount(5, "OverchargeRange", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(5, "OverchargeRange", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "OverchargeRange", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/8D62E032") + IntToText(TechTreeUpgradeCount(5, "OverchargeRange", c_techCountQueuedOrBetter)) + StringToText("") + StringExternal("Param/Value/40FA2615")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/95861AB0") + IntToText(TechTreeUpgradeCount(5, "OverchargeRange", c_techCountQueuedOrBetter)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[0][1]) && (TechTreeUpgradeCount(5, "UnitMovementSpeed", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "UnitMovementSpeed", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitMovementSpeed", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/579A73BD") + FixedToText((TechTreeUpgradeCount(5, "UnitMovementSpeed", c_techCountQueuedOrBetter) * 0.1), 1) + StringToText("") + StringExternal("Param/Value/AB79908D")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/1278E4C7") + FixedToText((TechTreeUpgradeCount(5, "UnitMovementSpeed", c_techCountQueuedOrBetter) * 0.1), 1) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[1][1]) && (TechTreeUpgradeCount(5, "UnitAttackSpeed", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "UnitAttackSpeed", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitAttackSpeed", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/C465FE2B") + IntToText((TechTreeUpgradeCount(5, "UnitAttackSpeed", c_techCountQueuedOrBetter) * 3)) + StringExternal("Param/Value/92FFB31B") + StringExternal("Param/Value/3C5ABD54")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/6DD6C509") + IntToText((TechTreeUpgradeCount(5, "UnitAttackSpeed", c_techCountQueuedOrBetter) * 3)) + StringExternal("Param/Value/E0491912")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[2][1]) && (TechTreeUpgradeCount(5, "UnitEnergyStartingAmount", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "UnitEnergyStartingAmount", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitEnergyStartingAmount", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/14C2B954") + IntToText((TechTreeUpgradeCount(5, "UnitEnergyStartingAmount", c_techCountQueuedOrBetter) * 5)) + StringToText("") + StringExternal("Param/Value/C407D547")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/F535010F") + IntToText((TechTreeUpgradeCount(5, "UnitEnergyStartingAmount", c_techCountQueuedOrBetter) * 5)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[3][1]) && (TechTreeUpgradeCount(5, "UnitEnergyRegeneration", c_techCountQueuedOrBetter) < 10)) {
        TechTreeUpgradeAddLevel(5, "UnitEnergyRegeneration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitEnergyRegeneration", c_techCountQueuedOrBetter) == 10)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/C348A7A4") + FixedToText((TechTreeUpgradeCount(5, "UnitEnergyRegeneration", c_techCountQueuedOrBetter) * 0.05), 1) + StringToText("") + StringExternal("Param/Value/41A0A5E4")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/0DD438D6") + FixedToText((TechTreeUpgradeCount(5, "UnitEnergyRegeneration", c_techCountQueuedOrBetter) * 0.05), 2) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[4][1]) && (TechTreeUpgradeCount(5, "UnitEnergyMaximum", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(5, "UnitEnergyMaximum", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitEnergyMaximum", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/C64EA804") + IntToText((TechTreeUpgradeCount(5, "UnitEnergyMaximum", c_techCountQueuedOrBetter) * 10)) + StringToText("") + StringExternal("Param/Value/52B9FED5")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/3D266B85") + IntToText((TechTreeUpgradeCount(5, "UnitEnergyMaximum", c_techCountQueuedOrBetter) * 10)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[5][1]) && (TechTreeUpgradeCount(5, "UnitShieldRegeneration", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(5, "UnitShieldRegeneration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitShieldRegeneration", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/EE727815") + IntToText((TechTreeUpgradeCount(5, "UnitShieldRegeneration", c_techCountQueuedOrBetter) * 2)) + StringToText("") + StringExternal("Param/Value/BA17C18C")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/D2CEAEC5") + IntToText((TechTreeUpgradeCount(5, "UnitShieldRegeneration", c_techCountQueuedOrBetter) * 2)) + StringToText("")), PlayerGroupAll());
        }
    }

    if ((EventDialogControl() == gv_upgradedialogbuttons[6][1]) && (TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) < 5)) {
        TechTreeUpgradeAddLevel(5, "UnitHealthRegeneration", 1);
        gv_upgradesAvailable -= 1;
        if ((TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) == 5)) {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/09CCCE99") + IntToText((TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) * 1)) + StringToText("") + StringExternal("Param/Value/3F14BD87")), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(EventDialogControl(), (StringExternal("Param/Value/2FABEC17") + IntToText((TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) * 1)) + StringToText("")), PlayerGroupAll());
        }
    }

    DialogSetTitle(gv_upgradedialog, (StringExternal("Param/Value/08ACDE90") + IntToText(gv_upgradesAvailable)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeDialogButtonPressed_Init () {
    gt_UpgradeDialogButtonPressed = TriggerCreate("gt_UpgradeDialogButtonPressed_Func");
    TriggerAddEventDialogControl(gt_UpgradeDialogButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradeDialogButtonPressedAuto
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeDialogButtonPressedAuto_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_upgradedialog))) {
            return false;
        }

        if (!((EventDialogControl() == gv_upgradedialogbuttons[7][0]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_upgradedialog, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(libNtve_gf_ScreenButton(35), PlayerGroupAll(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(EventPlayer()) + StringExternal("Param/Value/BF246860")));
    TriggerExecute(gt_UpgradesDiffEasyAuto, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeDialogButtonPressedAuto_Init () {
    gt_UpgradeDialogButtonPressedAuto = TriggerCreate("gt_UpgradeDialogButtonPressedAuto_Func");
    TriggerAddEventDialogControl(gt_UpgradeDialogButtonPressedAuto, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UpgradesDiffEasyAuto
//--------------------------------------------------------------------------------------------------
bool gt_UpgradesDiffEasyAuto_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while(true){
    if ((gv_upgradesAvailable > 0)) {
        if ((TechTreeUpgradeCount(5, "StructureAttackSpeed", c_techCountQueuedOrBetter) < 10)) {
            TechTreeUpgradeAddLevel(5, "StructureAttackSpeed", 1);
        }
        else {
            if ((TechTreeUpgradeCount(5, "StructureShieldArmor", c_techCountQueuedOrBetter) < 10)) {
                TechTreeUpgradeAddLevel(5, "StructureShieldArmor", 1);
            }
            else {
                if ((TechTreeUpgradeCount(5, "StructureArmor", c_techCountQueuedOrBetter) < 10)) {
                    TechTreeUpgradeAddLevel(5, "StructureArmor", 1);
                }
                else {
                    if ((TechTreeUpgradeCount(5, "StructureShieldRegeneration", c_techCountQueuedOrBetter) < 5)) {
                        TechTreeUpgradeAddLevel(5, "StructureShieldRegeneration", 1);
                    }
                    else {
                        if ((TechTreeUpgradeCount(5, "StructureHealthRegeneration", c_techCountQueuedOrBetter) < 5)) {
                            TechTreeUpgradeAddLevel(5, "StructureHealthRegeneration", 1);
                        }
                        else {
                            if ((TechTreeUpgradeCount(5, "OverchargeDuration", c_techCountQueuedOrBetter) < 10)) {
                                TechTreeUpgradeAddLevel(5, "OverchargeDuration", 1);
                            }
                            else {
                                if ((TechTreeUpgradeCount(5, "OverchargeRange", c_techCountQueuedOrBetter) < 5)) {
                                    TechTreeUpgradeAddLevel(5, "OverchargeRange", 1);
                                }
                                else {
                                    if ((TechTreeUpgradeCount(5, "UnitMovementSpeed", c_techCountQueuedOrBetter) < 10)) {
                                        TechTreeUpgradeAddLevel(5, "UnitMovementSpeed", 1);
                                    }
                                    else {
                                        if ((TechTreeUpgradeCount(5, "UnitAttackSpeed", c_techCountQueuedOrBetter) < 10)) {
                                            TechTreeUpgradeAddLevel(5, "UnitAttackSpeed", 1);
                                        }
                                        else {
                                            if ((TechTreeUpgradeCount(5, "UnitEnergyStartingAmount", c_techCountQueuedOrBetter) < 10)) {
                                                TechTreeUpgradeAddLevel(5, "UnitEnergyStartingAmount", 1);
                                            }
                                            else {
                                                if ((TechTreeUpgradeCount(5, "UnitEnergyRegeneration", c_techCountQueuedOrBetter) < 10)) {
                                                    TechTreeUpgradeAddLevel(5, "UnitEnergyRegeneration", 1);
                                                }
                                                else {
                                                    if ((TechTreeUpgradeCount(5, "UnitEnergyMaximum", c_techCountQueuedOrBetter) < 5)) {
                                                        TechTreeUpgradeAddLevel(5, "UnitEnergyMaximum", 1);
                                                    }
                                                    else {
                                                        if ((TechTreeUpgradeCount(5, "UnitShieldRegeneration", c_techCountQueuedOrBetter) < 5)) {
                                                            TechTreeUpgradeAddLevel(5, "UnitShieldRegeneration", 1);
                                                        }
                                                        else {
                                                            if ((TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) < 5)) {
                                                                TechTreeUpgradeAddLevel(5, "UnitHealthRegeneration", 1);
                                                                if ((TechTreeUpgradeCount(5, "UnitHealthRegeneration", c_techCountQueuedOrBetter) == 5)) {
                                                                    gv_upgradesAvailable -= 1;
                                                                    return true;
                                                                }

                                                            }

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        gv_upgradesAvailable -= 1;
    }

    Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradesDiffEasyAuto_Init () {
    gt_UpgradesDiffEasyAuto = TriggerCreate("gt_UpgradesDiffEasyAuto_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: talenttest
//--------------------------------------------------------------------------------------------------
bool gt_talenttest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentpointsavailable[0] += 100;
    gv_talentpointsavailable[1] += 100;
    gv_talentpointsavailable[2] += 100;
    gv_talentpointsavailable[3] += 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_talenttest_Init () {
    gt_talenttest = TriggerCreate("gt_talenttest_Func");
    TriggerAddEventChatMessage(gt_talenttest, c_playerAny, "talenttest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: rewardtest
//--------------------------------------------------------------------------------------------------
bool gt_rewardtest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_rewardUnspend[1] += 10000;
    gv_rewardUnspend[2] += 10000;
    gv_rewardUnspend[3] += 10000;
    gv_rewardUnspend[4] += 10000;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rewardtest_Init () {
    gt_rewardtest = TriggerCreate("gt_rewardtest_Func");
    TriggerAddEventChatMessage(gt_rewardtest, c_playerAny, "rewardtest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: killtest
//--------------------------------------------------------------------------------------------------
bool gt_killtest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_blub;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blub = UnitGroup(null, 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-4088642")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitGroupCount(lv_blub, c_unitCountAll) > 0)) {
        UnitKill(UnitGroupUnit(lv_blub, 1));
        UnitGroupRemove(lv_blub, UnitGroupUnit(lv_blub, 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_killtest_Init () {
    gt_killtest = TriggerCreate("gt_killtest_Func");
    TriggerAddEventChatMessage(gt_killtest, c_playerAny, "killtest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgradetest
//--------------------------------------------------------------------------------------------------
bool gt_upgradetest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_upgradesAvailable += 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradetest_Init () {
    gt_upgradetest = TriggerCreate("gt_upgradetest_Func");
    TriggerAddEventChatMessage(gt_upgradetest, c_playerAny, "upgradetest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: alliancetest
//--------------------------------------------------------------------------------------------------
bool gt_alliancetest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-4088642")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetAlliance(1, 5, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
    libNtve_gf_SetAllianceOneWay(6, 1, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_alliancetest_Init () {
    gt_alliancetest = TriggerCreate("gt_alliancetest_Func");
    TriggerAddEventChatMessage(gt_alliancetest, c_playerAny, "alliancetest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: distancetest
//--------------------------------------------------------------------------------------------------
bool gt_distancetest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(240.0, 57.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(180.0, 114.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(230.0, 180.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(170.0, 163.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(116.0, 140.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(66.0, 60.0), Point(240.0, 10.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(PointPathingCost(Point(214.0, 12.0), Point(240.0, 10.0))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_distancetest_Init () {
    gt_distancetest = TriggerCreate("gt_distancetest_Func");
    TriggerAddEventChatMessage(gt_distancetest, c_playerAny, "distancetest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: xptest
//--------------------------------------------------------------------------------------------------
bool gt_xptest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-4088642") || (PlayerHandle(EventPlayer()) == "2-S2-1-4436915")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_gainxp(100000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_xptest_Init () {
    gt_xptest = TriggerCreate("gt_xptest_Func");
    TriggerAddEventChatMessage(gt_xptest, c_playerAny, "xptest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: xptest 2
//--------------------------------------------------------------------------------------------------
bool gt_xptest2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-4088642")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_gainxp(250000.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_xptest2_Init () {
    gt_xptest2 = TriggerCreate("gt_xptest2_Func");
    TriggerAddEventChatMessage(gt_xptest2, c_playerAny, "xptest2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: xptest 3
//--------------------------------------------------------------------------------------------------
bool gt_xptest3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9FAA0B26_n = 50;
    int auto9FAA0B26_i;

    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "2-S2-1-253101") || (PlayerHandle(EventPlayer()) == "") || (PlayerHandle(EventPlayer()) == "1-S2-1-4088642")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto9FAA0B26_i = 1; auto9FAA0B26_i <= auto9FAA0B26_n; auto9FAA0B26_i += 1) {
        Wait(0.5, c_timeGame);
        gf_gainxp(250000.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_xptest3_Init () {
    gt_xptest3 = TriggerCreate("gt_xptest3_Func");
    TriggerAddEventChatMessage(gt_xptest3, c_playerAny, "xptest3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: restorerewards
//--------------------------------------------------------------------------------------------------
bool gt_restorerewards_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = StringToInt(StringSub(EventChatMessage(false), 16, 17));
    lv_j = StringToInt(StringSub(EventChatMessage(false), 18, 26));

    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F6189354"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lv_i));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(lv_j));
    if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
        gf_rewardgainpoints(lv_i, lv_j, 5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_restorerewards_Init () {
    gt_restorerewards = TriggerCreate("gt_restorerewards_Func");
    TriggerAddEventChatMessage(gt_restorerewards, c_playerAny, "restorerewards", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: forcereset
//--------------------------------------------------------------------------------------------------
bool gt_forcereset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = StringToInt(StringSub(EventChatMessage(false), 12, 13));

    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D26E369D"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lv_i));
    if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
        BankSectionRemove(gv_zbanks[lv_i], "completeruns");
        BankSectionRemove(gv_zbanks[lv_i], "acm");
        BankSectionRemove(gv_zbanks[lv_i], "time");
        gv_zachievementscounterstart[(lv_i + 4)] = 0;
        gv_zachievementscounterstart[lv_i] = 0;
        gv_rewardaccumulated[lv_i] = 0;
        gv_rewardUnspend[lv_i] = 0;
        gv_questAchLevel[lv_i] = 0;
        gv_killsThisGame[lv_i] = 0;
        gv_zquestssolved = 0;
        gv_killAchLevel[lv_i] = 0;
        gf_rewardreset(lv_i);
        gf_banksetc(lv_i, gv_zbanks[lv_i]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_forcereset_Init () {
    gt_forcereset = TriggerCreate("gt_forcereset_Func");
    TriggerAddEventChatMessage(gt_forcereset, c_playerAny, "forcereset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: restoreachievm
//--------------------------------------------------------------------------------------------------
bool gt_restoreachievm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_ach;
    int lv_level;
    int lv_wins;
    int lv_i;

    // Automatic Variable Declarations
    int autoC11EDB97_val;
    int autoF6C7C7ED_val;
    int auto4EBD45D3_val;
    int auto60847657_val;

    // Variable Initialization
    lv_player = StringToInt(StringSub(EventChatMessage(false), 16, 17));
    lv_ach = StringToInt(StringSub(EventChatMessage(false), 18, 20));
    lv_level = StringToInt(StringSub(EventChatMessage(false), 21, 22));

    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D55FF13C"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lv_player));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(lv_ach));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(lv_level));
    if ((lv_ach == 7)) {
        autoC11EDB97_val = lv_level;
        if (autoC11EDB97_val == 1) {
            gv_zachievementscounterstart[lv_player] = 100;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "7", 100);
        }
        else if (autoC11EDB97_val == 2) {
            gv_zachievementscounterstart[lv_player] = 1000;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "7", 1000);
        }
        else if (autoC11EDB97_val == 3) {
            gv_zachievementscounterstart[lv_player] = 10000;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "7", 10000);
        }
        else if (autoC11EDB97_val == 4) {
            gv_zachievementscounterstart[lv_player] = 100000;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "7", 100000);
        }
        else if (autoC11EDB97_val == 5) {
            if ((gv_zachievementscounterstart[lv_player] < 1000000)) {
                gv_zachievementscounterstart[lv_player] = 1000000;
                BankValueSetFromInt(gv_zbanks[lv_player], "acm", "7", 1000000);
            }

        }
        else {
        }
        BankSave(gv_zbanks[lv_player]);
    }

    if ((lv_ach == 8)) {
        autoF6C7C7ED_val = lv_level;
        if (autoF6C7C7ED_val == 1) {
            gv_zachievementscounterstart[(lv_player + 4)] = 10;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "8", 10);
        }
        else if (autoF6C7C7ED_val == 2) {
            gv_zachievementscounterstart[(lv_player + 4)] = 100;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "8", 100);
        }
        else if (autoF6C7C7ED_val == 3) {
            gv_zachievementscounterstart[(lv_player + 4)] = 1000;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "8", 1000);
        }
        else if (autoF6C7C7ED_val == 4) {
            gv_zachievementscounterstart[(lv_player + 4)] = 10000;
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "8", 10000);
        }
        else if (autoF6C7C7ED_val == 5) {
            if ((gv_zachievementscounterstart[(lv_player + 4)] < 100000)) {
                gv_zachievementscounterstart[(lv_player + 4)] = 100000;
                BankValueSetFromInt(gv_zbanks[lv_player], "acm", "8", 100000);
            }

        }
        else {
        }
        BankSave(gv_zbanks[lv_player]);
    }

    if ((lv_ach == 45)) {
        auto4EBD45D3_val = lv_level;
        if (auto4EBD45D3_val == 1) {
            lv_i = 100;
        }
        else if (auto4EBD45D3_val == 2) {
            lv_i = 250;
        }
        else if (auto4EBD45D3_val == 3) {
            lv_i = 500;
        }
        else if (auto4EBD45D3_val == 4) {
            lv_i = 1000;
        }
        else if (auto4EBD45D3_val == 5) {
            lv_i = 2000;
        }
        else {
        }
        if ((gf_bankgetint(gv_zbanks[lv_player], "m", "acm") < lv_i)) {
            BankValueSetFromInt(gv_zbanks[lv_player], "acm", "m", lv_i);
            BankSave(gv_zbanks[lv_player]);
        }

    }

    if ((lv_ach == 39)) {
        lv_wins = (gf_bankgetint(gv_zbanks[lv_player], "1", "completeruns") + gf_bankgetint(gv_zbanks[lv_player], "2", "completeruns") + gf_bankgetint(gv_zbanks[lv_player], "3", "completeruns") + gf_bankgetint(gv_zbanks[lv_player], "4", "completeruns") + gf_bankgetint(gv_zbanks[lv_player], "5", "completeruns"));
        auto60847657_val = lv_level;
        if (auto60847657_val == 1) {
            lv_i = 50;
        }
        else if (auto60847657_val == 2) {
            lv_i = 100;
        }
        else if (auto60847657_val == 3) {
            lv_i = 150;
        }
        else if (auto60847657_val == 4) {
            lv_i = 200;
        }
        else if (auto60847657_val == 5) {
            lv_i = 250;
        }
        else {
        }
        if ((lv_wins < lv_i)) {
            gf_bankaddtoint(gv_zbanks[lv_player], "1", "completeruns", (lv_i - lv_wins));
            BankSave(gv_zbanks[lv_player]);
        }

    }

    while ((gf_achievementgetlevel(lv_player, lv_ach) < lv_level)) {
        gf_achievementnew(lv_player, lv_ach);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_restoreachievm_Init () {
    gt_restoreachievm = TriggerCreate("gt_restoreachievm_Func");
    TriggerAddEventChatMessage(gt_restoreachievm, c_playerAny, "restoreachievm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: restoreacmname
//--------------------------------------------------------------------------------------------------
bool gt_restoreacmname_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_i = StringToInt(StringSub(EventChatMessage(false), 16, 17));
    lv_j = StringToInt(StringSub(EventChatMessage(false), 18, 20));

    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, PlayerName(lv_i));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, gf_achievementgettext(true, lv_j));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_restoreacmname_Init () {
    gt_restoreacmname = TriggerCreate("gt_restoreacmname_Func");
    TriggerAddEventChatMessage(gt_restoreacmname, c_playerAny, "restoreacmname", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawnunit
//--------------------------------------------------------------------------------------------------
bool gt_spawnunit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_name;
    string lv_unittype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringReplaceWord(EventChatMessage(false), "-spawn ", "", c_stringReplaceAll, c_stringCase);
    lv_unittype = UnitTypeFromString(lv_name);

    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_unittype == null)) {
    }
    else {
        UnitCreate(1, lv_unittype, 0, 6, gf_BossSpawnLocation(), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnunit_Init () {
    gt_spawnunit = TriggerCreate("gt_spawnunit_Func");
    TriggerAddEventChatMessage(gt_spawnunit, c_playerAny, "-spawn ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: chaos
//--------------------------------------------------------------------------------------------------
bool gt_chaos_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DoomLord8(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_chaos_Init () {
    gt_chaos = TriggerCreate("gt_chaos_Func");
    TriggerAddEventChatMessage(gt_chaos, c_playerAny, "chaostest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: extinction
//--------------------------------------------------------------------------------------------------
bool gt_extinction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ExtinctionLord(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_extinction_Init () {
    gt_extinction = TriggerCreate("gt_extinction_Func");
    TriggerAddEventChatMessage(gt_extinction, c_playerAny, "extinctiontest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: horror
//--------------------------------------------------------------------------------------------------
bool gt_horror_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DoomLord9(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_horror_Init () {
    gt_horror = TriggerCreate("gt_horror_Func");
    TriggerAddEventChatMessage(gt_horror, c_playerAny, "horrortest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: mind
//--------------------------------------------------------------------------------------------------
bool gt_mind_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DoomLord19(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_mind_Init () {
    gt_mind = TriggerCreate("gt_mind_Func");
    TriggerAddEventChatMessage(gt_mind, c_playerAny, "mindtest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hive
//--------------------------------------------------------------------------------------------------
bool gt_hive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_isMod(PlayerHandle(EventPlayer())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DoomLord4(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_hive_Init () {
    gt_hive = TriggerCreate("gt_hive_Func");
    TriggerAddEventChatMessage(gt_hive, c_playerAny, "hivetest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: showstats
//--------------------------------------------------------------------------------------------------
bool gt_showstats_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_showstatwindow(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showstats_Init () {
    gt_showstats = TriggerCreate("gt_showstats_Func");
    TriggerAddEventChatMessage(gt_showstats, c_playerAny, "showstats", true);
    TriggerAddEventChatMessage(gt_showstats, c_playerAny, "Showstats", true);
    TriggerAddEventChatMessage(gt_showstats, c_playerAny, "-Showstats", true);
    TriggerAddEventChatMessage(gt_showstats, c_playerAny, "-showstats", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: showstatsclose
//--------------------------------------------------------------------------------------------------
bool gt_showstatsclose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((DialogControlGetDialog(EventDialogControl()) == gv_zstatsdialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_zstatsdialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showstatsclose_Init () {
    gt_showstatsclose = TriggerCreate("gt_showstatsclose_Func");
    TriggerAddEventDialogControl(gt_showstatsclose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: stickselect
//--------------------------------------------------------------------------------------------------
bool gt_stickselect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if(gv_zstickselect[EventPlayer()]){gv_zstickselect[EventPlayer()]=false;gf_bankaddtoint(gv_zbanks[EventPlayer()],"ps","option",-1);}
    else{gf_bankaddtoint(gv_zbanks[EventPlayer()],"ps","option",1);gv_zstickselect[EventPlayer()]=true;gf_chatcommandstickselect(EventPlayer());}
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/27A46CCE"));
    if ((gv_zstickselect[EventPlayer()] == true)) {
        PlayerOptionOverride(EventPlayer(), "selectuncontrolable", "0");
    }
    else {
        PlayerOptionOverride(EventPlayer(), "selectuncontrolable", "1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_stickselect_Init () {
    gt_stickselect = TriggerCreate("gt_stickselect_Func");
    TriggerAddEventChatMessage(gt_stickselect, c_playerAny, "-powerselect", true);
    TriggerAddEventChatMessage(gt_stickselect, c_playerAny, "-ps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: gametime
//--------------------------------------------------------------------------------------------------
bool gt_gametime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, gf_gametime(gv_zgametime[3]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gametime_Init () {
    gt_gametime = TriggerCreate("gt_gametime_Func");
    TriggerAddEventChatMessage(gt_gametime, c_playerAny, "-gametime", true);
    TriggerAddEventChatMessage(gt_gametime, c_playerAny, "-gt", true);
    TriggerAddEventChatMessage(gt_gametime, c_playerAny, "gt", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: displayhandle
//--------------------------------------------------------------------------------------------------
bool gt_displayhandle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_n;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_n < 4)) {
        lv_n += 1;
        if ((PlayerStatus(lv_n) == c_playerStatusActive)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (PlayerName(lv_n) + StringExternal("Param/Value/B84D8E6F") + StringToText(PlayerHandle(lv_n))));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_displayhandle_Init () {
    gt_displayhandle = TriggerCreate("gt_displayhandle_Func");
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "-handle", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "-h", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "handle", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "playerid", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "-playerid", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "-player id", true);
    TriggerAddEventChatMessage(gt_displayhandle, c_playerAny, "player id", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: xpfactor
//--------------------------------------------------------------------------------------------------
bool gt_xpfactor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, FixedToText(gv_xpboost, 3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_xpfactor_Init () {
    gt_xpfactor = TriggerCreate("gt_xpfactor_Func");
    TriggerAddEventChatMessage(gt_xpfactor, c_playerAny, "xpfactor", true);
    TriggerAddEventChatMessage(gt_xpfactor, c_playerAny, "-xpfactor", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: clear
//--------------------------------------------------------------------------------------------------
bool gt_clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(gv_zcleargroup, EventPlayer()) == true)) {
        PlayerGroupRemove(gv_zcleargroup, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/ED02440F"));
    }
    else {
        PlayerGroupAdd(gv_zcleargroup, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/25130611"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_clear_Init () {
    gt_clear = TriggerCreate("gt_clear_Func");
    TriggerAddEventChatMessage(gt_clear, c_playerAny, "-c", true);
    TriggerAddEventChatMessage(gt_clear, c_playerAny, "-clear", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: initstatwindow
//--------------------------------------------------------------------------------------------------
bool gt_initstatwindow_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_j;
    int lv_p;
    int[21] lv_labels;
    string lv_tstring;

    // Automatic Variable Declarations
    int autoCF7721DF_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_labels[init_i] = c_invalidDialogControlId;
    }
    lv_tstring = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(350, 750, c_anchorTopLeft, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_zstatsdialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 100, StringExternal("Param/Value/DA45D0B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 125, StringExternal("Param/Value/BD27CCF0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/BD90A4E2"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 175, StringExternal("Param/Value/B81DAA4F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 200, StringExternal("Param/Value/1CB120B4"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 225, StringExternal("Param/Value/B2585605"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 250, StringExternal("Param/Value/83840A18"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 275, StringExternal("Param/Value/FB5932D6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 300, StringExternal("Param/Value/14D1660D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 325, StringExternal("Param/Value/5F99A612"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 350, StringExternal("Param/Value/728BCA60"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 375, StringExternal("Param/Value/6396B7FF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 400, StringExternal("Param/Value/594CD4DA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 425, StringExternal("Param/Value/BA557C98"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 450, StringExternal("Param/Value/78AB9383"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 475, StringExternal("Param/Value/FBD7F74E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 500, StringExternal("Param/Value/21CFFE57"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 525, StringExternal("Param/Value/1DC0D8F3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 550, StringExternal("Param/Value/406431EB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 575, StringExternal("Param/Value/CA66DD70"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 150, 50, c_anchorTopLeft, 50, 600, StringExternal("Param/Value/0450D8AB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 150, 50, c_anchorTopLeft, 50, 695, StringExternal("Param/Value/97B2DC20"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50, 645, StringExternal("Param/Value/A6709D11"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(gv_zstatsdialog, 35, 35, c_anchorTopRight, 25, 25, StringToText(""), StringExternal("Param/Value/E3757C1A"), "");
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            DialogSetSize(gv_zstatsdialog, 200+(150*lv_i), 750);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 200, 50, c_anchorTopLeft, 50+(150*lv_i), 60, PlayerName(lv_i), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 100, IntToText(gf_bankgetint(gv_zbanks[lv_i], "firehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 125, IntToText(gf_bankgetint(gv_zbanks[lv_i], "lightninghero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 150, IntToText(gf_bankgetint(gv_zbanks[lv_i], "poisonhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 175, IntToText(gf_bankgetint(gv_zbanks[lv_i], "warphero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 200, IntToText(gf_bankgetint(gv_zbanks[lv_i], "particlehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 225, IntToText(gf_bankgetint(gv_zbanks[lv_i], "timehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 250, IntToText(gf_bankgetint(gv_zbanks[lv_i], "twilighthero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 275, IntToText(gf_bankgetint(gv_zbanks[lv_i], "shadowhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 300, IntToText(gf_bankgetint(gv_zbanks[lv_i], "probehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 325, IntToText(gf_bankgetint(gv_zbanks[lv_i], "beamhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 350, IntToText(gf_bankgetint(gv_zbanks[lv_i], "waterhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 375, IntToText(gf_bankgetint(gv_zbanks[lv_i], "earthhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 400, IntToText(gf_bankgetint(gv_zbanks[lv_i], "airhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 425, IntToText(gf_bankgetint(gv_zbanks[lv_i], "naturehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 450, IntToText(gf_bankgetint(gv_zbanks[lv_i], "illusionhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 475, IntToText(gf_bankgetint(gv_zbanks[lv_i], "bladehero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 500, IntToText(gf_bankgetint(gv_zbanks[lv_i], "luckhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 525, IntToText(gf_bankgetint(gv_zbanks[lv_i], "elementalhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 550, IntToText(gf_bankgetint(gv_zbanks[lv_i], "gravityhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 75, 50, c_anchorTopLeft, 50+(150*lv_i), 575, IntToText(gf_bankgetint(gv_zbanks[lv_i], "gatewayhero", "statscounter")), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_j = 5;
            while ((lv_j > 0)) {
                if (((gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns") != 0))) {
                    libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 150, 50, c_anchorTopLeft, 50+(150*lv_i), 600, gf_difficultytotex2(lv_j), ColorWithAlpha(0,0,0,0), false, 2.0);
                    while ((lv_j > 0)) {
                        autoCF7721DF_val = lv_j;
                        if (autoCF7721DF_val == 5) {
                            lv_tstring = (lv_tstring + "<n/>" + "Legendary: " + IntToString(gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns")));
                        }
                        else if (autoCF7721DF_val == 4) {
                            lv_tstring = (lv_tstring + "<n/>" + "Insane: " + IntToString(gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns")));
                        }
                        else if (autoCF7721DF_val == 3) {
                            lv_tstring = (lv_tstring + "<n/>" + "Hard: " + IntToString(gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns")));
                        }
                        else if (autoCF7721DF_val == 2) {
                            lv_tstring = (lv_tstring + "<n/>" + "Normal: " + IntToString(gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns")));
                        }
                        else if (autoCF7721DF_val == 1) {
                            lv_tstring = (lv_tstring + "<n/>" + "Easy: " + IntToString(gf_bankgetint(gv_zbanks[lv_i], IntToString(lv_j), "completeruns")));
                        }
                        else {
                        }
                        lv_j -= 1;
                    }
                    lv_tstring = StringSub(lv_tstring, 5, StringLength(lv_tstring));
                    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(lv_tstring), PlayerGroupAll());
                    lv_tstring = "";
                    lv_j = 0;
                }

                lv_j -= 1;
            }
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 150, 50, c_anchorTopLeft, 50+(150*lv_i), 695, IntToText(gv_rewardaccumulated[lv_i]), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_labels[lv_i] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemTooltip(lv_labels[lv_i], gf_getrewardinfo(lv_i), PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_zstatsdialog, 100, 50, c_anchorTopLeft, 50+(150*lv_i), 645, IntToText(gv_zdeathcount[lv_i]), ColorWithAlpha(0,0,0,0), false, 2.0);
            lv_labels[lv_i+4] = DialogControlLastCreated();
        }

    }
    while(true){
    Wait(5.0, c_timeGame);
    lv_i = 0;
    while ((lv_i < 4)) {
        lv_i += 1;
        if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
            libNtve_gf_SetDialogItemText(lv_labels[lv_i], IntToText(gv_rewardaccumulated[lv_i]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(lv_labels[lv_i], gf_getrewardinfo(lv_i), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(lv_labels[lv_i+4], IntToText(gv_zdeathcount[lv_i]), PlayerGroupAll());
        }

    }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initstatwindow_Init () {
    gt_initstatwindow = TriggerCreate("gt_initstatwindow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ShowTalents
//--------------------------------------------------------------------------------------------------
bool gt_ShowTalents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tp;
    int lv_tpc;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tp = (EventPlayer() - 1);
    lv_tpc = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ScreenButton(39) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "FireHero")) {
        if ((DialogIsVisible(gv_talentsdialog[0], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[0], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][0], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[0], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "LightningHero")) {
        if ((DialogIsVisible(gv_talentsdialog[1], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[1], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][1], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[1], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "PoisonHero")) {
        if ((DialogIsVisible(gv_talentsdialog[2], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[2], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][2], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[2], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "ShadowHero")) {
        if ((DialogIsVisible(gv_talentsdialog[3], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[3], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][3], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[3], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "WarpHero")) {
        if ((DialogIsVisible(gv_talentsdialog[4], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[4], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][4], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[4], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "ParticleHero")) {
        if ((DialogIsVisible(gv_talentsdialog[5], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[5], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][5], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[5], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "TwilightHero")) {
        if ((DialogIsVisible(gv_talentsdialog[6], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[6], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][6], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[6], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "TimeHero")) {
        if ((DialogIsVisible(gv_talentsdialog[7], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[7], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][7], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[7], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "WaterHero")) {
        if ((DialogIsVisible(gv_talentsdialog[8], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[8], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][8], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[8], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "EarthHero")) {
        if ((DialogIsVisible(gv_talentsdialog[9], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[9], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][9], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[9], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "AirHero")) {
        if ((DialogIsVisible(gv_talentsdialog[10], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[10], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][10], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[10], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "GravityHero")) {
        if ((DialogIsVisible(gv_talentsdialog[11], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[11], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][11], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[11], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "GatewayHero")) {
        if ((DialogIsVisible(gv_talentsdialog[12], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[12], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][12], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[12], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "NatureHero")) {
        if ((DialogIsVisible(gv_talentsdialog[13], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[13], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][13], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[13], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "ElementalHero")) {
        if ((DialogIsVisible(gv_talentsdialog[14], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[14], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][14], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[14], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "IllusionHero")) {
        if ((DialogIsVisible(gv_talentsdialog[15], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[15], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][15], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[15], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "LuckHero")) {
        if ((DialogIsVisible(gv_talentsdialog[16], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[16], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][16], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[16], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "ProbeHero")) {
        if ((DialogIsVisible(gv_talentsdialog[17], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[17], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][17], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[17], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "BladeHero")) {
        if ((DialogIsVisible(gv_talentsdialog[18], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[18], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][18], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[18], PlayerGroupSingle(lv_tpc), true);
        }
    }

    if ((UnitGetType(gv_hero[lv_tp]) == "BeamHero")) {
        if ((DialogIsVisible(gv_talentsdialog[19], lv_tpc) == true)) {
            DialogSetVisible(gv_talentsdialog[19], PlayerGroupSingle(lv_tpc), false);
        }
        else {
            gf_DialogHideAll(lv_tpc);
            libNtve_gf_SetDialogItemText(gv_talentsdialogbuttons[8][0][19], IntToText(gv_talentpointsavailable[lv_tp]), PlayerGroupSingle(lv_tpc));
            DialogSetVisible(gv_talentsdialog[19], PlayerGroupSingle(lv_tpc), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowTalents_Init () {
    gt_ShowTalents = TriggerCreate("gt_ShowTalents_Func");
    TriggerAddEventDialogControl(gt_ShowTalents, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TalentButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_TalentButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_buttonrow;
    int lv_buttonnumber;
    int lv_heroversion;
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = (EventPlayer() - 1);
    lv_buttonrow = -1;
    lv_buttonnumber = -1;

    // Conditions
    if (testConds) {
        if (!((gv_talentpointsavailable[lv_player] >= 1))) {
            return false;
        }

        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[0]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[8]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[9]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[10]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[11]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[12]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[13]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[14]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[15]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[16]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[17]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[18]) || (DialogControlGetDialog(EventDialogControl()) == gv_talentsdialog[19])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "FireHero")) {
        lv_heroversion = 0;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "PoisonHero")) {
        lv_heroversion = 2;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "LightningHero")) {
        lv_heroversion = 1;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "ShadowHero")) {
        lv_heroversion = 3;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "WarpHero")) {
        lv_heroversion = 4;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "ParticleHero")) {
        lv_heroversion = 5;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "TwilightHero")) {
        lv_heroversion = 6;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "TimeHero")) {
        lv_heroversion = 7;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "WaterHero")) {
        lv_heroversion = 8;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "EarthHero")) {
        lv_heroversion = 9;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "AirHero")) {
        lv_heroversion = 10;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "GravityHero")) {
        lv_heroversion = 11;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "GatewayHero")) {
        lv_heroversion = 12;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "NatureHero")) {
        lv_heroversion = 13;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "ElementalHero")) {
        lv_heroversion = 14;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "IllusionHero")) {
        lv_heroversion = 15;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "LuckHero")) {
        lv_heroversion = 16;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "ProbeHero")) {
        lv_heroversion = 17;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "BladeHero")) {
        lv_heroversion = 18;
    }

    if ((UnitGetType(gv_hero[lv_player]) == "BeamHero")) {
        lv_heroversion = 19;
    }

    while ((lv_i < 19)) {
        lv_j = 0;
        while ((lv_j < 5)) {
            if ((EventDialogControl() == gv_talentsdialogbuttons[lv_i][lv_j][lv_heroversion])) {
                lv_buttonnumber = lv_i;
                lv_buttonrow = lv_j;
                lv_i = 10;
                lv_j = 10;
            }

            lv_j += 1;
        }
        lv_i += 1;
    }
    if ((lv_buttonnumber == -1)) {
        return true;
    }

    if ((lv_heroversion == 0)) {
        gf_TalentPressedFire(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 1)) {
        gf_TalentPressedLightning(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 2)) {
        gf_TalentPressedPoison(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 3)) {
        gf_TalentPressedShadow(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 4)) {
        gf_TalentPressedWarp(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 5)) {
        gf_TalentPressedParticle(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 6)) {
        gf_TalentPressedTwilight(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 7)) {
        gf_TalentPressedTime(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 8)) {
        gf_TalentPressedWaterHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 9)) {
        gf_TalentPressedEarthHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 10)) {
        gf_TalentPressedAirHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 11)) {
        gf_TalentPressedGravityHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 12)) {
        gf_TalentPressedGatewayHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 13)) {
        gf_TalentPressedNatureHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 14)) {
        gf_TalentPressedElementalHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 15)) {
        gf_TalentPressedIllusionHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 16)) {
        gf_TalentPressedLuckHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 17)) {
        gf_TalentPressedProbeHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 18)) {
        gf_TalentPressedBladeHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    if ((lv_heroversion == 19)) {
        gf_TalentPressedBeamHero(lv_player, lv_buttonrow, lv_buttonnumber, lv_heroversion);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentButtonPressed_Init () {
    gt_TalentButtonPressed = TriggerCreate("gt_TalentButtonPressed_Func");
    TriggerAddEventDialogControl(gt_TalentButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RewardButtonPressed
//--------------------------------------------------------------------------------------------------
bool gt_RewardButtonPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pnum;
    int lv_buttonnumber;
    int lv_heroversion;
    int lv_i;

    // Automatic Variable Declarations
    const int autoA91054EE_n = 10;
    int autoA91054EE_i;

    // Variable Initialization
    lv_pnum = EventPlayer();
    lv_buttonnumber = -1;

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_rewardDialog)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i < 26)) {
        if ((EventDialogControl() == gv_rewardButtons[lv_i])) {
            lv_buttonnumber = lv_i;
            lv_i = 26;
        }

        lv_i += 1;
    }
    if ((lv_buttonnumber == -1)) {
        return true;
    }

    if ((((lv_buttonnumber < 5) && (gf_rewardgetprice(lv_pnum, 0) <= gv_rewardUnspend[lv_pnum])) || ((lv_buttonnumber < 10) && (lv_buttonnumber >= 5) && (gf_rewardgetprice(lv_pnum, 5) <= gv_rewardUnspend[lv_pnum])) || ((lv_buttonnumber < 15) && (lv_buttonnumber >= 10) && (gf_rewardgetprice(lv_pnum, 10) <= gv_rewardUnspend[lv_pnum])))) {
        if ((gv_rewardSpendMultiplier[lv_pnum] == 10)) {
            for (autoA91054EE_i = 1; autoA91054EE_i <= autoA91054EE_n; autoA91054EE_i += 1) {
                gf_rewardbuy(lv_pnum, lv_buttonnumber);
            }
        }
        else {
            gf_rewardbuy(lv_pnum, lv_buttonnumber);
        }
    }
    else {
        if ((lv_buttonnumber == 20)) {
            gf_rewardreset(lv_pnum);
        }

        if ((lv_buttonnumber == 25)) {
            if ((gv_rewardSpendMultiplier[lv_pnum] == 1)) {
                gv_rewardSpendMultiplier[lv_pnum] = 10;
                libNtve_gf_SetDialogItemText(gv_rewardButtons[25], StringExternal("Param/Value/00F162F5"), PlayerGroupSingle(lv_pnum));
            }
            else {
                gv_rewardSpendMultiplier[lv_pnum] = 1;
                libNtve_gf_SetDialogItemText(gv_rewardButtons[25], StringExternal("Param/Value/7F267D1C"), PlayerGroupSingle(lv_pnum));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RewardButtonPressed_Init () {
    gt_RewardButtonPressed = TriggerCreate("gt_RewardButtonPressed_Func");
    TriggerAddEventDialogControl(gt_RewardButtonPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RewardDialogOpen/Close
//--------------------------------------------------------------------------------------------------
bool gt_RewardDialogOpenClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_ScreenButton(33) == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_rewardDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_rewardDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gf_DialogHideAll(EventPlayer());
        DialogSetVisible(gv_rewardDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemText(gv_rewardButtons[24], IntToText(gv_rewardUnspend[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RewardDialogOpenClose_Init () {
    gt_RewardDialogOpenClose = TriggerCreate("gt_RewardDialogOpenClose_Func");
    TriggerAddEventDialogControl(gt_RewardDialogOpenClose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_demolisher == null) && (PlayerGroupCount(PlayerGroupActive()) == 1)) {
        if ((gv_mode == 0)) {
            UnitCreate(1, "Demolisher", 0, 5, UnitGetPosition(gf_getpylonofprevstage()), 270.0);
            gv_demolisher = UnitLastCreated();
            gf_ProtossAttackAI(libNtve_gf_ConvertUnitToUnitGroup(gv_demolisher));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeaves_Init () {
    gt_PlayerLeaves = TriggerCreate("gt_PlayerLeaves_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeaves, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: unitdeath
//--------------------------------------------------------------------------------------------------
bool gt_unitdeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_type;
    int lv_heron;
    int lv_pnum;
    string lv_typ;
    int lv_i;
    unit lv_fail;
    int lv_killcount;
    int lv_killplayer;
    int lv_killheronum;

    // Automatic Variable Declarations
    int auto4FEE1D5C_val;

    // Variable Initialization
    lv_type = UnitGetType(EventUnit());
    lv_heron = UnitGetOwner(EventUnit())-1;;
    lv_pnum = UnitGetOwner(EventUnit());
    lv_typ = UnitGetType(EventUnit());
    lv_fail = EventUnit();
    lv_killplayer = UnitGetOwner(libNtve_gf_KillingUnit());
    lv_killheronum = (lv_killplayer - 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) > 4)) {
        if ((UnitGetOwner(EventUnit()) > 5)) {
            if ((PlayerStatus(lv_killplayer) == c_playerStatusActive) && (UnitGetOwner(libNtve_gf_KillingUnit()) < 5)) {
                gf_bankaddtoint(gv_zbanks[lv_killplayer], "7", "acm", 1);
                gv_killsThisGame[lv_killplayer] += 1;
                if ((libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) > 50000)) {
                    UnitSetPropertyFixed(libNtve_gf_KillingUnit(), c_unitPropKills, (UnitGetPropertyInt(libNtve_gf_KillingUnit(), c_unitPropKills, c_unitPropCurrent) - 50000));
                }

                if ((libNtve_gf_KillingUnit() != gv_hero[(lv_killplayer - 1)])) {
                    UnitSetPropertyFixed(gv_hero[lv_killheronum], c_unitPropKills, (UnitGetPropertyFixed(gv_hero[lv_killheronum], c_unitPropKills, c_unitPropCurrent) + 1.0));
                }
                else {
                    if ((UnitHasBehavior(libNtve_gf_KillingUnit(), "NinjaCheck") == false)) {
                        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "NinjaCheck", libNtve_gf_KillingUnit(), 1);
                        gv_zkillsincelastdeath[(lv_killplayer + 4)] = (libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) + 500);
                    }
                    else {
                        if ((libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) >= gv_zkillsincelastdeath[(lv_killplayer + 4)])) {
                            gf_achievementsforplayer(lv_killplayer, 40);
                        }

                    }
                    if ((UnitHasBehavior(libNtve_gf_KillingUnit(), "Gandalfcheck") == false)) {
                        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "Gandalfcheck", libNtve_gf_KillingUnit(), 1);
                        gv_zkillsincelastdeath[(lv_killplayer + 8)] = (libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) + 500);
                    }
                    else {
                        if ((libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) >= gv_zkillsincelastdeath[(lv_killplayer + 8)])) {
                            gf_achievementsforplayer(lv_killplayer, 43);
                        }

                    }
                    if ((UnitHasBehavior(libNtve_gf_KillingUnit(), "MassacreHelper") == false)) {
                        UnitBehaviorAdd(libNtve_gf_KillingUnit(), "MassacreHelper", libNtve_gf_KillingUnit(), 1);
                        gv_zkillsincelastdeath[(lv_killplayer + 12)] = (gv_killsThisGame[lv_killplayer] - 1);
                    }

                }
                if (((gv_zachievementscounterstart[lv_killplayer] + gv_killsThisGame[lv_killplayer]) >= gf_achievementgetvalueofnextlevel(7, lv_killplayer))) {
                    gf_achievementnew(lv_killplayer, 7);
                }

                if ((gv_killsThisGame[lv_killplayer] > gf_achievementgetvalueofnextlevel(10, lv_killplayer))) {
                    gf_achievementnew(lv_killplayer, 10);
                }

                if ((libNtve_gf_UnitGetPropertyKills(libNtve_gf_KillingUnit(), c_unitPropCurrent) >= gv_zkillsincelastdeath[lv_killplayer])) {
                    gf_achievementsforplayer(lv_killplayer, 20);
                }

            }
            else {
                if ((UnitGetOwner(libNtve_gf_KillingUnit()) == 5) && (UnitGetType(libNtve_gf_KillingUnit()) != "Pylon") && (UnitGetType(libNtve_gf_KillingUnit()) != "PhotonCannon") && (gv_difficulty > 1)) {
                    gv_acmProtossKills += 1;
                    gf_achievementPossiblyGainedTeam(65, gv_acmProtossKills);
                }

                if ((gv_stage >= 11) && (UnitGetOwner(libNtve_gf_KillingUnit()) == 5) && (UnitGetType(EventUnit()) == "Hive")) {
                    gf_achievements0killaward(42);
                }

            }
            if (((lv_type == "Zergling") || (lv_type == "HotSRaptor") || (lv_type == "HotSSplitterlingMedium") || (lv_type == "Roachling") || (lv_type == "Baneling") || (lv_type == "Larva") || (lv_type == "Overlord") || (lv_type == "Broodling"))) {
                gf_gainxp((gv_xpBoni[0] + 1.5));
            }

            if (((lv_type == "HotSSwarmling") || (lv_type == "HotSSplitterlingBig") || (lv_type == "RoachCorpser") || (lv_type == "HydraliskImpaler") || (lv_type == "Roach") || (lv_type == "Hydralisk"))) {
                gf_gainxp(8.0);
            }

            if (((lv_type == "HotSNoxious") || (lv_type == "Ultralisk") || (lv_type == "SpineCrawler") || (lv_type == "Infestor"))) {
                gf_gainxp(25.0);
            }

            if (((lv_type == "SwarmQueen2") || (lv_type == "Queen") || (lv_type == "SporeCrawler"))) {
                gf_gainxp(50.0);
            }

            if (((lv_type == "HotSTorrasque") || (lv_type == "SwarmHostSplitA") || (lv_type == "Ultralisk2") || (lv_type == "Metalisk"))) {
                gf_gainxp(100.0);
            }

            if (((lv_type == "Hatchery"))) {
                gf_gainxp(250.0);
                gf_GainReward(1);
            }

            if (((lv_type == "Lair"))) {
                gf_gainxp(1000.0);
                gf_GainReward(1);
                gf_GainReward(1);
            }

            if (((lv_type == "Hive"))) {
                gf_gainxp(5000.0);
                gf_GainReward(1);
                gf_GainReward(1);
                gf_GainReward(1);
                gf_GainReward(1);
            }

        }
        else {
            if ((UnitGetType(EventUnit()) == "Pylon")) {
                if (((gv_mode == 1) || (gv_stage < 2))) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/DC430B44"));
                    GameOver(1, c_gameOverDefeat, true, true);
                    GameOver(2, c_gameOverDefeat, true, true);
                    GameOver(3, c_gameOverDefeat, true, true);
                    GameOver(4, c_gameOverDefeat, true, true);
                }
                else {
                    if (((gv_stage < 8) || (gv_stage > 9))) {
                        gv_stage -= 1;
                    }
                    else {
                        gv_stage = 6;
                    }
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/BB9BB843") + IntToText(gv_stage) + StringExternal("Param/Value/0076E90E")));
                    gv_zpylonslostthisgame += 1;
                    auto4FEE1D5C_val = gv_stage;
                    if (auto4FEE1D5C_val == 1) {
                        TriggerExecute(gt_activatebase1again, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 2) {
                        TriggerExecute(gt_activatebase2, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 3) {
                        TriggerExecute(gt_activatebase3, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 4) {
                        TriggerExecute(gt_activatebase4, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 5) {
                        TriggerExecute(gt_activatebase5, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 6) {
                        TriggerExecute(gt_activatebase6, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 7) {
                        TriggerExecute(gt_activatebase7, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 8) {
                        TriggerExecute(gt_activateStage8, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 9) {
                        TriggerExecute(gt_activateStage9, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 10) {
                        TriggerExecute(gt_activateStage10, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else if (auto4FEE1D5C_val == 11) {
                        TriggerExecute(gt_activateStage11, true, false);
                        if ((UnitHasBehavior2(gv_demolisher, "IncapacitatedDemolisher") == false)) {
                            UnitSetPosition(gv_demolisher, UnitGetPosition(gf_getpylonofstage()), false);
                        }

                    }
                    else {
                    }
                    gv_pylondownteleport = true;
                    Wait(20.0, c_timeGame);
                    gv_pylondownteleport = false;
                }
            }

        }
    }
    else {
        if (((gv_hero[0] == EventUnit()) || (gv_hero[1] == EventUnit()) || (gv_hero[2] == EventUnit()) || (gv_hero[3] == EventUnit()))) {
            lv_killcount = libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent);
            gv_zkillsincelastdeath[lv_pnum] = (libNtve_gf_UnitGetPropertyKills(EventUnit(), c_unitPropCurrent) + 1000);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/C5957636"));
            gv_zgametime[3] += 60;
            Wait(0.125, c_timeGame);
            if ((gv_mode == 1)) {
                UnitSetPosition(gv_hero[lv_heron], Point(59.0, 47.0), false);
            }
            else {
                UnitSetPosition(gv_hero[lv_heron], Point(243.0, 7.0), false);
            }
            Wait(0.125, c_timeGame);
            UnitRevive(gv_hero[lv_heron]);
            UnitCreateEffectUnit(gv_hero[lv_heron], "FullHeal", gv_hero[lv_heron]);
            UnitControlGroupAddUnit(EventPlayer(), 1, gv_hero[lv_heron]);
            UnitSelect(gv_hero[lv_heron], 1, true);
            gf_rewardaddall(lv_pnum, true);
            while ((lv_i < 40)) {
                UnitSetCustomValue(gv_hero[lv_heron], lv_i, UnitGetCustomValue(lv_fail, lv_i));
                lv_i += 1;
            }
            if ((gv_zdeathcount[lv_pnum] < 1) && (gv_rewardaccumulated[lv_pnum] < 250)) {
                UIDisplayMessage(PlayerGroupSingle(lv_pnum), c_messageAreaSubtitle, StringExternal("Param/Value/7D4901E5"));
            }

            gv_zdeathcount[lv_pnum] += 1;
            CameraPan(lv_pnum, UnitGetPosition(gv_hero[lv_heron]), 0.0, -1, 10, false);
            UnitSetPropertyFixed(gv_hero[lv_heron], c_unitPropKills, IntToFixed(lv_killcount));
            UnitBehaviorAdd(gv_hero[lv_heron], "RestlessPassive", gv_hero[lv_heron], 1);
            if ((gv_difficulty < 2.0)) {
                UnitBehaviorAdd(gv_hero[lv_heron], "Easy", gv_hero[lv_heron], 1);
            }

            if ((gv_difficulty == 2.0)) {
                UnitBehaviorAdd(gv_hero[lv_heron], "Normal", gv_hero[lv_heron], 1);
            }

            if ((gv_difficulty == 3.0)) {
                UnitBehaviorAdd(gv_hero[lv_heron], "Hard", gv_hero[lv_heron], 1);
            }

            if ((gv_difficulty == 4.0)) {
                UnitBehaviorAdd(gv_hero[lv_heron], "Insane", gv_hero[lv_heron], 1);
            }

            if ((gv_difficulty == 5.0)) {
                UnitBehaviorAdd(gv_hero[lv_heron], "Legendary", gv_hero[lv_heron], 1);
            }

            if ((gv_mode < 1)) {
                gf_TeleportHideShow(gv_hero[lv_heron]);
            }

            if ((lv_typ == "LightningHero")) {
                gf_StaticArmor(gv_hero[lv_heron]);
            }

            if ((lv_typ == "PoisonHero")) {
                gf_poisonarmorstacks(gv_hero[lv_heron]);
            }

            if ((lv_typ == "ShadowHero")) {
                UnitBehaviorAdd(gv_hero[lv_heron], "CloakofFear", gv_hero[lv_heron], TechTreeUpgradeCount(lv_pnum, "BlackwallDarkness", c_techCountQueuedOrBetter));
                gf_Shadowwallofdarkness(gv_hero[lv_heron]);
            }

            if ((lv_typ == "LuckHero")) {
                gf_LuckOrbs(gv_hero[lv_heron], "OrbOfLuck", 4, EventPlayer(), 1.25, 3.0, 1.25);
            }

            if ((PlayerStatus(lv_pnum) == c_playerStatusActive)) {
                gf_disguiseunit(gv_hero[lv_heron], lv_pnum);
            }

            if ((gv_stage > 1) && (gv_mode < 1)) {
                gf_TeleportDialogOpenAfterDeath(lv_pnum);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_unitdeath_Init () {
    gt_unitdeath = TriggerCreate("gt_unitdeath_Func");
    TriggerAddEventUnitDied(gt_unitdeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnitWasStunned
//--------------------------------------------------------------------------------------------------
bool gt_UnitWasStunned_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitWasStunned_Init () {
    gt_UnitWasStunned = TriggerCreate("gt_UnitWasStunned_Func");
    TriggerAddEventUnitBehaviorChange(gt_UnitWasStunned, null, "UnitWasStunnedUsedWithTriggers", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autocast On
//--------------------------------------------------------------------------------------------------
bool gt_AutocastOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("MicroBurst", 0))) {
        UnitBehaviorAdd(EventUnit(), "MicroBurstAutocast", EventUnit(), 1);
    }
    else {
        if ((EventUnitAbility() == AbilityCommand("Tornado", 0))) {
            UnitBehaviorAdd(EventUnit(), "TornadoAutocast", EventUnit(), 1);
        }
        else {
            UnitBehaviorAdd(EventUnit(), "HurricaneAutocast", EventUnit(), 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutocastOn_Init () {
    gt_AutocastOn = TriggerCreate("gt_AutocastOn_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOn, null, AbilityCommand("MicroBurst", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOn, null, AbilityCommand("Tornado", 0), c_unitAbilAutoCastChangeOn, false);
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOn, null, AbilityCommand("Hurricane", 0), c_unitAbilAutoCastChangeOn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autocast Off
//--------------------------------------------------------------------------------------------------
bool gt_AutocastOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("MicroBurst", 0))) {
        UnitBehaviorRemove(EventUnit(), "MicroBurstAutocast", c_unitBehaviorCountAll);
    }
    else {
        if ((EventUnitAbility() == AbilityCommand("Tornado", 0))) {
            UnitBehaviorRemove(EventUnit(), "TornadoAutocast", c_unitBehaviorCountAll);
        }
        else {
            UnitBehaviorRemove(EventUnit(), "HurricaneAutocast", c_unitBehaviorCountAll);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutocastOff_Init () {
    gt_AutocastOff = TriggerCreate("gt_AutocastOff_Func");
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOff, null, AbilityCommand("MicroBurst", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOff, null, AbilityCommand("Tornado", 0), c_unitAbilAutoCastChangeOff, false);
    TriggerAddEventUnitAbilityAutoCastChange(gt_AutocastOff, null, AbilityCommand("Hurricane", 0), c_unitAbilAutoCastChangeOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkillPlasmaTorpedoCast
//--------------------------------------------------------------------------------------------------
bool gt_SkillPlasmaTorpedoCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_count = (5 + (TechTreeUpgradeCount(lv_owner, "PlasmaTorpedoMissile", c_techCountQueuedOrBetter) - TechTreeUpgradeCount(lv_owner, "PlasmaTorpedoCharge", c_techCountQueuedOrBetter)));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(lv_owner, "ParticleHeroSafeguard", c_techCountQueuedOrBetter) > 0)) {
        UnitCreateEffectUnit(lv_caster, "MultiphaseShieldreplenishset", lv_caster);
        UnitCreateEffectUnit(lv_caster, "MultiphaseShieldreplenishset", lv_caster);
    }

    if ((UnitIsAlive(lv_caster) == true)) {
        if ((lv_count == 1)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
        }

        if ((lv_count == 2)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (180.0 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 3)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (120.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (240.0 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 4)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (90.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (180.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (270.0 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 5)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (72.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (144.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (216.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (288.0 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 6)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (60.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (120.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (180.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (240.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (300.0 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 7)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (51.4 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (102.8 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (154.2 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (205.6 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (257.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (308.4 + UnitGetFacing(lv_caster)));
        }

        if ((lv_count == 8)) {
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, UnitGetFacing(lv_caster));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (45.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (90.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (135.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (180.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (225.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (270.0 + UnitGetFacing(lv_caster)));
            gf_SkillPlasmaTorpedo(UnitGetPosition(lv_caster), lv_caster, lv_owner, (315.0 + UnitGetFacing(lv_caster)));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkillPlasmaTorpedoCast_Init () {
    gt_SkillPlasmaTorpedoCast = TriggerCreate("gt_SkillPlasmaTorpedoCast_Func");
    TriggerAddEventUnitAbility(gt_SkillPlasmaTorpedoCast, null, AbilityCommand("ParticleHeroPlasmaTorpedo", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PartingGift
//--------------------------------------------------------------------------------------------------
bool gt_PartingGift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    point lv_target;
    int lv_split;
    int lv_pierce;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = UnitGroupUnit(UnitGroup("WarpHero", EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    lv_owner = UnitGetOwner(EventUnit());
    lv_target = UnitGetPosition(EventUnit());
    lv_split = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "GuidedMissileSplit", c_techCountQueuedOrBetter);
    lv_pierce = TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "GuidedMissilePierce", c_techCountQueuedOrBetter);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Decoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(lv_owner, "PartingGift", c_techCountQueuedOrBetter) > 0)) {
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 0.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 120.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 240.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
    }

    if ((TechTreeUpgradeCount(lv_owner, "PartingGift", c_techCountQueuedOrBetter) > 1)) {
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 60.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 180.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
        gf_SkillGuidedMissile(lv_caster, lv_owner, PointWithOffsetPolar(lv_target, 1.0, 300.0), lv_target, TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartingGift_Init () {
    gt_PartingGift = TriggerCreate("gt_PartingGift_Func");
    TriggerAddEventUnitBehaviorChange(gt_PartingGift, null, "DecoyFate", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assault
//--------------------------------------------------------------------------------------------------
bool gt_Assault_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_targetunit;
    bool lv_targetlimit;
    point lv_targetpoint;
    unit lv_caster;
    int lv_owner;
    int lv_chance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_chance = RandomInt(0, 100);

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Assault", c_techCountQueuedOrBetter) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_chance < (TechTreeUpgradeCount(EventPlayer(), "Assault", c_techCountQueuedOrBetter) * 15))) {
        while ((lv_i < (3 + TechTreeUpgradeCount(lv_owner, "StrafeEndurance", c_techCountQueuedOrBetter))) && (UnitIsAlive(lv_caster) == true)) {
            if ((UnitHasBehavior2(lv_caster, "ImmortalStrafeEndless") == true)) {
                UnitBehaviorRemove(lv_caster, "ImmortalStrafeEndless", 1);
            }
            else {
                lv_i += 1;
            }
            gf_SkillStrafeShot(lv_caster, lv_caster, lv_owner);
            Wait((0.5 - (IntToFixed(TechTreeUpgradeCount(lv_owner, "StrafeAgility", c_techCountQueuedOrBetter)) * 0.0625)), c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assault_Init () {
    gt_Assault = TriggerCreate("gt_Assault_Func");
    TriggerAddEventUnitAbility(gt_Assault, null, AbilityCommand("GuidedMissile", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Assault, null, AbilityCommand("WarpHeroMultishot", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Assault, null, AbilityCommand("WarpHeroStrafe", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Assault, null, AbilityCommand("WarpHeroDecoy", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkillGuidedMissileCast
//--------------------------------------------------------------------------------------------------
bool gt_SkillGuidedMissileCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_caster;
    int lv_owner;
    point lv_target;
    unitgroup lv_grp;
    int lv_split;
    int lv_pierce;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_target = EventUnitTargetPoint();
    lv_grp = UnitGroupEmpty();
    lv_split = TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter);
    lv_pierce = TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SkillGuidedMissile(lv_caster, lv_owner, lv_target, UnitGetPosition(lv_caster), TechTreeUpgradeCount(lv_owner, "GuidedMissilePierce", c_techCountQueuedOrBetter), TechTreeUpgradeCount(lv_owner, "GuidedMissileSplit", c_techCountQueuedOrBetter));
    if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
        lv_grp = UnitGroup("Decoy", lv_owner, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_grp, c_unitCountAll) > 0)) {
            if ((UnitHasBehavior(UnitGroupUnit(lv_grp, 1), "Doubleganger") == true)) {
                UnitBehaviorRemove(UnitGroupUnit(lv_grp, 1), "Doubleganger", 1);
                gf_SkillGuidedMissile(lv_caster, lv_owner, lv_target, UnitGetPosition(UnitGroupUnit(lv_grp, 1)), lv_pierce, lv_split);
            }

            UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, 1));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkillGuidedMissileCast_Init () {
    gt_SkillGuidedMissileCast = TriggerCreate("gt_SkillGuidedMissileCast_Func");
    TriggerAddEventUnitAbility(gt_SkillGuidedMissileCast, null, AbilityCommand("GuidedMissile", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkillStrafeCast
//--------------------------------------------------------------------------------------------------
bool gt_SkillStrafeCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_caster;
    int lv_owner;
    unitgroup lv_grp;
    int lv_j;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());
    lv_grp = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
        lv_grp = UnitGroup("Decoy", lv_owner, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((lv_j < UnitGroupCount(lv_grp, c_unitCountAll))) {
            lv_j += 1;
            if ((UnitHasBehavior(UnitGroupUnit(lv_grp, lv_j), "Doubleganger") == true) && (UnitIsAlive(UnitGroupUnit(lv_grp, lv_j)) == true)) {
                UnitBehaviorRemove(UnitGroupUnit(lv_grp, lv_j), "Doubleganger", 1);
            }
            else {
                UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, lv_j));
                lv_j -= 1;
            }
        }
    }

    while ((lv_i < (3 + TechTreeUpgradeCount(lv_owner, "StrafeEndurance", c_techCountQueuedOrBetter))) && (UnitIsAlive(lv_caster) == true)) {
        if ((UnitHasBehavior2(lv_caster, "ImmortalStrafeEndless") == true)) {
            UnitBehaviorRemove(lv_caster, "ImmortalStrafeEndless", 1);
        }
        else {
            lv_i += 1;
        }
        gf_SkillStrafeShot(lv_caster, lv_caster, lv_owner);
        lv_j = 0;
        if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
            while ((lv_j < UnitGroupCount(lv_grp, c_unitCountAll))) {
                lv_j += 1;
                if ((UnitIsAlive(UnitGroupUnit(lv_grp, lv_j)) == true)) {
                    gf_SkillStrafeShot(lv_caster, UnitGroupUnit(lv_grp, lv_j), lv_owner);
                }
                else {
                    UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, lv_j));
                    lv_j -= 1;
                }
            }
        }

        Wait((0.5 - (IntToFixed(TechTreeUpgradeCount(lv_owner, "StrafeAgility", c_techCountQueuedOrBetter)) * 0.0625)), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkillStrafeCast_Init () {
    gt_SkillStrafeCast = TriggerCreate("gt_SkillStrafeCast_Func");
    TriggerAddEventUnitAbility(gt_SkillStrafeCast, null, AbilityCommand("WarpHeroStrafe", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkillMultishotCast
//--------------------------------------------------------------------------------------------------
bool gt_SkillMultishotCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delay;
    int lv_i;
    unit lv_caster;
    point lv_target;
    int lv_owner;
    unitgroup lv_grp;
    int lv_j;

    // Automatic Variable Declarations
    int autoA1EF4423_n;
    int autoA1EF4423_i;
    int auto41A4407D_n;
    int auto41A4407D_i;

    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetPoint();
    lv_owner = UnitGetOwner(EventUnit());
    lv_grp = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
        lv_grp = UnitGroup("Decoy", lv_owner, RegionCircle(UnitGetPosition(EventUnit()), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((lv_j < UnitGroupCount(lv_grp, c_unitCountAll))) {
            lv_j += 1;
            if ((UnitHasBehavior(UnitGroupUnit(lv_grp, lv_j), "Doubleganger") == true) && (UnitIsAlive(UnitGroupUnit(lv_grp, lv_j)) == true)) {
                UnitBehaviorRemove(UnitGroupUnit(lv_grp, lv_j), "Doubleganger", 1);
            }
            else {
                UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, lv_j));
                lv_j -= 1;
            }
        }
    }

    while ((lv_i < (2 + TechTreeUpgradeCount(lv_owner, "MultishotMultitask", c_techCountQueuedOrBetter))) && (UnitIsAlive(lv_caster) == true)) {
        lv_i += 1;
        lv_j = 0;
        if ((lv_i == 1)) {
            gf_SkillMultishot(lv_caster, lv_caster, lv_owner, lv_target);
            autoA1EF4423_n = TechTreeUpgradeCount(lv_owner, "Focus", c_techCountQueuedOrBetter);
            for (autoA1EF4423_i = 1; autoA1EF4423_i <= autoA1EF4423_n; autoA1EF4423_i += 1) {
                lv_delay += 0.25;
                gf_SkillMultishotTalent(lv_delay, lv_caster, lv_caster, lv_owner, lv_target);
            }
            if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
                while ((lv_j < UnitGroupCount(lv_grp, c_unitCountAll))) {
                    lv_j += 1;
                    if ((UnitIsAlive(UnitGroupUnit(lv_grp, lv_j)) == true)) {
                        gf_SkillMultishot(lv_caster, UnitGroupUnit(lv_grp, lv_j), lv_owner, lv_target);
                        lv_delay = 0.0;
                        auto41A4407D_n = TechTreeUpgradeCount(lv_owner, "Focus", c_techCountQueuedOrBetter);
                        for (auto41A4407D_i = 1; auto41A4407D_i <= auto41A4407D_n; auto41A4407D_i += 1) {
                            lv_delay += 0.25;
                            gf_SkillMultishotTalent(lv_delay, lv_caster, UnitGroupUnit(lv_grp, lv_j), lv_owner, lv_target);
                        }
                    }
                    else {
                        UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, lv_j));
                        lv_j -= 1;
                    }
                }
            }

        }
        else {
            gf_SkillMultishot(lv_caster, lv_caster, lv_owner, PointWithOffsetPolar(lv_target, (lv_i-1), (90.0 + AngleBetweenPoints(UnitGetPosition(lv_caster), lv_target))));
            gf_SkillMultishot(lv_caster, lv_caster, lv_owner, PointWithOffsetPolar(lv_target, ((lv_i)*-1)+1, (90.0 + AngleBetweenPoints(UnitGetPosition(lv_caster), lv_target))));
            if ((TechTreeUpgradeCount(lv_owner, "Doppelganger", c_techCountQueuedOrBetter) > 0)) {
                while ((lv_j < UnitGroupCount(lv_grp, c_unitCountAll))) {
                    lv_j += 1;
                    if ((UnitIsAlive(UnitGroupUnit(lv_grp, lv_j)) == true)) {
                        gf_SkillMultishot(lv_caster, UnitGroupUnit(lv_grp, lv_j), lv_owner, PointWithOffsetPolar(lv_target, (lv_i-1), (90.0 + AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_grp, lv_j)), lv_target))));
                        gf_SkillMultishot(lv_caster, UnitGroupUnit(lv_grp, lv_j), lv_owner, PointWithOffsetPolar(lv_target, ((lv_i)*-1)+1, (90.0 + AngleBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_grp, lv_j)), lv_target))));
                    }
                    else {
                        UnitGroupRemove(lv_grp, UnitGroupUnit(lv_grp, lv_j));
                        lv_j -= 1;
                    }
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkillMultishotCast_Init () {
    gt_SkillMultishotCast = TriggerCreate("gt_SkillMultishotCast_Func");
    TriggerAddEventUnitAbility(gt_SkillMultishotCast, null, AbilityCommand("WarpHeroMultishot", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Doom
//--------------------------------------------------------------------------------------------------
bool gt_Doom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_owner;
    int lv_doombox;
    fixed lv_doomdmg;
    int lv_timeleft;
    bool lv_alternate;
    fixed lv_damageamount;
    point lv_point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_owner = EventPlayer();
    lv_doombox = TechTreeUpgradeCount(lv_owner, "doombox", c_techCountQueuedOrBetter);
    lv_doomdmg = ((IntToFixed(TechTreeUpgradeCount(lv_owner, "DoomDamage", c_techCountQueuedOrBetter)) * 4.5) + 15.0);
    lv_timeleft = 10;
    lv_alternate = true;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_target == null) || (UnitIsAlive(lv_target) == false))) {
        return true;
    }

    UnitBehaviorAdd(lv_target, "Doom", lv_caster, 1);
    while ((UnitIsAlive(lv_caster) == true) && (UnitIsAlive(lv_target) == true) && (UnitHasBehavior(lv_target, "Doom") == true) && (lv_timeleft >= 1)) {
        if ((lv_alternate == true)) {
            gf_AddShadowEnergy(false, lv_owner, (2 * TechTreeUpgradeCount(lv_owner, "DoomEnergy", c_techCountQueuedOrBetter)));
            UnitDamage(lv_caster, "FireDotDamage", lv_target, lv_doomdmg);
            lv_damageamount += lv_doomdmg;
            if ((lv_doombox > 0)) {
                gf_DoomDetonate(lv_owner, lv_caster, lv_damageamount, UnitGetPosition(lv_target));
            }

            lv_alternate = false;
        }
        else {
            lv_alternate = true;
        }
        lv_timeleft -= 1;
        lv_point = UnitGetPosition(lv_target);
        if ((lv_timeleft >= 1)) {
            Wait(0.5, c_timeGame);
        }

    }
    if ((UnitIsAlive(lv_caster) == true)) {
        if ((UnitIsAlive(lv_target) == true)) {
            gf_DoomDetonate(lv_owner, lv_caster, lv_damageamount, UnitGetPosition(lv_target));
        }
        else {
            gf_DoomDetonate(lv_owner, lv_caster, lv_damageamount, lv_point);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Doom_Init () {
    gt_Doom = TriggerCreate("gt_Doom_Func");
    TriggerAddEventUnitAbility(gt_Doom, null, AbilityCommand("Doom", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadowplay
//--------------------------------------------------------------------------------------------------
bool gt_Shadowplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    unit lv_caster;
    unit lv_target;
    int lv_owner;
    int lv_overlord;
    int lv_counter;
    point lv_targetpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetUnit();
    lv_owner = EventPlayer();
    lv_overlord = TechTreeUpgradeCount(lv_owner, "ShadowplayOverlord", c_techCountQueuedOrBetter);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitFilterMatch(lv_target, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        if (((TechTreeUpgradeCount(lv_owner, "ShadowplayLimit", c_techCountCompleteOnly) * 2) > (UnitBehaviorCount(lv_caster, "ShadowplayStack") - 4))) {
            UnitBehaviorAdd(lv_caster, "ShadowplayStack", lv_target, 1);
            UnitBehaviorRemove(lv_target, "Doom", UnitBehaviorCount(lv_target, "Doom"));
            UnitBehaviorRemove(lv_target, "BlackDeath", UnitBehaviorCount(lv_target, "BlackDeath"));
            UnitBehaviorRemove(lv_target, "Frozen", UnitBehaviorCount(lv_target, "Frozen"));
            UnitBehaviorRemove(lv_target, "Shadowcrash", UnitBehaviorCount(lv_target, "Shadowcrash"));
            UnitBehaviorAdd(lv_target, "Shadowplay", lv_caster, TechTreeUpgradeCount(lv_owner, "ShadowplayImproved", c_techCountCompleteOnly));
            UnitBehaviorAdd(lv_target, "ShadowplayDummy", lv_caster, 1);
            UnitControlGroupAddUnit(lv_owner, 2, lv_target);
            if ((TechTreeUpgradeCount(lv_owner, "ShadowplayHeal", c_techCountCompleteOnly) >= 1)) {
                UnitSetPropertyFixed(lv_target, c_unitPropLifePercent, 100.0);
                UnitBehaviorAdd(lv_target, "ShadowplayMedic", lv_caster, 1);
            }

            UnitSetOwner(lv_target, lv_owner, true);
            if ((TechTreeUpgradeCount(lv_owner, "Darkness", c_techCountQueuedOrBetter) == 1)) {
                UnitCreateEffectUnit(lv_caster, "DarknessSet", lv_target);
                UnitSetTeamColorIndex(lv_target, 14);
                UnitSetScale(lv_target, 150.0, 150.0, 150.0);
            }

            UnitCreateEffectUnit(lv_caster, "ShadowplayApplyEntropy", lv_target);
            while ((UnitIsAlive(lv_target) == true)) {
                if ((lv_counter <= 0)) {
                    if ((lv_overlord > 0)) {
                        gf_AddShadowEnergy(false, lv_owner, 2);
                        lv_counter = 16;
                    }
                    else {
                        lv_counter = 16;
                    }
                }
                else {
                    lv_counter -= 1;
                }
                lv_targetpoint = UnitGetPosition(lv_target);
                Wait(0.0625, c_timeGame);
            }
            if ((lv_overlord > 0)) {
                gf_AddShadowEnergy(false, lv_owner, 30);
            }

            gf_AddShadowEnergy(false, lv_owner, (2 * TechTreeUpgradeCount(lv_owner, "DoomEnergy", c_techCountQueuedOrBetter)));
            gf_DoomDetonate(lv_owner, gv_hero[(lv_owner - 1)], ((TechTreeUpgradeCount(lv_owner, "DoomDamage", c_techCountQueuedOrBetter) * 45.0) + 150.0), lv_targetpoint);
        }
        else {
            gf_addenergy(lv_caster, 50.0, false);
        }
    }
    else {
        UnitBehaviorAdd(lv_target, "ShadowplayHeroic", lv_caster, 1);
        if ((lv_overlord > 0)) {
            gf_AddShadowEnergy(false, lv_owner, 30);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shadowplay_Init () {
    gt_Shadowplay = TriggerCreate("gt_Shadowplay_Func");
    TriggerAddEventUnitAbility(gt_Shadowplay, null, AbilityCommand("ShadowHeroShadowplay", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energytap
//--------------------------------------------------------------------------------------------------
bool gt_Energytap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;
    fixed lv_energycost;
    fixed lv_heal;
    int lv_darkenergygain;
    int lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_owner = EventPlayer();
    lv_energycost = (-4.0 + (0.66 * IntToFixed(TechTreeUpgradeCount(lv_owner, "EnergytapLowEnergy", c_techCountQueuedOrBetter))));
    lv_heal = (((IntToFixed(TechTreeUpgradeCount(lv_owner, "EnergytapBonusHeal", c_techCountQueuedOrBetter)) * 3.0) + 6.0) * libNtve_gf_CatalogReferenceGetAsReal("Accumulator,HealingMultiplier,Amount", EventPlayer()));
    lv_darkenergygain = (TechTreeUpgradeCount(lv_owner, "EnergyTapMagic", c_techCountQueuedOrBetter) * 2);
    lv_timer = 40;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent) > 5.0)) {
        UnitBehaviorAdd(lv_caster, "Energytap", lv_caster, 1);
        while ((UnitIsAlive(lv_caster) == true) && (UnitBehaviorCount(lv_caster, "Energytap") > 0) && (lv_timer > 0)) {
            Wait(0.25, c_timeGame);
            if ((ModI(lv_timer, 4) == 0)) {
                gf_AddShadowEnergy(false, lv_owner, lv_darkenergygain);
            }

            gf_addlife(lv_caster, lv_heal, false);
            gf_addshield(lv_caster, lv_heal, false);
            gf_addenergy(lv_caster, lv_energycost, false);
            if ((UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent) < 5.0)) {
                UnitBehaviorRemove(lv_caster, "Energytap", c_unitBehaviorCountAll);
            }

            lv_timer -= 1;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Energytap_Init () {
    gt_Energytap = TriggerCreate("gt_Energytap_Func");
    TriggerAddEventUnitAbility(gt_Energytap, null, AbilityCommand("ShadowHeroEnergytap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shadowcrash
//--------------------------------------------------------------------------------------------------
bool gt_Shadowcrash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_target;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetPoint();
    lv_owner = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Shadowcrash(TechTreeUpgradeCount(lv_owner, "ShadowcrashPowergain", c_techCountQueuedOrBetter), lv_target, UnitGetPosition(lv_caster), lv_owner, lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shadowcrash_Init () {
    gt_Shadowcrash = TriggerCreate("gt_Shadowcrash_Func");
    TriggerAddEventUnitAbility(gt_Shadowcrash, null, AbilityCommand("ShadowHeroShadowcrash", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: thunderfurycast
//--------------------------------------------------------------------------------------------------
bool gt_thunderfurycast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Thunderfury(EventUnit(), EventUnitTargetPoint(), UnitGetOwner(EventUnit()), UnitGetCustomValue(EventUnit(), 10), UnitGetCustomValue(EventUnit(), 11), UnitGetCustomValue(EventUnit(), 12));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_thunderfurycast_Init () {
    gt_thunderfurycast = TriggerCreate("gt_thunderfurycast_Func");
    TriggerAddEventUnitAbility(gt_thunderfurycast, null, AbilityCommand("LightningHeroThunderfury", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ltngcast
//--------------------------------------------------------------------------------------------------
bool gt_ltngcast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_Lightning(UnitGetPosition(EventUnit()), UnitGetCustomValue(EventUnit(), 0), UnitGetCustomValue(EventUnit(), 1), UnitGetCustomValue(EventUnit(), 2), UnitGetCustomValue(EventUnit(), 3), FixedToInt(UnitGetCustomValue(EventUnit(), 4)), EventUnitTargetPoint(), EventUnit(), UnitGetOwner(EventUnit()), 40.0, UnitGroupEmpty());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ltngcast_Init () {
    gt_ltngcast = TriggerCreate("gt_ltngcast_Func");
    TriggerAddEventUnitAbility(gt_ltngcast, null, AbilityCommand("LightningHeroLightning", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PowerDrain
//--------------------------------------------------------------------------------------------------
bool gt_PowerDrain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_caster), "StaticEnergy", c_techCountQueuedOrBetter) > 0)) {
        if ((UnitBehaviorCount(lv_caster, "StaticArmor") < FixedToInt(UnitGetCustomValue(lv_caster, 20)))) {
            UnitBehaviorAdd(lv_caster, "StaticArmor", lv_caster, 1);
        }
        else {
            UnitCreateEffectUnit(lv_caster, "ZapSet", lv_caster);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerDrain_Init () {
    gt_PowerDrain = TriggerCreate("gt_PowerDrain_Func");
    TriggerAddEventUnitAbility(gt_PowerDrain, null, AbilityCommand("PowerDrain", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: poisonbolt fired
//--------------------------------------------------------------------------------------------------
bool gt_poisonboltfired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealingReagent") == true)) {
        UnitCreateEffectUnit(EventUnit(), "PoisonHeroPoisonBoltMU", EventUnit());
    }

    if ((UnitGetCustomValue(EventUnit(), 3) < 1.0)) {
        gf_Poisonbolt(EventUnit(), UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), EventUnitTargetPoint(), 3.0, 0.25, (30.0 + ((UnitGetCustomValue(EventUnit(), 0) - 1.5) * 20.0)), UnitGetCustomValue(EventUnit(), 2), UnitGetCustomValue(EventUnit(), 1), UnitGetCustomValue(EventUnit(), 0), UnitGroupEmpty(), false);
    }
    else {
        gf_Poisonbolt(EventUnit(), UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), EventUnitTargetPoint(), 3.0, 0.25, (30.0 + ((UnitGetCustomValue(EventUnit(), 0) - 1.5) * 20.0)), UnitGetCustomValue(EventUnit(), 2), UnitGetCustomValue(EventUnit(), 1), UnitGetCustomValue(EventUnit(), 0), UnitGroupEmpty(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_poisonboltfired_Init () {
    gt_poisonboltfired = TriggerCreate("gt_poisonboltfired_Func");
    TriggerAddEventUnitAbility(gt_poisonboltfired, null, AbilityCommand("Poisonbolt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: muscle poison use
//--------------------------------------------------------------------------------------------------
bool gt_musclepoisonuse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealingReagent") == true)) {
        UnitCreateEffectUnit(EventUnit(), "PoisonHeroMusclePoisonMU", EventUnit());
    }

    if ((UnitGetCustomValue(EventUnit(), 7) < 1.0)) {
        gf_MusclePoison(EventUnit(), UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), EventUnitTargetPoint(), 25.0, UnitGetCustomValue(EventUnit(), 5), UnitGetCustomValue(EventUnit(), 6), false, 9);
    }
    else {
        gf_MusclePoison(EventUnit(), UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), EventUnitTargetPoint(), 25.0, UnitGetCustomValue(EventUnit(), 5), UnitGetCustomValue(EventUnit(), 6), true, 9);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_musclepoisonuse_Init () {
    gt_musclepoisonuse = TriggerCreate("gt_musclepoisonuse_Func");
    TriggerAddEventUnitAbility(gt_musclepoisonuse, null, AbilityCommand("MusclePoison", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: healing reagent cast
//--------------------------------------------------------------------------------------------------
bool gt_healingreagentcast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HealingReagent") == true)) {
        UnitCreateEffectUnit(EventUnit(), "PoisonHeroHealingReagentMU", EventUnit());
    }

    if(UnitGetCustomValue(EventUnit(),16)>0){
    UnitBehaviorAdd(EventUnit(), "HealingReagentBonusArmor", EventUnit(), FixedToInt(UnitGetCustomValue(EventUnit(),16)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_healingreagentcast_Init () {
    gt_healingreagentcast = TriggerCreate("gt_healingreagentcast_Func");
    TriggerAddEventUnitAbility(gt_healingreagentcast, null, AbilityCommand("HealingReagent", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Virulent
//--------------------------------------------------------------------------------------------------
bool gt_Virulent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DamageOverTime(true, false, (UnitGetCustomValue(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 2) / 48.0), UnitGetCustomValue(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1), 0.0625, EventUnit(), UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Virulent_Init () {
    gt_Virulent = TriggerCreate("gt_Virulent_Func");
    TriggerAddEventUnitBehaviorChange(gt_Virulent, null, "Virulent", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(gt_Virulent, null, "Virulent", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DisplayElementalStacks
//--------------------------------------------------------------------------------------------------
bool gt_DisplayElementalStacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    string lv_fire1;
    string lv_fire2;
    string lv_fire3;
    string lv_wind1;
    string lv_wind2;
    string lv_wind3;
    string lv_earth1;
    string lv_earth2;
    string lv_earth3;
    string lv_water1;
    string lv_water2;
    string lv_water3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_fire1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_fire2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_fire3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_wind1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_wind2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_wind3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_earth1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_earth2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_earth3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_water1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_water2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
    lv_water3 = "<img path=\"Assets\\Blank12x12.dds\"/>";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "FireStack") == 1)) {
        lv_fire1 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "FireStack") == 2)) {
            lv_fire1 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
            lv_fire2 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "FireStack") == 3)) {
                lv_fire1 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
                lv_fire2 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
                lv_fire3 = "<img path=\"Assets\\FireStackEx10.dds\"/>";
            }
            else {
                if ((UnitBehaviorCount(EventUnit(), "FireStack") == 0)) {
                    lv_fire1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_fire2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_fire3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                }

            }
        }
    }
    if ((UnitBehaviorCount(EventUnit(), "WindStack") == 1)) {
        lv_wind1 = "<img path=\"Assets\\WindStack.dds\"/>";
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "WindStack") == 2)) {
            lv_wind1 = "<img path=\"Assets\\WindStack.dds\"/>";
            lv_wind2 = "<img path=\"Assets\\WindStack.dds\"/>";
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "WindStack") == 3)) {
                lv_wind1 = "<img path=\"Assets\\WindStack.dds\"/>";
                lv_wind2 = "<img path=\"Assets\\WindStack.dds\"/>";
                lv_wind3 = "<img path=\"Assets\\WindStack.dds\"/>";
            }
            else {
                if ((UnitBehaviorCount(EventUnit(), "WindStack") == 0)) {
                    lv_wind1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_wind2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_wind3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                }

            }
        }
    }
    if ((UnitBehaviorCount(EventUnit(), "EarthStack") == 1)) {
        lv_earth1 = "<img path=\"Assets\\EarthStack.dds\"/>";
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "EarthStack") == 2)) {
            lv_earth1 = "<img path=\"Assets\\EarthStack.dds\"/>";
            lv_earth2 = "<img path=\"Assets\\EarthStack.dds\"/>";
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "EarthStack") == 3)) {
                lv_earth1 = "<img path=\"Assets\\EarthStack.dds\"/>";
                lv_earth2 = "<img path=\"Assets\\EarthStack.dds\"/>";
                lv_earth3 = "<img path=\"Assets\\EarthStack.dds\"/>";
            }
            else {
                if ((UnitBehaviorCount(EventUnit(), "EarthStack") == 0)) {
                    lv_earth1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_earth2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_earth3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                }

            }
        }
    }
    if ((UnitBehaviorCount(EventUnit(), "WaterStack") == 1)) {
        lv_water1 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
    }
    else {
        if ((UnitBehaviorCount(EventUnit(), "WaterStack") == 2)) {
            lv_water1 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
            lv_water2 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
        }
        else {
            if ((UnitBehaviorCount(EventUnit(), "WaterStack") == 3)) {
                lv_water1 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
                lv_water2 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
                lv_water3 = "<img path=\"Assets\\WaterStackEx1.dds\"/>";
            }
            else {
                if ((UnitBehaviorCount(EventUnit(), "WaterStack") == 0)) {
                    lv_water1 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_water2 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                    lv_water3 = "<img path=\"Assets\\Blank12x12.dds\"/>";
                }

            }
        }
    }
    CatalogFieldValueSet(c_gameCatalogButton, "ElementalStacks", "ChargeText", EventPlayer(), ((lv_fire3 + lv_wind3) + ((lv_earth3 + lv_water3) + ((("<n/>" + lv_fire2) + lv_wind2) + ((lv_earth2 + lv_water2) + ((("<n/>" + lv_fire1) + lv_wind1) + (lv_earth1 + lv_water1)))))));
    CatalogFieldValueSet(c_gameCatalogButton, "ElementalStacks2", "ChargeText", EventPlayer(), ((lv_fire3 + lv_wind3) + ((lv_earth3 + lv_water3) + ((("<n/>" + lv_fire2) + lv_wind2) + ((lv_earth2 + lv_water2) + ((("<n/>" + lv_fire1) + lv_wind1) + (lv_earth1 + lv_water1)))))));
    if ((UnitHasBehavior2(EventUnit(), "ButtonUpdater1") == true)) {
        libNtve_gf_SetBehaviorCount(EventUnit(), "ButtonUpdater1", EventUnit(), 0);
        libNtve_gf_SetBehaviorCount(EventUnit(), "ButtonUpdater2", EventUnit(), 1);
    }
    else {
        libNtve_gf_SetBehaviorCount(EventUnit(), "ButtonUpdater1", EventUnit(), 1);
        libNtve_gf_SetBehaviorCount(EventUnit(), "ButtonUpdater2", EventUnit(), 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayElementalStacks_Init () {
    gt_DisplayElementalStacks = TriggerCreate("gt_DisplayElementalStacks_Func");
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "YetAnotherWeirdButtonRelatedDummyBehavior", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "FireStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "WindStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "EarthStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "WaterStack", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "EarthStack", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_DisplayElementalStacks, null, "WaterStack", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbit
//--------------------------------------------------------------------------------------------------
bool gt_Orbit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_host;
    int lv_player;
    unit[11] lv_missile;
    int lv_count;
    fixed lv_speed;
    int lv_i;
    int lv_lifetime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_host = EventUnit();
    lv_player = UnitGetOwner(lv_host);
    lv_count = (1 + TechTreeUpgradeCount(lv_player, "Duel", c_techCountQueuedOrBetter));
    lv_lifetime = 240;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i < lv_count)) {
        UnitCreate(1, "BladeStormUnit", c_unitCreateIgnorePlacement, UnitGetOwner(lv_host), UnitGetPosition(lv_host), 270.0);
        lv_missile[lv_i] = UnitLastCreated();
        libNtve_gf_SetBehaviorCount(lv_missile[lv_i], "BladeStorm", lv_host, 1);
        lv_i += 1;
    }
    while ((lv_lifetime > 0) && (UnitIsAlive(lv_host) == true)) {
        lv_i = 0;
        lv_speed += 16.0;
        lv_lifetime -= 1;
        if ((lv_count < (1 + TechTreeUpgradeCount(lv_player, "Duel", c_techCountQueuedOrBetter)))) {
            UnitCreate(1, "BladeStormUnit", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lv_host), 270.0);
            lv_missile[1] = UnitLastCreated();
            libNtve_gf_SetBehaviorCount(lv_missile[1], "BladeStorm", lv_host, 1);
            lv_count += 1;
        }

        while ((lv_i < lv_count)) {
            if ((UnitIsAlive(lv_missile[lv_i]) == true)) {
                UnitSetPosition(lv_missile[lv_i], PointWithOffsetPolar(UnitGetPosition(lv_host), 2.0, (((360.0 / lv_count) * lv_i) + lv_speed)), true);
            }

            lv_i += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < lv_count)) {
        UnitKill(lv_missile[lv_i]);
        lv_i += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orbit_Init () {
    gt_Orbit = TriggerCreate("gt_Orbit_Func");
    TriggerAddEventUnitBehaviorChange(gt_Orbit, null, "Orbit", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Orbit 2
//--------------------------------------------------------------------------------------------------
bool gt_Orbit2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_host;
    int lv_player;
    unit[11] lv_missile;
    int lv_count;
    fixed lv_speed;
    int lv_i;
    int lv_lifetime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_host = EventUnit();
    lv_player = UnitGetOwner(lv_host);
    lv_count = (1 + TechTreeUpgradeCount(lv_player, "Duel", c_techCountQueuedOrBetter));
    lv_lifetime = 240;

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "Orbit", c_techCountQueuedOrBetter) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_i < lv_count)) {
        UnitCreate(1, "BladeStormUnit", c_unitCreateIgnorePlacement, UnitGetOwner(lv_host), UnitGetPosition(lv_host), 270.0);
        lv_missile[lv_i] = UnitLastCreated();
        libNtve_gf_SetBehaviorCount(lv_missile[lv_i], "BladeStorm", lv_host, 1);
        lv_i += 1;
    }
    while ((lv_lifetime > 0) && (UnitIsAlive(lv_host) == true)) {
        lv_i = 0;
        lv_speed += 10.0;
        lv_lifetime -= 1;
        if ((lv_count < (1 + TechTreeUpgradeCount(lv_player, "Duel", c_techCountQueuedOrBetter)))) {
            UnitCreate(1, "BladeStormUnit", c_unitCreateIgnorePlacement, lv_player, UnitGetPosition(lv_host), 270.0);
            lv_missile[1] = UnitLastCreated();
            libNtve_gf_SetBehaviorCount(lv_missile[1], "BladeStorm", lv_host, 1);
            lv_count += 1;
        }

        while ((lv_i < lv_count)) {
            if ((UnitIsAlive(lv_missile[lv_i]) == true)) {
                UnitSetPosition(lv_missile[lv_i], PointWithOffsetPolar(UnitGetPosition(lv_host), 4.0, (((360.0 / lv_count) * lv_i) - lv_speed)), true);
            }

            lv_i += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    lv_i = 0;
    while ((lv_i < lv_count)) {
        UnitKill(lv_missile[lv_i]);
        lv_i += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Orbit2_Init () {
    gt_Orbit2 = TriggerCreate("gt_Orbit2_Func");
    TriggerAddEventUnitBehaviorChange(gt_Orbit2, null, "Orbit", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Blade Storm Cast
//--------------------------------------------------------------------------------------------------
bool gt_BladeStormCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_target;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_caster), "Duel", c_techCountQueuedOrBetter) == 0)) {
        if ((UnitBehaviorCount(lv_caster, "CastLeftSide") == 1)) {
            gf_BladeStormLeft(EventUnit(), EventUnitTargetPoint());
        }
        else {
            gf_BladeStormRight(EventUnit(), EventUnitTargetPoint());
        }
    }
    else {
        gf_BladeStormLeft(EventUnit(), EventUnitTargetPoint());
        gf_BladeStormRight(EventUnit(), EventUnitTargetPoint());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BladeStormCast_Init () {
    gt_BladeStormCast = TriggerCreate("gt_BladeStormCast_Func");
    TriggerAddEventUnitAbility(gt_BladeStormCast, null, AbilityCommand("BladeStorm", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leap Cast Hurdle
//--------------------------------------------------------------------------------------------------
bool gt_LeapCastHurdle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    point lv_target;
    unit lv_missile;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_target = EventUnitTargetPoint();

    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "Hurdle", c_techCountQueuedOrBetter) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(UnitGetOwner(lv_caster), "Duel", c_techCountQueuedOrBetter) == 0)) {
        if ((UnitBehaviorCount(lv_caster, "CastLeftSide") == 1)) {
            gf_BladeStormLeft(EventUnit(), EventUnitTargetPoint());
        }
        else {
            gf_BladeStormRight(EventUnit(), EventUnitTargetPoint());
        }
    }
    else {
        gf_BladeStormLeft(EventUnit(), EventUnitTargetPoint());
        gf_BladeStormRight(EventUnit(), EventUnitTargetPoint());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeapCastHurdle_Init () {
    gt_LeapCastHurdle = TriggerCreate("gt_LeapCastHurdle_Func");
    TriggerAddEventUnitAbility(gt_LeapCastHurdle, null, AbilityCommand("MLLeap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buff Application
//--------------------------------------------------------------------------------------------------
bool gt_BuffApplication_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto1E37A3E4_val;

    // Variable Initialization
    lv_i = RandomInt(1, 6);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitCreatedUnit()) == "Broodling") || (UnitGetType(EventUnitCreatedUnit()) == "HorrorZergling") || (UnitGetType(EventUnitCreatedUnit()) == "SwarmSpawn"))) {
        libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "DifficultyBuff", EventUnitCreatedUnit(), ((FixedToInt((gv_difficulty - 1.0)) * 4) + (gv_zmaxstage * FixedToInt((gv_difficulty / 1.0)))));
    }

    if ((gv_champion == 1) && (UnitGetOwner(EventUnitCreatedUnit()) == 6) && (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeStructure) == true) && (UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeMechanical) == false)) {
        UnitSetScale(EventUnitCreatedUnit(), 120.0, 120.0, 120.0);
        UnitBehaviorAdd(EventUnitCreatedUnit(), "Champion2", EventUnitCreatedUnit(), 1);
        auto1E37A3E4_val = lv_i;
        if (auto1E37A3E4_val == 1) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "Enrage", EventUnitCreatedUnit(), 1);
        }
        else if (auto1E37A3E4_val == 2) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "FireEnchanted", EventUnitCreatedUnit(), 1);
        }
        else if (auto1E37A3E4_val == 3) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "HasteAuraChampion", EventUnitCreatedUnit(), 1);
        }
        else if (auto1E37A3E4_val == 4) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "LightningEnchanted2", EventUnitCreatedUnit(), 1);
        }
        else if (auto1E37A3E4_val == 5) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "MightAuraChampion", EventUnitCreatedUnit(), 1);
        }
        else if (auto1E37A3E4_val == 6) {
            libNtve_gf_SetBehaviorCount(EventUnitCreatedUnit(), "StoneSkin", EventUnitCreatedUnit(), 1);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuffApplication_Init () {
    gt_BuffApplication = TriggerCreate("gt_BuffApplication_Func");
    TriggerAddEventUnitCreated(gt_BuffApplication, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Incapacitation
//--------------------------------------------------------------------------------------------------
bool gt_Incapacitation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "IncapacitatedDemolisher") == true)) {
        UnitSetPosition(EventUnit(), Point(242.3, 11.0), false);
    }
    else {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("Teleport", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 3.0))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Incapacitation_Init () {
    gt_Incapacitation = TriggerCreate("gt_Incapacitation_Func");
    TriggerAddEventUnitBehaviorChange(gt_Incapacitation, UnitRefFromVariable("gv_demolisher"), "IncapacitatedDemolisher", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_Incapacitation, UnitRefFromVariable("gv_demolisher"), "IncapacitatedDemolisher", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrades
//--------------------------------------------------------------------------------------------------
bool gt_Upgrades_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_zmaxstage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(5, "Demolisher", gv_xplevel);
    libNtve_gf_SetUpgradeLevelForPlayer(5, "DemolisherEliteUpgrades", (gv_xplevel - 30));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL5", (gv_xplevel - 4));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL10", (gv_xplevel - 9));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL15", (gv_xplevel - 14));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL20", (gv_xplevel - 19));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL24", (gv_xplevel - 23));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL28", (gv_xplevel - 27));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL32", (gv_xplevel - 31));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL35", (gv_xplevel - 34));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL38", (gv_xplevel - 37));
    libNtve_gf_SetUpgradeLevelForPlayer(5, "LVL40", (gv_xplevel - 39));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgrades_Init () {
    gt_Upgrades = TriggerCreate("gt_Upgrades_Func");
    TriggerAddEventTimePeriodic(gt_Upgrades, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove DR
//--------------------------------------------------------------------------------------------------
bool gt_RemoveDR_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUpgradeCount(6, "Disintegrated", c_techCountQueuedOrBetter) < 100)) {
        TechTreeUpgradeAddLevel(1, "Disintegrated", 1);
        TechTreeUpgradeAddLevel(2, "Disintegrated", 1);
        TechTreeUpgradeAddLevel(3, "Disintegrated", 1);
        TechTreeUpgradeAddLevel(4, "Disintegrated", 1);
        TechTreeUpgradeAddLevel(5, "Disintegrated", 1);
        TechTreeUpgradeAddLevel(6, "Disintegrated", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveDR_Init () {
    gt_RemoveDR = TriggerCreate("gt_RemoveDR_Func");
    TriggerAddEventPlayerEffectUsed(gt_RemoveDR, 5, "DisintegratorDMG");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ProtossAlliesAttackOrders
//--------------------------------------------------------------------------------------------------
bool gt_ProtossAlliesAttackOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_nextattackwave;
    unitgroup lv_enemyystructures;
    int lv_b;

    // Automatic Variable Declarations
    unitgroup autoCFA9B0F9_g;
    int autoCFA9B0F9_u;
    unit autoCFA9B0F9_var;

    // Variable Initialization
    lv_nextattackwave = UnitGroupEmpty();
    lv_enemyystructures = UnitGroupEmpty();
    lv_b = 1;

    // Conditions
    if (testConds) {
        if (!((gv_zmaxstage > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_b = 1;
    lv_enemyystructures = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    gv_alliedUnitsOnMap = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    gv_protossDefenders = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    UnitGroupRemoveUnitGroup(lv_nextattackwave, lv_nextattackwave);
    if ((UnitGroupCount(gv_protossDefenders, c_unitCountAlive) >= (18 + (gv_stage * 3)))) {
        while ((lv_b <= UnitGroupCount(gv_protossDefenders, c_unitCountAlive))) {
            UnitBehaviorAdd(UnitGroupUnit(gv_protossDefenders, lv_b), "UnitIsInActiveArmyTriggers", UnitGroupUnit(gv_protossDefenders, lv_b), 1);
            UnitGroupAdd(gv_alliedUnitsOnMap, UnitGroupUnit(gv_protossDefenders, lv_b));
            UnitGroupAdd(lv_nextattackwave, UnitGroupUnit(gv_protossDefenders, lv_b));
            lv_b += 3;
        }
    }

    gv_protossDefenders = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    autoCFA9B0F9_g = gv_protossDefenders;
    autoCFA9B0F9_u = UnitGroupCount(autoCFA9B0F9_g, c_unitCountAll);
    for (;; autoCFA9B0F9_u -= 1) {
        autoCFA9B0F9_var = UnitGroupUnitFromEnd(autoCFA9B0F9_g, autoCFA9B0F9_u);
        if (autoCFA9B0F9_var == null) { break; }
        UnitIssueOrder(autoCFA9B0F9_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        if ((AIPathingCostMap(UnitGetPosition(autoCFA9B0F9_var), UnitGetPosition(gf_getpylonofstage())) < 0)) {
            UnitIssueOrder(autoCFA9B0F9_var, OrderTargetingPoint(AbilityCommand("Teleport", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 3.0))), c_orderQueueReplace);
        }

    }
    gv_alliedUnitsOnMap = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    gf_ProtossAttackAI(lv_nextattackwave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ProtossAlliesAttackOrders_Init () {
    gt_ProtossAlliesAttackOrders = TriggerCreate("gt_ProtossAlliesAttackOrders_Func");
    TriggerAddEventTimePeriodic(gt_ProtossAlliesAttackOrders, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KillHatch
//--------------------------------------------------------------------------------------------------
bool gt_KillHatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemymainstuctures;
    unitgroup lv_enemyystructures;

    // Automatic Variable Declarations
    unitgroup auto493870DB_g;
    int auto493870DB_u;
    unit auto493870DB_var;
    unitgroup autoDDCD5C42_g;
    int autoDDCD5C42_u;
    unit autoDDCD5C42_var;
    unitgroup auto66117A71_g;
    int auto66117A71_u;
    unit auto66117A71_var;
    unitgroup autoEEBDB556_g;
    int autoEEBDB556_u;
    unit autoEEBDB556_var;
    unitgroup autoBCCEC3A5_g;
    int autoBCCEC3A5_u;
    unit autoBCCEC3A5_var;
    unitgroup auto1D029356_g;
    int auto1D029356_u;
    unit auto1D029356_var;

    // Variable Initialization
    lv_enemymainstuctures = UnitGroupEmpty();
    lv_enemyystructures = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enemyystructures = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto493870DB_g = lv_enemyystructures;
    auto493870DB_u = UnitGroupCount(auto493870DB_g, c_unitCountAll);
    for (;; auto493870DB_u -= 1) {
        auto493870DB_var = UnitGroupUnitFromEnd(auto493870DB_g, auto493870DB_u);
        if (auto493870DB_var == null) { break; }
        if (((UnitHasBehavior2(auto493870DB_var, "IsMainObjective") == true) && ((UnitGetType(auto493870DB_var) == "Hatchery") || (UnitGetType(auto493870DB_var) == "Lair") || (UnitGetType(auto493870DB_var) == "Hive")))) {
            UnitGroupRemove(lv_enemyystructures, auto493870DB_var);
        }

    }
    autoDDCD5C42_g = UnitGroup("Hatchery", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDDCD5C42_u = UnitGroupCount(autoDDCD5C42_g, c_unitCountAll);
    for (;; autoDDCD5C42_u -= 1) {
        autoDDCD5C42_var = UnitGroupUnitFromEnd(autoDDCD5C42_g, autoDDCD5C42_u);
        if (autoDDCD5C42_var == null) { break; }
        if ((UnitHasBehavior2(autoDDCD5C42_var, "IsMainObjective") == true)) {
            UnitGroupAdd(lv_enemymainstuctures, autoDDCD5C42_var);
        }

    }
    auto66117A71_g = UnitGroup("Lair", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto66117A71_u = UnitGroupCount(auto66117A71_g, c_unitCountAll);
    for (;; auto66117A71_u -= 1) {
        auto66117A71_var = UnitGroupUnitFromEnd(auto66117A71_g, auto66117A71_u);
        if (auto66117A71_var == null) { break; }
        if ((UnitHasBehavior2(auto66117A71_var, "IsMainObjective") == true)) {
            UnitGroupAdd(lv_enemymainstuctures, auto66117A71_var);
        }

    }
    autoEEBDB556_g = UnitGroup("Hive", 6, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEEBDB556_u = UnitGroupCount(autoEEBDB556_g, c_unitCountAll);
    for (;; autoEEBDB556_u -= 1) {
        autoEEBDB556_var = UnitGroupUnitFromEnd(autoEEBDB556_g, autoEEBDB556_u);
        if (autoEEBDB556_var == null) { break; }
        if ((UnitHasBehavior2(autoEEBDB556_var, "IsMainObjective") == true)) {
            UnitGroupAdd(lv_enemymainstuctures, autoEEBDB556_var);
        }

    }
    if ((UnitGroupCount(lv_enemyystructures, c_unitCountAlive) > 0)) {
        autoBCCEC3A5_g = lv_enemymainstuctures;
        autoBCCEC3A5_u = UnitGroupCount(autoBCCEC3A5_g, c_unitCountAll);
        for (;; autoBCCEC3A5_u -= 1) {
            autoBCCEC3A5_var = UnitGroupUnitFromEnd(autoBCCEC3A5_g, autoBCCEC3A5_u);
            if (autoBCCEC3A5_var == null) { break; }
            libNtve_gf_SetBehaviorCount(autoBCCEC3A5_var, "KillHatch", autoBCCEC3A5_var, 0);
        }
    }
    else {
        if ((UnitGroupCount(lv_enemymainstuctures, c_unitCountAlive) > 0)) {
            auto1D029356_g = lv_enemymainstuctures;
            auto1D029356_u = UnitGroupCount(auto1D029356_g, c_unitCountAll);
            for (;; auto1D029356_u -= 1) {
                auto1D029356_var = UnitGroupUnitFromEnd(auto1D029356_g, auto1D029356_u);
                if (auto1D029356_var == null) { break; }
                libNtve_gf_SetBehaviorCount(auto1D029356_var, "KillHatch", auto1D029356_var, 1);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillHatch_Init () {
    gt_KillHatch = TriggerCreate("gt_KillHatch_Func");
    TriggerAddEventTimePeriodic(gt_KillHatch, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Cleanup Add
//--------------------------------------------------------------------------------------------------
bool gt_StructureCleanupAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Overseer") || (UnitFilterMatch(EventUnitCreatedUnit(), 6, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(EventUnitCreatedUnit(), 6, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) != "NydusCanal"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) != "EvolutionChamber"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 6))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_enemyStucturesOfStage[gv_stage], EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StructureCleanupAdd_Init () {
    gt_StructureCleanupAdd = TriggerCreate("gt_StructureCleanupAdd_Func");
    TriggerAddEventUnitCreated(gt_StructureCleanupAdd, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Cleanup Kill
//--------------------------------------------------------------------------------------------------
bool gt_StructureCleanupKill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAEE4E188_g;
    int autoAEE4E188_u;
    unit autoAEE4E188_var;
    unitgroup auto037F8B7B_g;
    int auto037F8B7B_u;
    unit auto037F8B7B_var;
    unitgroup auto8AAC57E9_g;
    int auto8AAC57E9_u;
    unit auto8AAC57E9_var;
    unitgroup auto5C44823F_g;
    int auto5C44823F_u;
    unit auto5C44823F_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Pylon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAEE4E188_g = UnitGroup("ZergLord", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoAEE4E188_u = UnitGroupCount(autoAEE4E188_g, c_unitCountAll);
    for (;; autoAEE4E188_u -= 1) {
        autoAEE4E188_var = UnitGroupUnitFromEnd(autoAEE4E188_g, autoAEE4E188_u);
        if (autoAEE4E188_var == null) { break; }
        libNtve_gf_ShowHideUnit(autoAEE4E188_var, false);
    }
    auto037F8B7B_g = gv_enemyStucturesOfStage[(gv_stage + 2)];
    auto037F8B7B_u = UnitGroupCount(auto037F8B7B_g, c_unitCountAll);
    for (;; auto037F8B7B_u -= 1) {
        auto037F8B7B_var = UnitGroupUnitFromEnd(auto037F8B7B_g, auto037F8B7B_u);
        if (auto037F8B7B_var == null) { break; }
        if ((UnitFilterMatch(auto037F8B7B_var, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            libNtve_gf_ShowHideUnit(auto037F8B7B_var, false);
        }
        else {
            UnitKill(auto037F8B7B_var);
        }
    }
    auto8AAC57E9_g = gv_enemyStucturesOfStage[(gv_stage + 3)];
    auto8AAC57E9_u = UnitGroupCount(auto8AAC57E9_g, c_unitCountAll);
    for (;; auto8AAC57E9_u -= 1) {
        auto8AAC57E9_var = UnitGroupUnitFromEnd(auto8AAC57E9_g, auto8AAC57E9_u);
        if (auto8AAC57E9_var == null) { break; }
        if ((UnitFilterMatch(auto8AAC57E9_var, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            libNtve_gf_ShowHideUnit(auto8AAC57E9_var, false);
        }
        else {
            UnitKill(auto8AAC57E9_var);
        }
    }
    auto5C44823F_g = gv_enemyStucturesOfStage[(gv_stage + 4)];
    auto5C44823F_u = UnitGroupCount(auto5C44823F_g, c_unitCountAll);
    for (;; auto5C44823F_u -= 1) {
        auto5C44823F_var = UnitGroupUnitFromEnd(auto5C44823F_g, auto5C44823F_u);
        if (auto5C44823F_var == null) { break; }
        if ((UnitFilterMatch(auto5C44823F_var, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            libNtve_gf_ShowHideUnit(auto5C44823F_var, false);
        }
        else {
            UnitKill(auto5C44823F_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StructureCleanupKill_Init () {
    gt_StructureCleanupKill = TriggerCreate("gt_StructureCleanupKill_Func");
    TriggerAddEventUnitDied(gt_StructureCleanupKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase1(again)
//--------------------------------------------------------------------------------------------------
bool gt_activatebase1again_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;
    unit lv_z1;
    unit lv_z2;
    unit lv_probe;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto52CA57C8_g;
    int auto52CA57C8_u;
    unit auto52CA57C8_var;

    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto52CA57C8_g = UnitGroup("Pylon", 5, RegionCircle(Point(242.0, 11.0), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto52CA57C8_u = UnitGroupCount(auto52CA57C8_g, c_unitCountAll);
    for (;; auto52CA57C8_u -= 1) {
        auto52CA57C8_var = UnitGroupUnitFromEnd(auto52CA57C8_g, auto52CA57C8_u);
        if (auto52CA57C8_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto52CA57C8_var, false);
    }
    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(237,10);
    lv_cannonpoints[1] = Point(247,10);
    lv_cannonpoints[2] = Point(238,60);
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(242.0, 10.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(242.0, 58.0), 270.0);
    lv_z1 = UnitLastCreated();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(242.0, 10.0), Point(242.0, 25.0), Point(232.0, 40.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), null, null, 6, 4, true);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(242.0, 10.0), Point(242.0, 25.0), Point(232.0, 40.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), null, null, 6, 4, true);
    }
    while (((UnitIsAlive(lv_z1) == true) || (UnitIsAlive(lv_z2) == true))) {
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[0]), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[1]), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
    }
    gv_stage += 1;
    TriggerExecute(gt_activatebase2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase1again_Init () {
    gt_activatebase1again = TriggerCreate("gt_activatebase1again_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase2
//--------------------------------------------------------------------------------------------------
bool gt_activatebase2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pylon;
    unit lv_z1;
    unit lv_z2;
    unit lv_probe;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto0B9C5D9F_g;
    int auto0B9C5D9F_u;
    unit auto0B9C5D9F_var;

    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto0B9C5D9F_g = UnitGroup("Pylon", 5, RegionCircle(Point(242.0, 11.0), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0B9C5D9F_u = UnitGroupCount(auto0B9C5D9F_g, c_unitCountAll);
    for (;; auto0B9C5D9F_u -= 1) {
        auto0B9C5D9F_var = UnitGroupUnitFromEnd(auto0B9C5D9F_g, auto0B9C5D9F_u);
        if (auto0B9C5D9F_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto0B9C5D9F_var, true);
    }
    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(238,58);
    lv_cannonpoints[1] = Point(242,60);
    lv_cannonpoints[2] = Point(238,60);
    DialogControlSetVisible(gv_teleportdialogbuttons[1], PlayerGroupAll(), true);
    gv_demolisher = UnitGroupUnit(UnitGroup("Demolisher", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((PlayerGroupCount(PlayerGroupActive()) == 1) && (gv_demolisher == null)) {
        UnitCreate(1, "Demolisher", 0, 5, UnitGetPosition(gf_getpylonofprevstage()), 270.0);
        gv_demolisher = UnitLastCreated();
        gf_ProtossAttackAI(libNtve_gf_ConvertUnitToUnitGroup(gv_demolisher));
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        gv_ztimeoflaststage = gv_zgametime[3];
        UnitKill(UnitFromId(7));
        UnitKill(UnitFromId(8));
        UnitKill(UnitFromId(1));
        UnitKill(UnitFromId(4));
        TriggerExecute(gt_Ultrabros, true, false);
        gf_banknewtime();
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(242.0, 57.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[0], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 2);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[1], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 2);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[2], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 2);
        gf_SpawningRandom(Point(236.0, 98.0), Point(204.0, 58.0), Point(241.0, 96.0), Point(195.0, 67.0), null, null, null, null, null, null, null, null, null, null, null, null, null, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Forge", c_unitCreateIgnorePlacement, 5, Point(250,9));
        gf_laForge(UnitLastCreated());
    }
    else {
        if ((gf_getpylonofstage() == null)) {
            UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(242.0, 57.0), 270.0);
            if ((gv_difficulty <= 2.0)) {
                UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
            }

            lv_pylon = UnitLastCreated();
        }
        else {
            lv_pylon = gf_getpylonofstage();
            libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
        }
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(238.0, 60.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        gf_SpawningRandom(Point(236.0, 98.0), Point(204.0, 58.0), Point(241.0, 96.0), Point(195.0, 67.0), Point(201,103), Point(172,94), Point(226,76), null, null, null, null, null, null, null, null, null, null, 2, 0, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 7, 0);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(242.0, 58.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    lv_z1 = UnitGroupUnit(UnitGroup("Hatchery", 6, RegionCircle(Point(186.0, 118.0), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(186.0, 118.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Hatchery", 6, RegionCircle(Point(180.0, 115.0), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(180.0, 115.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z2 = UnitLastCreated();
    }

    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z2, Point(242.0, 57.0), Point(232.0, 115.0), Point(184.0, 55.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), null, null, 6, 4, true);
    }
    else {
        gf__2pathbase(lv_z1, lv_z2, Point(242.0, 57.0), Point(232.0, 115.0), Point(184.0, 55.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), null, null, 6, 4, true);
    }
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true) || (UnitIsAlive(lv_z2) == true))) {
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[0]), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[1]), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[2]), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(238.0, 60.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activatebase3, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[1], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase2_Init () {
    gt_activatebase2 = TriggerCreate("gt_activatebase2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase3
//--------------------------------------------------------------------------------------------------
bool gt_activatebase3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(180,113);
    lv_cannonpoints[1] = Point(180,115);
    lv_cannonpoints[2] = Point(183,115);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if ((gv_difficulty >= 4.0)) {
            TechTreeUpgradeAddLevel(6, "difficultyupgrade2", 1);
        }

        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        TechTreeUpgradeAddLevel(6, "ZergMeleeWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "ZergMissileWeaponsLevel1", 1);
        TechTreeUpgradeAddLevel(6, "ZergGroundArmorsLevel1", 1);
        UnitKill(UnitFromId(2));
        UnitKill(UnitFromId(3));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[0], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 1);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[1], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 1);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[2], 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "Newbprotection", UnitLastCreated(), 1);
        TriggerExecute(gt_evolutionquest2, true, false);
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(183.0, 115.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[2], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(230.0, 162.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(191.0, 150.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(177.0, 142.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(220.0, 143.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(181.0, 134.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(191.0, 134.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(219.0, 164.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(249.0, 161.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(252.0, 168.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(249.0, 179.0), 90.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(230.0, 190.0), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(230.0, 190.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(183.0, 113.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(183.0, 113.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    gf_SpawningRandom(Point(173.0, 149.0), Point(213.0, 132.0), Point(220.0, 157.0), Point(249.0, 184.0), null, null, null, null, null, null, null, null, null, null, null, null, null, RandomInt(1, 2), 0, 1, RandomInt(0, 1), 1, 1, 0, 0, 0, 0, 0, 0, 4, 0);
    if ((gv_difficulty > 2.0)) {
        gf_Overseer(Point(191,85), Point(154,86), Point(177,61), Point(217,63), Point(235,111), Point(211,81));
    }

    gf_BossStart();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(183.0, 113.0), Point(213.0, 141.0), Point(213.0, 141.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), null, 12, 6, true);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(183.0, 113.0), Point(213.0, 141.0), Point(213.0, 141.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), null, 12, 6, true);
    }
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true) || (UnitIsAlive(lv_z2) == true))) {
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[0]), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[1]), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_cannonpoints[2]), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(183.0, 115.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activatebase4, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[2], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase3_Init () {
    gt_activatebase3 = TriggerCreate("gt_activatebase3_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase4
//--------------------------------------------------------------------------------------------------
bool gt_activatebase4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(228,187);
    lv_cannonpoints[1] = Point(228,185);
    lv_cannonpoints[2] = Point(230,185);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        UnitKill(UnitFromId(5));
        UnitKill(UnitFromId(6));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(228.0, 187.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(228.0, 185.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(230.0, 185.0), 270.0);
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(230.0, 185.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[3], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(212.0, 175.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(214.0, 163.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(194.0, 157.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(180.0, 164.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(209.0, 181.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(180.0, 157.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(167.0, 177.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(229.0, 212.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(229.0, 200.0), 90.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(178.0, 174.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(183.0, 180.0), 270.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(174.0, 163.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(174.0, 163.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(208.0, 160.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(208.0, 160.0), 270.0);
        lv_z2 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(230.0, 187.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(230.0, 187.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    gf_SpawningRandom(Point(180.5, 188.0), Point(161.0, 148.0), Point(239.5, 202.5), Point(201.0, 174.0), null, null, null, null, null, null, null, null, null, null, null, null, null, 0, RandomInt(0, 1), 1, RandomInt(0, 1), RandomInt(0, 2), 2, 1, 0, 0, 0, 0, 0, 4, 0);
    gf_BossStart();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(230.0, 187.0), Point(207.0, 161.0), Point(207.0, 161.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 14, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(230.0, 187.0), Point(230.0, 187.0), Point(230.0, 187.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(230.0, 187.0), Point(207.0, 161.0), Point(207.0, 161.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 14, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(230.0, 187.0), Point(230.0, 187.0), Point(230.0, 187.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
    }
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true))) {
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(228.0, 187.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(228.0, 185.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(230.0, 185.0)), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(230.0, 187.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activatebase5, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[3], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase4_Init () {
    gt_activatebase4 = TriggerCreate("gt_activatebase4_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase5
//--------------------------------------------------------------------------------------------------
bool gt_activatebase5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(171,163);
    lv_cannonpoints[1] = Point(171,165);
    lv_cannonpoints[2] = Point(171,161);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        TechTreeUpgradeAddLevel(6, "ZergMeleeWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "ZergMissileWeaponsLevel2", 1);
        TechTreeUpgradeAddLevel(6, "ZergGroundArmorsLevel2", 1);
        UnitKill(UnitFromId(9));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(171.0, 163.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(171.0, 165.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(171.0, 161.0), 270.0);
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(171.0, 163.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[4], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(161.0, 168.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(155.0, 183.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(143.0, 151.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(156.0, 148.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(163.0, 181.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(141.0, 164.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(138.0, 152.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(112.0, 166.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(128.0, 157.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(115.0, 153.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(118.0, 177.0), 90.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(98.0, 161.0), 90.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(116.0, 137.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(116.0, 137.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Hatchery", 6, RegionCircle(Point(110.0, 170.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(110.0, 170.0), 270.0);
        lv_z2 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(173.0, 163.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(173.0, 163.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    gf_BossStart();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(173.0, 163.0), Point(143.0, 160.0), Point(143.0, 160.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 14, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(230.0, 187.0), Point(230.0, 187.0), Point(230.0, 187.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(173.0, 163.0), Point(143.0, 160.0), Point(143.0, 160.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 14, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(230.0, 187.0), Point(230.0, 187.0), Point(230.0, 187.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
    }
    gf_SpawningRandom(Point(138.0, 135.0), Point(167.0, 140.0), Point(174.0, 187.0), Point(111.0, 183.0), Point(98.0, 150.0), null, null, null, null, null, null, null, null, null, null, null, null, 1, 0, RandomInt(0, 1), RandomInt(0, 2), RandomInt(0, 1), RandomInt(0, 1), 2, 2, 0, 0, 0, 0, 5, 0);
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true))) {
        if ((UnitIsAlive(lv_probe) == true)) {
        }
        else {
            UnitCreate(1, "Probe", 0, 5, Point(245.0, 58.0), 270.0);
            lv_probe = UnitLastCreated();
        }
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(171.0, 163.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(171.0, 165.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(171.0, 161.0)), c_orderQueueAddToEnd);
        Wait(3.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(171.0, 165.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        gv_stage += 1;
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activatebase6, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[4], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase5_Init () {
    gt_activatebase5 = TriggerCreate("gt_activatebase5_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase6
//--------------------------------------------------------------------------------------------------
bool gt_activatebase6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_z3;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;
    timer lv_tt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();
    lv_tt = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(116,137);
    lv_cannonpoints[1] = Point(113,137);
    lv_cannonpoints[2] = Point(119,137);
    TimerStart(lv_tt, 60.0, false, c_timeGame);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        UnitKill(UnitFromId(10));
        UnitKill(UnitFromId(11));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(116.0, 137.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(113.0, 137.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(119.0, 137.0), 270.0);
        gf_thorboss1(Point(233.0, 114.0));
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(116.0, 137.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[5], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(137.0, 108.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(120.0, 97.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(101.0, 111.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(120.0, 71.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(83.0, 119.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(74.0, 84.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(86.0, 67.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(96.0, 56.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(60.0, 62.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(74.0, 56.0), 270.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(69.0, 60.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(69.0, 60.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Hatchery", 6, RegionCircle(Point(113.0, 64.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(113.0, 64.0), 270.0);
        lv_z2 = UnitLastCreated();
    }

    lv_z3 = UnitGroupUnit(UnitGroup("Hatchery", 6, RegionCircle(Point(61.0, 100.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z3 == null)) {
        UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 6, Point(61.0, 100.0), 270.0);
        lv_z3 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(116.0, 139.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(116.0, 137.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_BossStart();
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(116.0, 139.0), Point(123.0, 65.0), Point(78.0, 115.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 16, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(116.0, 139.0), Point(128.0, 90.0), Point(128.0, 90.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
        gf__2pathbase(lv_z3, lv_z3, Point(116.0, 139.0), Point(103.0, 109.0), Point(103.0, 109.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(116.0, 139.0), Point(123.0, 65.0), Point(78.0, 115.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 16, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(116.0, 139.0), Point(128.0, 90.0), Point(128.0, 90.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
        gf__2pathbase(lv_z3, lv_z3, Point(116.0, 139.0), Point(103.0, 109.0), Point(103.0, 109.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
    }
    gf_SpawningRandom(Point(96.0, 113.0), Point(80.0, 126.0), Point(87.0, 102.0), Point(98.0, 97.0), Point(133.0, 98.0), Point(113.0, 97.0), Point(112.0, 83.0), Point(133.0, 70.0), Point(137.0, 128.0), Point(137.0, 128.0), null, null, null, null, null, null, null, RandomInt(1, 3), RandomInt(0, 2), RandomInt(2, 3), RandomInt(2, 3), 1, RandomInt(0, 1), 6, 0, 0, 0, 0, 0, 9, 0);
    if ((gv_champion == 1)) {
        if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
            gf_SpawningBuilding4(Point(104,84), Point(104,84), 1, 18, true, 250.0, "UltraliskCavern", "SwarmHostSplitA", StringExternal("Param/Value/DC1EE4B7"), 11, null, 0, null, true, true, 0, 0, false, 6);
        }
        else {
            gf_SpawningRandom(Point(98.0, 71.0), Point(140.0, 70.0), Point(68,102), Point(125,51), Point(60,108), Point(82,93), Point(99,49), Point(86,51), Point(76,76), Point(94,84), Point(59,90), Point(54,86), Point(107,50), null, null, null, null, RandomInt(1,2), RandomInt(1,2), RandomInt(2,3), RandomInt(2,3), RandomInt(1,2), 0, RandomInt(1,2), 10, 0, 0, 0, 0, 11, 0);
        }
    }
    else {
        if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
            gf_SpawningBuilding4(Point(104,84), Point(104,84), 1, 18, true, 250.0, "UltraliskCavern", "Ultralisk2", StringExternal("Param/Value/D16E1D54"), 11, null, 0, null, true, true, 0, 0, false, 6);
        }
        else {
            gf_SpawningRandom(Point(98.0, 71.0), Point(140.0, 70.0), Point(68,102), Point(125,51), Point(60,108), Point(82,93), Point(99,49), Point(86,51), Point(76,76), Point(94,84), Point(59,90), Point(54,86), Point(107,50), null, null, null, null, RandomInt(1,2), RandomInt(1,2), RandomInt(2,3), RandomInt(2,3), RandomInt(1,2), 0, RandomInt(1,2), 10, 0, 0, 0, 0, 11, 0);
        }
    }
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true))) {
        if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
            gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
            TimerStart(lv_tt, RandomFixed(75.0, 90.0), false, c_timeGame);
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(116.0, 137.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(113.0, 137.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(119.0, 137.0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(116.0, 139.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        gv_stage += 1;
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activatebase7, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[5], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase6_Init () {
    gt_activatebase6 = TriggerCreate("gt_activatebase6_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activatebase7
//--------------------------------------------------------------------------------------------------
bool gt_activatebase7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_z3;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(66,58);
    lv_cannonpoints[1] = Point(68,58);
    lv_cannonpoints[2] = Point(70,58);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        UnitKill(UnitFromId(13));
        UnitKill(UnitFromId(14));
        UnitKill(UnitFromId(15));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(66.0, 58.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(68.0, 58.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(70.0, 58.0), 270.0);
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(68.0, 58.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[6], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(42.0, 44.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(61.0, 26.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(29.0, 38.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(46.0, 14.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(21.0, 14.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(13.0, 22.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(67.0, 17.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(14.0, 41.0), 270.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(12.0, 15.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(12.0, 15.0), 270.0);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(163.0, 64.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(163.0, 64.0), 270.0);
        lv_z2 = UnitLastCreated();
    }

    lv_z3 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(215.0, 13.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z3 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(215.0, 13.0), 270.0);
        lv_z3 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(68.0, 60.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(68.0, 60.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_BossStart();
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(31.0, 40.0), Point(50.0, 15.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 12, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 9)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
        gf__2pathbase(lv_z3, lv_z3, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(31.0, 40.0), Point(50.0, 15.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 12, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
        gf__2pathbase(lv_z3, lv_z3, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
    }
    gf_SpawningRandom(Point(48,32), Point(9,43), Point(63,9), Point(43,24), Point(36,30), Point(18,31), Point(32,12), Point(30,23), null, null, null, null, null, null, null, null, null, 1, 1, 2, 2, 1, 0, RandomInt(0,1), 1, 0, 0, 0, 0, 8, 0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(83.0, 38.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(84.0, 22.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(100.0, 7.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(116.0, 9.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(100.0, 29.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(118.0, 29.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(130.0, 31.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(131.0, 15.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(143.0, 42.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(148.0, 58.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(167.0, 16.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(178.0, 27.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(192.0, 14.0), 270.0);
    gf_SpawningRandom(Point(80,9), Point(108,3), Point(123,14), Point(101,38), Point(81,43), Point(112,44), null, null, null, null, null, null, null, null, null, null, null, 1, 0, 1, 2, 1, RandomInt(0,1), RandomInt(0,1), 1, 0, 0, 0, 0, 6, 0);
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true))) {
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(66.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(68.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(70.0, 58.0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        if ((gv_stage == 9)) {
            TriggerExecute(gt_activateStage9, true, false);
        }
        else {
            if ((gv_zstage8active == false)) {
                TriggerExecute(gt_activateStage8, false, true);
            }

        }
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[6], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activatebase7_Init () {
    gt_activatebase7 = TriggerCreate("gt_activatebase7_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activateStage8
//--------------------------------------------------------------------------------------------------
bool gt_activateStage8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_b;
    unitgroup lv_army;
    unitgroup lv_warpgates;
    unit lv_z1;
    unit lv_z2;
    unit lv_z3;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;
    int lv_j;
    timer lv_tt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_b = 1;
    lv_army = UnitGroupEmpty();
    lv_warpgates = UnitGroupEmpty();
    lv_cannons = UnitGroupEmpty();
    lv_tt = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) < 5))) {
            return false;
        }

        if (!((gv_zstage8active == false))) {
            return false;
        }

        if (!((gv_stage == 7))) {
            return false;
        }

        if (!((gv_mode == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tt, 240.0, false, c_timeGame);
    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(66,58);
    lv_cannonpoints[1] = Point(68,58);
    lv_cannonpoints[2] = Point(70,58);
    gv_zstage8active = true;
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        TriggerExecute(gt_evolutionquest3, true, false);
    }
    else {
        UnitRemove(UnitGroupUnit(UnitGroup("Pylon", c_playerAny, RegionCircle(Point(146,20), 8.0), UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(68.0, 58.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    lv_z1 = UnitGroupUnit(UnitGroup("GreaterSpire", 6, RegionCircle(Point(147.0, 24.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "GreaterSpire", c_unitCreateIgnorePlacement, 6, Point(147.0, 24.0), 270.0);
        lv_z1 = UnitLastCreated();
        UnitBehaviorAdd(lv_z1, "DodgeballSpire", lv_z1, 1);
        gf_GreaterSpire(lv_z1, 3.0);
    }

    lv_pylon = gf_getpylonofstage();
    libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(68.0, 60.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_BossStart();
    gf_SpawningRandom(Point(171,33), Point(130,9), Point(127,36), Point(154,45), Point(132.5,43.5), Point(185,30), Point(201,17), Point(172,15), null, null, null, null, null, null, null, null, null, 1, RandomInt(0,1), RandomInt(1,3), 1, RandomInt(1,2), 0, 0, 1, 2, 0, 0, 0, 7, 0);
    while ((UnitIsAlive(lv_z1) == true) && (UnitIsAlive(lv_pylon) == true) && (gv_stage != 8)) {
        if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
            TimerStart(lv_tt, RandomFixed(60.0, 90.0), false, c_timeGame);
            if ((RandomInt(0, 1) == 1)) {
                gf_Overseer(Point(107,19), Point(118,34), Point(143,49), Point(92,20), Point(150,10), Point(96,39));
            }
            else {
                gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
            }
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(66.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(68.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(70.0, 58.0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
        if ((gv_champion == 1)) {
            if ((UnitIsAlive(lv_z1) == true)) {
                gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 6, true);
            }

        }
        else {
            if ((UnitIsAlive(lv_z1) == true)) {
                gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(104.0, 13.0), Point(103.0, 27.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 6, true);
            }

        }
    }
    lv_warpgates = UnitGroup("WarpGate", 5, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32))), 0);
    while ((UnitIsAlive(lv_z1) == true) && (UnitIsAlive(lv_pylon) == true)) {
        gv_alliedUnitsOnMap = UnitGroup(null, 5, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        if ((UnitGroupCount(gv_alliedUnitsOnMap, c_unitCountAlive) <= (24 + (gv_stage * 3)))) {
            UnitIssueOrder(UnitGroupClosestToPoint(lv_warpgates, Point(239.5, 11.5)), OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupClosestToPoint(lv_warpgates, Point(245.5, 11.5)), OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupClosestToPoint(lv_warpgates, Point(239.0, 11.5)), OrderTargetingPoint(AbilityCommand("WarpGateTrain", 6), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupClosestToPoint(lv_warpgates, Point(245.5, 11.5)), OrderTargetingPoint(AbilityCommand("WarpGateTrain", 1), UnitGetPosition(gf_getpylonofstage())), c_orderQueueReplace);
        }

        UnitIssueOrder(gv_demolisher, OrderTargetingPoint(AbilityCommand("attack", 0), Point(212.0, 12.0)), c_orderQueueReplace);
        if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
            TimerStart(lv_tt, RandomFixed(60.0, 90.0), false, c_timeGame);
            if ((RandomInt(0, 1) == 1)) {
                gf_Overseer(Point(107,19), Point(118,34), Point(143,49), Point(92,20), Point(150,10), Point(96,39));
            }
            else {
                gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
            }
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(66.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(68.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(70.0, 58.0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(147.0, 24.0), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        while ((lv_j < 4)) {
            if ((gv_hero[lv_j] != null)) {
                if ((UnitHasBehavior2(gv_hero[lv_j], "Dodgeball") == true)) {
                    gf_achievementPossiblyGainedSolo(61, FixedToInt(gv_difficulty), lv_j+1);
                }

            }

            lv_j+=1;
        }
        if ((gv_stage == 9)) {
            TriggerExecute(gt_activateStage9, true, false);
        }

    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[6], PlayerGroupAll(), false);
    }
    gv_zstage8active = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activateStage8_Init () {
    gt_activateStage8 = TriggerCreate("gt_activateStage8_Func");
    TriggerAddEventUnitRegion(gt_activateStage8, null, RegionFromId(27), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: activateStage9
//--------------------------------------------------------------------------------------------------
bool gt_activateStage9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_z2;
    unit lv_z3;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;
    timer lv_tt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cannons = UnitGroupEmpty();
    lv_tt = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_tt, 240.0, false, c_timeGame);
    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(66,58);
    lv_cannonpoints[1] = Point(68,58);
    lv_cannonpoints[2] = Point(70,58);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        TechTreeUpgradeAddLevel(6, "ZergMeleeWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "ZergMissileWeaponsLevel3", 1);
        TechTreeUpgradeAddLevel(6, "ZergGroundArmorsLevel3", 1);
        UnitKill(UnitFromId(12));
        UnitKill(UnitFromId(17));
        UnitKill(UnitFromId(16));
    }
    else {
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(68.0, 58.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(19.0, 68.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(23.0, 62.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(42.0, 70.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(31.0, 82.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(37.0, 97.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(16.0, 98.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(26.0, 110.0), 270.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(43.0, 111.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(43.0, 111.0), 270.0);
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z2 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(8.0, 110.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z2 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(8.0, 110.0), 270.0);
        lv_z2 = UnitLastCreated();
    }

    lv_pylon = gf_getpylonofstage();
    libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    if ((lv_pylon == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(68.0, 60.0), 270.0);
        lv_pylon = UnitLastCreated();
    }

    UnitGroupIssueOrder(UnitGroup("Zealot", 5, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), Point(68.0, 60.0)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Archon", 5, RegionRect(70.0, 0.0, 164.0, 40.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), Point(68.0, 60.0)), c_orderQueueReplace);
    UnitGroupIssueOrder(UnitGroup("Stalker", 5, RegionRect(70.0, 0.0, 164.0, 40.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), Point(68.0, 60.0)), c_orderQueueReplace);
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(68.0, 60.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_BossStart();
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(28.0, 92.0), Point(28.0, 92.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 12, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(68.0, 60.0), Point(28.0, 92.0), Point(28.0, 92.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarmling", 0)), 14, 0, false);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(68.0, 60.0), Point(28.0, 92.0), Point(28.0, 92.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 12, 6, true);
        gf__2pathbase(lv_z2, lv_z2, Point(68.0, 60.0), Point(28.0, 92.0), Point(28.0, 92.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 1)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 1)), 14, 0, false);
    }
    gf_SpawningRandom(Point(28,82), Point(50,71), Point(16.5,107), Point(11,66), Point(21,102), Point(50,99), Point(27,56), Point(32,118), Point(12,93), Point(18,80), Point(19,61), null, null, null, null, null, null, 1, 1, 2, 2, RandomInt(1,2), 0, RandomInt(1,2), RandomInt(1,2), 4, 0, 0, 0, 11, 0);
    gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
    while ((UnitIsAlive(lv_pylon) == true) && ((UnitIsAlive(lv_z1) == true))) {
        if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
            TimerStart(lv_tt, RandomFixed(60.0, 90.0), false, c_timeGame);
            if ((RandomInt(0, 1) == 1)) {
                gf_Overseer(Point(107,19), Point(118,34), Point(143,49), Point(92,20), Point(150,10), Point(96,39));
            }
            else {
                gf_Overseer(Point(96,94), Point(115,59), Point(127,95), Point(88,114), Point(92,84), Point(104,85));
            }
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(66.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(68.0, 58.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(70.0, 58.0)), c_orderQueueAddToEnd);
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gv_stage += 1;
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(66.0, 58.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activateStage10, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[6], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activateStage9_Init () {
    gt_activateStage9 = TriggerCreate("gt_activateStage9_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activateStage10
//--------------------------------------------------------------------------------------------------
bool gt_activateStage10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timer;
    unit lv_z1;
    unit lv_z2;
    unit lv_z3;
    unit lv_z4;
    unit lv_probe;
    unit lv_pylon;
    unitgroup lv_cannons;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i;
    timer lv_tt;

    // Automatic Variable Declarations
    unitgroup auto9BCB9471_g;
    int auto9BCB9471_u;
    unit auto9BCB9471_var;

    // Variable Initialization
    lv_timer = 300;
    lv_cannons = UnitGroupEmpty();
    lv_tt = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BCB9471_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9BCB9471_u = UnitGroupCount(auto9BCB9471_g, c_unitCountAll);
    for (;; auto9BCB9471_u -= 1) {
        auto9BCB9471_var = UnitGroupUnitFromEnd(auto9BCB9471_g, auto9BCB9471_u);
        if (auto9BCB9471_var == null) { break; }
        if ((UnitGetType(auto9BCB9471_var) == "SporeCrawler")) {
            UnitRemove(auto9BCB9471_var);
        }

    }
    gv_zZealotBeamOutS10P2 = false;
    TimerStart(lv_tt, 360.0, false, c_timeGame);
    if (((gv_zmaxstage - gv_stage) > gv_zstageslostinmax)) {
        gv_zstageslostinmax = (gv_zmaxstage - gv_stage);
    }

    lv_cannonpoints[0] = Point(43,117);
    lv_cannonpoints[1] = Point(45,117);
    lv_cannonpoints[2] = Point(47,117);
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gv_ztimeoflaststage = gv_zgametime[3];
        gf_banknewtime();
        UnitKill(UnitFromId(18));
        UnitKill(UnitFromId(19));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(43.0, 117.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(45.0, 117.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(47.0, 117.0), 270.0);
    }
    else {
        UnitRemove(UnitGroupUnit(UnitGroup("Pylon", c_playerAny, RegionCircle(Point(100,230), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(45.0, 117.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            UnitBehaviorRemove(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
    }
    DialogControlSetVisible(gv_teleportdialogbuttons[7], PlayerGroupAll(), true);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(39.0, 142.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(21.0, 154.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(38.0, 176.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(40.0, 206.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(65.0, 237.0), 270.0);
    UnitCreate(1, "SpineCrawler", c_unitCreateIgnorePlacement, 6, Point(91.0, 225.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(64.0, 143.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(77.0, 143.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(72.0, 161.0), 270.0);
    UnitCreate(1, "SporeCrawler", c_unitCreateIgnorePlacement, 6, Point(75.0, 173.0), 270.0);
    lv_z1 = UnitGroupUnit(UnitGroup("Hive", 6, RegionCircle(Point(63.5, 196.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Hive", c_unitCreateIgnorePlacement, 6, Point(63.5, 196.0), 270.0);
        UnitGroupAdd(gv_zbuildinghasquest, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "IsMainObjective", UnitLastCreated(), 1);
        lv_z1 = UnitLastCreated();
    }

    lv_z4 = UnitGroupUnit(UnitGroup("Lair", 6, RegionCircle(Point(101.0, 232.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z4 == null)) {
        UnitCreate(1, "Lair", c_unitCreateIgnorePlacement, 6, Point(101.0, 232.0), 270.0);
        lv_z4 = UnitLastCreated();
    }

    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(45.0, 115.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(45.0, 115.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    Wait(1.0, c_timeGame);
    gf_BossStart();
    TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/4045A2F3"), StringExternal("Param/Value/737FCD08"), 5.0, c_transmissionDurationAdd, false);
    gf_stagetimer(300.0);
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z4, lv_z4, Point(45.0, 115.0), Point(27.0, 200.0), Point(27.0, 200.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 12, 6, true);
    }
    else {
        gf__2pathbase(lv_z4, lv_z4, Point(45.0, 115.0), Point(27.0, 200.0), Point(27.0, 200.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 12, 6, true);
    }
    gf_SpawningRandom(Point(53,154), Point(37,177), Point(23,131), Point(87,154), Point(38,162), Point(13,166), Point(65,170), Point(41,157), Point(11,147), Point(23,167), Point(19,157), Point(10,134), Point(87,138), Point(94,144), Point(44,178), Point(46,144), Point(10,175), 2, 1, 3, 3, 2, RandomInt(0,1), RandomInt(1,2), RandomInt(1,2), 4, 0, 0, 0, 17, 300);
    gf_SpawningRandom(Point(25,193), Point(43,151), Point(80,166), Point(68,155), null, null, null, null, null, null, null, null, null, null, null, null, null, RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), RandomInt(0,2), 4, 0, 0, 0, 4, 300);
    gf_Overseer(Point(17,85), Point(11,96), Point(47,97), Point(32,40), Point(22,58), Point(40,80));
    while ((UnitIsAlive(lv_pylon) == true) && (lv_timer >= 1) && ((UnitIsAlive(lv_z4) == true))) {
        if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
            TimerStart(lv_tt, RandomFixed(60.0, 90.0), false, c_timeGame);
            gf_Overseer(Point(17,85), Point(11,96), Point(47,97), Point(32,40), Point(22,58), Point(40,80));
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(43.0, 117.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(45.0, 117.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(47.0, 117.0)), c_orderQueueAddToEnd);
        lv_timer -= 1;
        Wait(1.0, c_timeGame);
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        gf_GreaterSpire(lv_z1, 3.0);
        gf_Spire(Point(11.0, 189.0), Point(60.0, 184.0), 270.0, 325.0, 90.0, 135.0, 0.5, gv_stage);
        gf_Spire(Point(37.0, 238.0), Point(52.0, 201.0), 180.0, 270.0, 135.0, 110.0, 0.5, gv_stage);
        gf_Spire(Point(97.0, 219.0), Point(77.0, 201.0), 90.0, 180.0, 135.0, 90.0, 0.5, gv_stage);
        if ((gv_champion == 1)) {
            gf__2pathbase(lv_z1, lv_z1, Point(45.0, 115.0), Point(74.0, 150.0), Point(74.0, 150.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 12, 6, true);
        }
        else {
            gf__2pathbase(lv_z1, lv_z1, Point(45.0, 115.0), Point(74.0, 150.0), Point(74.0, 150.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 12, 6, true);
        }
        while ((UnitIsAlive(lv_pylon) == true) && (UnitIsAlive(lv_z4) == true)) {
            if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
                TimerStart(lv_tt, 60.0, false, c_timeGame);
                gf_Overseer(Point(17,85), Point(11,96), Point(47,97), Point(32,40), Point(22,58), Point(40,80));
            }

            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(43.0, 117.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(45.0, 117.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(47.0, 117.0)), c_orderQueueAddToEnd);
            lv_timer -= 1;
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lv_pylon) == false)) {
            DialogControlSetVisible(gv_teleportdialogbuttons[7], PlayerGroupAll(), false);
            return true;
        }

        UnitGroupIssueOrder(UnitGroup(null, 5, RegionRect(0.0, 180.0, 108.0, 240.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), Point(72.0, 196.0)), c_orderQueueReplace);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(101.0, 232.0));
        UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        gv_zZealotBeamOutS10P2 = true;
        while ((UnitIsAlive(lv_pylon) == true) && (UnitIsAlive(lv_z1) == true)) {
            if ((TimerGetRemaining(lv_tt) < 1.0) && (gv_difficulty >= 4.0)) {
                TimerStart(lv_tt, 60.0, false, c_timeGame);
                gf_Overseer(Point(17,85), Point(11,96), Point(47,97), Point(32,40), Point(22,58), Point(40,80));
            }

            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(43.0, 117.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(45.0, 117.0)), c_orderQueueAddToEnd);
            UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(47.0, 117.0)), c_orderQueueAddToEnd);
            lv_timer -= 1;
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lv_pylon) == false)) {
            DialogControlSetVisible(gv_teleportdialogbuttons[7], PlayerGroupAll(), false);
            gv_zZealotBeamOutS10P2 = false;
            return true;
        }

        gv_stage += 1;
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        if ((lv_timer >= 0)) {
            gf_achievements0killaward(23);
        }

        lv_cannons = UnitGroup("PhotonCannon", 5, RegionCircle(Point(45.0, 115.0), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_cannons, c_unitCountAll) > 0)) {
            while ((lv_i < 3)) 
            {
                 if ((UnitGetPosition(UnitGroupUnit(lv_cannons, 1)) == lv_cannonpoints[lv_i])) {
                    lv_cannoncheck[lv_i] = true;
                 }
                 lv_i+=1;
            }
            lv_i = 0;
            UnitBehaviorAdd(UnitGroupUnit(lv_cannons, 1), "ArdentDefender", UnitGroupUnit(lv_cannons, 1), 1);
            UnitGroupRemove(lv_cannons, UnitGroupUnit(lv_cannons, 1));
        }
        while ((lv_i < 3)) 
        {
            if ((lv_cannoncheck[lv_i] == false)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, lv_cannonpoints[lv_i]);
                UnitBehaviorAdd(UnitLastCreated(), "ArdentDefender", UnitLastCreated(), 1);
            }  
            lv_i+=1;    
        }
        TriggerExecute(gt_activateStage11, true, false);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[7], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activateStage10_Init () {
    gt_activateStage10 = TriggerCreate("gt_activateStage10_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: activateStage11
//--------------------------------------------------------------------------------------------------
bool gt_activateStage11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_z1;
    unit lv_probe;
    unit lv_pylon;
    point lv_temp;
    int lv_i;
    int lv_n;
    unitgroup lv_remainingzerg;
    bool[4] lv_cannoncheck;
    point[4] lv_cannonpoints;
    int lv_i2;
    sound lv_sound;
    text lv_tempstring;
    region lv_fireballregion;
    int lv_j;
    int lv_k;
    int lv_rnd;
    bool lv_flawless;
    fixed lv_ambushcounter;
    fixed lv_overssercounter;
    int lv_survivalcounter;

    // Automatic Variable Declarations
    unitgroup autoCC3F29E4_g;
    int autoCC3F29E4_u;
    unit autoCC3F29E4_var;

    // Variable Initialization
    lv_remainingzerg = UnitGroupEmpty();
    lv_fireballregion = RegionRect(180.0, 214.0, 240.0, 232.0);
    lv_flawless = true;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_noFinalSniping();
    lv_cannonpoints[0] = Point(72,194);
    lv_cannonpoints[1] = Point(72,196);
    lv_cannonpoints[2] = Point(72,198);
    if ((gf_getpylonofstage() == null)) {
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(70.0, 196.0), 270.0);
        if ((gv_difficulty <= 2.0)) {
            UnitBehaviorAdd(UnitLastCreated(), "EasyDefense", UnitLastCreated(), (3 - FixedToInt(gv_difficulty)));
        }

        lv_pylon = UnitLastCreated();
    }
    else {
        lv_pylon = gf_getpylonofstage();
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, false);
    }
    if ((TriggerGetExecCount(TriggerGetCurrent()) < 1)) {
        gv_zmaxstage += 1;
        if (((gv_ztimeoflaststage + 120) >= gv_zgametime[3])) {
            gv_zspeedstage = true;
        }

        gf_banknewtime();
        UnitKill(UnitFromId(24));
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(72.0, 194.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(72.0, 196.0), 270.0);
        UnitCreate(1, "PhotonCannon", c_unitCreateIgnorePlacement, 5, Point(72.0, 198.0), 270.0);
        gf_RepeatBossStarttimed();
        gf_DisintegratorSpawn();
    }

    DialogControlSetVisible(gv_teleportdialogbuttons[8], PlayerGroupAll(), true);
    gf_BossStart();
    lv_z1 = UnitGroupUnit(UnitGroup("Hive", 6, RegionCircle(Point(233.0, 224.0), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_z1 == null)) {
        UnitCreate(1, "Hive", c_unitCreateIgnorePlacement, 6, Point(233.0, 224.0), 270.0);
        UnitGroupAdd(gv_zbuildinghasquest, UnitLastCreated());
        lv_z1 = UnitLastCreated();
        gf_GreaterSpire(lv_z1, 3.0);
    }
    else {
        UnitSetPropertyFixed(lv_z1, c_unitPropLifePercent, 100.0);
    }
    UnitBehaviorAdd(lv_z1, "Dontrushmebro", lv_z1, 1);
    lv_probe = UnitGroupUnit(UnitGroup("Probe", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPosition(lv_probe, Point(70.0, 196.0), false);
    UnitIssueOrder(lv_probe, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_Spire(Point(121.0, 251.0), Point(219.0, 233.0), 270.0, 225.0, 90.0, 90.0, 0.75, gv_stage);
    gf_Spire(Point(137.0, 193.0), Point(195.0, 213.0), 0.0, 45.0, 360.0, 90.0, 0.75, gv_stage);
    if ((gv_champion == 1)) {
        gf__2pathbase(lv_z1, lv_z1, Point(73.0, 196.0), Point(127.0, 223.0), Point(127.0, 223.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 17)), Order(AbilityCommand("LarvaTrainSwarm", 1)), Order(AbilityCommand("LarvaTrainSwarm", 20)), Order(AbilityCommand("LarvaTrainSwarm", 17)), 12, 6, true);
    }
    else {
        gf__2pathbase(lv_z1, lv_z1, Point(73.0, 196.0), Point(127.0, 223.0), Point(127.0, 223.0), gv_gateway1, gv_gateway2, Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 6)), Order(AbilityCommand("LarvaTrain", 9)), Order(AbilityCommand("LarvaTrain", 3)), Order(AbilityCommand("LarvaTrain", 6)), 12, 6, true);
    }
    UnitIssueOrder(lv_pylon, OrderTargetingPoint(AbilityCommand("MassRecall", 0), UnitGetPosition(gf_getpylonofprevstage())), c_orderQueueReplace);
    if ((gv_champion == 1)) {
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 3, 12, false, 250.0, "DestructibleSignsIcons", "HotSSwarmling", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 2, 15, false, 250.0, "DestructibleSignsIcons", "RoachCorpser", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 2, 15, false, 250.0, "DestructibleSignsIcons", "RoachCorpser", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 2, 21, false, 250.0, "DestructibleSignsIcons", "HydraliskImpaler", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 2, 21, false, 250.0, "DestructibleSignsIcons", "HydraliskImpaler", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 1, 29, false, 250.0, "DestructibleSignsIcons", "HotSTorrasque", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 1, 32, false, 250.0, "DestructibleSignsIcons", "SwarmHostSplitA", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 1, 40, false, 250.0, "DestructibleSignsIcons", "SwarmQueen2", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,228), 3, 12, false, 250.0, "DestructibleSignsIcons", "HotSSplitterlingBig", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
    }
    else {
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 3, 6, false, 250.0, "DestructibleSignsIcons", "Zergling", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 2, 10, false, 250.0, "DestructibleSignsIcons", "Roach", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 2, 10, false, 250.0, "DestructibleSignsIcons", "Roach", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 2, 14, false, 250.0, "DestructibleSignsIcons", "Hydralisk", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 2, 14, false, 250.0, "DestructibleSignsIcons", "Hydralisk", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 1, 19, false, 250.0, "DestructibleSignsIcons", "Metalisk", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 1, 23, false, 250.0, "DestructibleSignsIcons", "Ultralisk2", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,227), 1, 27, false, 250.0, "DestructibleSignsIcons", "Queen", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,228), 3, 7, false, 250.0, "DestructibleSignsIcons", "Baneling", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
        gf_SpawningBuilding4(Point(0,0), Point(239,222), 1, 31, false, 250.0, "DestructibleSignsIcons", "Queen", null, 0, null, 0, null, false, false, 0, 0, true, gv_stage);
    }
    lv_ambushcounter = (60.0 + 0.0);
    lv_overssercounter = (120.0 + 0.0);
    while ((UnitIsAlive(lv_z1) == true) && (UnitIsAlive(lv_pylon) == true)) {
        if ((UnitGroupCount(gv_alliedUnitsOnMap, c_unitCountAlive) <= (24 + (gv_stage * 3)))) {
            UnitIssueOrder(gv_gateway1, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 5.0))), c_orderQueueReplace);
            UnitIssueOrder(gv_gateway2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 5.0))), c_orderQueueReplace);
            UnitIssueOrder(gv_gateway1, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 5.0))), c_orderQueueReplace);
            UnitIssueOrder(gv_gateway2, OrderTargetingPoint(AbilityCommand("WarpGateTrain", 6), RegionRandomPoint(RegionCircle(UnitGetPosition(gf_getpylonofstage()), 5.0))), c_orderQueueReplace);
        }

        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(72.0, 194.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(72.0, 196.0)), c_orderQueueAddToEnd);
        UnitIssueOrder(lv_probe, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), Point(72.0, 198.0)), c_orderQueueAddToEnd);
        lv_temp = PointWithOffsetPolar(Point(247.0, 217.0), RandomFixed(0.0, 12.0), 90.0);
        gf_SpireFireball2(6, lv_z1, PointWithOffset(lv_temp, -1.0, 0.0), lv_temp, 10.0, 0.25);
        lv_survivalcounter += (TechTreeUpgradeCount(6, "thorquestrewardmutagen", c_techCountQueuedOrBetter) + 1);
        if ((gv_difficulty > 3.0)) {
            gf_achievementPossiblyGainedTeam(68, lv_survivalcounter);
        }

        if ((lv_ambushcounter <= 1.0)) {
            lv_ambushcounter = (5.0 + RandomFixed(16-gv_difficulty, (50.0 - (gv_difficulty * 7.0))));
            if ((TechTreeUpgradeCount(6, "thorquestrewardmutagen", c_techCountQueuedOrBetter) < 1)) {
                lv_ambushcounter *= 2.0;
            }

            if ((gv_difficulty > 2.0)) {
            }

        }
        else {
            lv_ambushcounter -= 1.0;
        }
        if ((lv_overssercounter <= 1.0)) {
            lv_overssercounter = (30.0 + RandomFixed(16-gv_difficulty, (50.0 - (gv_difficulty * 7.0))));
            if ((TechTreeUpgradeCount(6, "thorquestrewardmutagen", c_techCountQueuedOrBetter) < 1)) {
                lv_overssercounter *= 2.0;
            }

            if ((gv_difficulty > 1.0)) {
                if ((RandomInt(0, 2) == 1)) {
                    gf_Overseer(Point(60.0, 177.0), Point(86,158), Point(72,153), Point(57,186), Point(87,143), Point(52,152));
                }
                else {
                    if ((RandomInt(0, 1) == 1)) {
                        gf_Overseer(Point(144,212), Point(156,195), Point(120,191), Point(182,201), Point(137,190), Point(123,197));
                    }
                    else {
                        gf_Overseer(Point(175,233), Point(185,245), Point(140,240), Point(128,243), Point(135,228), Point(148,250));
                    }
                }
            }

        }
        else {
            lv_overssercounter -= 1.0;
        }
        if ((lv_flawless == true) && (libNtve_gf_UnitGetPropertyKills(lv_z1, c_unitPropCurrent) > 0)) {
            lv_flawless = false;
        }

        if ((gv_difficulty >= 2.0)) {
            lv_j = 0;
            lv_rnd = RandomInt(0, 3);
            while ((lv_j < 4)) {
                if ((libNtve_gf_UnitInRegion(gv_hero[ModI(lv_j+lv_rnd, 3)], lv_fireballregion) == true)) {
                    lv_temp = PointWithOffsetPolar(Point(247.0, PointGetY(UnitGetPosition(gv_hero[ModI(lv_j+lv_rnd, 3)]))), 0.0, 90.0);
                    gf_SpireFireball2(6, lv_z1, PointWithOffset(lv_temp, -1.0, 0.0), lv_temp, 10.0, 0.25);
                    lv_j = 4;
                }

                lv_j += 1;
            }
        }

        if ((TechTreeUpgradeCount(6, "thorquestrewardmutagen", c_techCountQueuedOrBetter) == 1)) {
            Wait(1.0, c_timeGame);
        }
        else {
            Wait(0.5, c_timeGame);
        }
    }
    if ((UnitIsAlive(lv_pylon) == true)) {
        libNtve_gf_MakeUnitInvulnerable(lv_pylon, true);
        if ((lv_flawless == true)) {
            gf_achievements0killaward(16);
        }

        gf_winachievementcheck();
        if ((gv_zdeathcount[1] == 0) && (gv_zdeathcount[2] == 0) && (gv_zdeathcount[3] == 0) && (gv_zdeathcount[4] == 0) && (gv_zdeathcount[0] == 0)) {
            gf_achievements0killaward(15);
        }

        gv_stage += 1;
        if ((gv_champion == 1)) {
            gf_gainrewardbonusall(FixedToInt(100*gv_difficulty));
            TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnitType("Pylon", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/F63AC73C"), (StringExternal("Param/Value/0350ED00") + gf_difficultytotext() + StringExternal("Param/Value/66A2CA88") + gf_gametime(gv_zgametime[3]) + StringToText("") + StringExternal("Param/Value/1A4C0E6F") + StringExternal("Param/Value/6DA47058") + IntToText(FixedToInt(gv_difficulty*500)) + StringExternal("Param/Value/568F8508")), 6.0, c_transmissionDurationAdd, false);
        }
        else {
            gf_gainrewardbonusall(FixedToInt(20*gv_difficulty));
            TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnitType("Pylon", false), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/D3257567"), (StringExternal("Param/Value/DC1998A5") + gf_difficultytotext() + StringExternal("Param/Value/6091C9E8") + gf_gametime(gv_zgametime[3]) + StringToText("") + StringExternal("Param/Value/0C481269") + StringExternal("Param/Value/BC87E87A") + IntToText(FixedToInt(gv_difficulty*100)) + StringExternal("Param/Value/33C9DB06")), 6.0, c_transmissionDurationAdd, false);
        }
        autoCC3F29E4_g = UnitGroup(null, 6, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCC3F29E4_u = UnitGroupCount(autoCC3F29E4_g, c_unitCountAll);
        for (;; autoCC3F29E4_u -= 1) {
            autoCC3F29E4_var = UnitGroupUnitFromEnd(autoCC3F29E4_g, autoCC3F29E4_u);
            if (autoCC3F29E4_var == null) { break; }
            if ((UnitGetType(autoCC3F29E4_var) == "SporeCrawler")) {
                UnitRemove(autoCC3F29E4_var);
            }

        }
        gf_banknewtime();
        SoundPlay(SoundLink("ChallengescombinedExecutor00116", -1), PlayerGroupAll(), 100.0, 0.0);
        lv_sound = SoundLastPlayed();
        Wait(3.5, c_timeGame);
        SoundStop(lv_sound, false);
        gf_stage11finalcheckfortimeachievements();
        while ((lv_n < 4)) {
            lv_n += 1;
            if ((PlayerStatus(lv_n) == c_playerStatusActive)) {
                while ((gf_achievementgetlevel(lv_n, 12) < 5) && (gf_achievementgetlevel(lv_n, 12) < gv_zpylonslostthisgame)) {
                    gf_achievementnew(lv_n, 12);
                }
                if ((gv_zpylonslostthisgame == 0)) {
                    gf_achievements0killaward(29);
                }

            }

        }
        lv_n = 0;
        if ((((gv_zgametime[3] < gv_zrecordtimes[FixedToInt(gv_difficulty)])) || ((gv_zgametime[3] < 6276) && (gv_difficulty == 4.0) && (gv_playercount == 1.0)) || ((gv_difficulty > 4.0) && (gv_playercount == 1.0)) || ((gv_zdeathcount[0] == 0) && (gv_zdeathcount[1] == 0) && (gv_zdeathcount[2] == 0) && (gv_zdeathcount[3] == 0) && (gv_zdeathcount[4] == 0) && (gv_zgametime[3] < 1968) && (gv_difficulty >= 4.0)) || ((gv_zdeathcount[0] == 0) && (gv_zdeathcount[1] == 0) && (gv_zdeathcount[2] == 0) && (gv_zdeathcount[3] == 0) && (gv_zdeathcount[4] == 0) && (gv_difficulty > 4.0)))) {
            SoundPlay(SoundLink("ChallengescombinedExecutor00055", -1), PlayerGroupAll(), 100.0, 0.0);
            while ((lv_n < 4)) {
                lv_n += 1;
                if ((PlayerStatus(lv_n) == c_playerStatusActive)) {
                    lv_tempstring = (lv_tempstring + PlayerName(lv_n) + StringExternal("Param/Value/4215893B") + StringToText(PlayerHandle(lv_n)) + StringExternal("Param/Value/CA289FD2"));
                }

            }
            TransmissionSend(PlayerGroupAll(), TransmissionSource(), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/0BD33E27"), lv_tempstring, 0.0, c_transmissionDurationAdd, false);
        }

        while ((lv_i < 4)) {
            lv_i += 1;
            if ((PlayerStatus(lv_i) == c_playerStatusActive)) {
                gf_bankaddtoint(gv_zbanks[lv_i], FixedToString(gv_difficulty, c_fixedPrecisionAny), "completeruns", 1);
                gf_showstatwindow(lv_i);
            }

        }
        lv_remainingzerg = UnitGroup(null, 6, RegionRect(122.0, 230.0, 247.0, 215.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_remainingzerg, c_unitCountAll) > 0)) {
            UnitKill(UnitGroupUnit(lv_remainingzerg, 1));
            UnitGroupRemove(lv_remainingzerg, UnitGroupUnit(lv_remainingzerg, 1));
        }
        lv_remainingzerg = UnitGroup(null, 6, RegionRect(207.0, 197.0, 218.0, 208.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        while ((UnitGroupCount(lv_remainingzerg, c_unitCountAll) > 0)) {
            UnitKill(UnitGroupUnit(lv_remainingzerg, 1));
            UnitGroupRemove(lv_remainingzerg, UnitGroupUnit(lv_remainingzerg, 1));
        }
        Wait(30.0, c_timeGame);
        GameOver(1, c_gameOverVictory, true, true);
        GameOver(2, c_gameOverVictory, true, true);
        GameOver(3, c_gameOverVictory, true, true);
        GameOver(4, c_gameOverVictory, true, true);
        UnitCreate(1, "Pylon", c_unitCreateIgnorePlacement, 5, Point(233.0, 224.0), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }
    else {
        DialogControlSetVisible(gv_teleportdialogbuttons[8], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_activateStage11_Init () {
    gt_activateStage11 = TriggerCreate("gt_activateStage11_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_xpbarinit_Init();
    gt_XPbonusPeriodic_Init();
    gt_OptionalRampZbase2_Init();
    gt_SporeCrawler_Init();
    gt_Extrahatch_Init();
    gt_ExtraLair_Init();
    gt_optionalGreaterSpire1_Init();
    gt_evolutionquest2_Init();
    gt_evolutionquest3_Init();
    gt_zbase51_Init();
    gt_Ultrabros_Init();
    gt_AnnihilatorRandomMissile_Init();
    gt_zbase11_Init();
    gt_zbase112_Init();
    gt_EnragedMetalisk_Init();
    gt_Queen_Init();
    gt_EscortRecruit_Init();
    gt_EscortRecruit2_Init();
    gt_EscortRecruit3_Init();
    gt_SpawningPool_Init();
    gt_optionalpool5_Init();
    gt_MoonLordBeacon_Init();
    gt_MoonLordBeacon3_Init();
    gt_MoonLordBeacon2_Init();
    gt_MoonLordBeacon4_Init();
    gt_optionalpool4_Init();
    gt_NydusWorm_Init();
    gt_NydusWorm2_Init();
    gt_init_Init();
    gt_initselectmodebuttonpress_Init();
    gt_init1_Init();
    gt_pickhero_Init();
    gt_TeleportDialogOpen_Init();
    gt_TeleportDialogButtonPressed_Init();
    gt_AchievementMassacreCount_Init();
    gt_AchievementChampionkill_Init();
    gt_AchievementDialogOpen_Init();
    gt_achievementviewnext_Init();
    gt_AchievementRestlessEnd_Init();
    gt_AchievementTreasure_Init();
    gt_AchievementRestlessStart_Init();
    gt_achievementRestless_Init();
    gt_UpgradeDialogOpen_Init();
    gt_UpgradeDialogButtonPressed_Init();
    gt_UpgradeDialogButtonPressedAuto_Init();
    gt_UpgradesDiffEasyAuto_Init();
    gt_talenttest_Init();
    gt_rewardtest_Init();
    gt_killtest_Init();
    gt_upgradetest_Init();
    gt_alliancetest_Init();
    gt_distancetest_Init();
    gt_xptest_Init();
    gt_xptest2_Init();
    gt_xptest3_Init();
    gt_restorerewards_Init();
    gt_forcereset_Init();
    gt_restoreachievm_Init();
    gt_restoreacmname_Init();
    gt_spawnunit_Init();
    gt_chaos_Init();
    gt_extinction_Init();
    gt_horror_Init();
    gt_mind_Init();
    gt_hive_Init();
    gt_showstats_Init();
    gt_showstatsclose_Init();
    gt_stickselect_Init();
    gt_gametime_Init();
    gt_displayhandle_Init();
    gt_xpfactor_Init();
    gt_clear_Init();
    gt_initstatwindow_Init();
    gt_ShowTalents_Init();
    gt_TalentButtonPressed_Init();
    gt_RewardButtonPressed_Init();
    gt_RewardDialogOpenClose_Init();
    gt_PlayerLeaves_Init();
    gt_unitdeath_Init();
    gt_UnitWasStunned_Init();
    gt_AutocastOn_Init();
    gt_AutocastOff_Init();
    gt_SkillPlasmaTorpedoCast_Init();
    gt_PartingGift_Init();
    gt_Assault_Init();
    gt_SkillGuidedMissileCast_Init();
    gt_SkillStrafeCast_Init();
    gt_SkillMultishotCast_Init();
    gt_Doom_Init();
    gt_Shadowplay_Init();
    gt_Energytap_Init();
    gt_Shadowcrash_Init();
    gt_thunderfurycast_Init();
    gt_ltngcast_Init();
    gt_PowerDrain_Init();
    gt_poisonboltfired_Init();
    gt_musclepoisonuse_Init();
    gt_healingreagentcast_Init();
    gt_Virulent_Init();
    gt_DisplayElementalStacks_Init();
    gt_Orbit_Init();
    gt_Orbit2_Init();
    gt_BladeStormCast_Init();
    gt_LeapCastHurdle_Init();
    gt_BuffApplication_Init();
    gt_Incapacitation_Init();
    gt_Upgrades_Init();
    gt_RemoveDR_Init();
    gt_ProtossAlliesAttackOrders_Init();
    gt_KillHatch_Init();
    gt_StructureCleanupAdd_Init();
    gt_StructureCleanupKill_Init();
    gt_activatebase1again_Init();
    gt_activatebase2_Init();
    gt_activatebase3_Init();
    gt_activatebase4_Init();
    gt_activatebase5_Init();
    gt_activatebase6_Init();
    gt_activatebase7_Init();
    gt_activateStage8_Init();
    gt_activateStage9_Init();
    gt_activateStage10_Init();
    gt_activateStage11_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
